---
description: 
globs: 
alwaysApply: true
---
---
description: >
  Angular project best practices including style guide adherence, syntax correctness, i18n integration, design patterns, performance, accessibility, and integration strategies.
globs:
  - "src/**/*.ts"
  - "src/**/*.html"
  - "src/**/*.css"
  - "src/**/*.scss"
  - "src/**/*.spec.ts"
alwaysApply: true
---

# Angular Architecture and Syntax
- Follow the Angular Style Guide (e.g., component-based architecture, single responsibility principle).
- Use PascalCase for class names (e.g., SearchComponent) and kebab-case for file names (e.g., search.component.ts).
- Use Angular CLI conventions for generating files (e.g., `ng generate component`).
- Implement dependency injection via constructor injection.
- Use `OnPush` change detection strategy where possible.
- Leverage Angular lifecycle hooks (e.g., `ngOnInit`, `ngAfterViewInit`) effectively.

# RxJS and TypeScript
- Handle async operations with RxJS Observables and operators like `takeUntil`, `debounceTime`, `catchError`.
- Ensure strict typing using interfaces (e.g., Animal, SearchSuggestion) in `src/app/models/`.
- Avoid unused imports; ensure strict mode compliance in TypeScript.
- Log important events using `LogService` and handle errors using `ErrorHandlerService`.

# Styling and Design
- Use Tailwind CSS utility classes as the primary styling mechanism (e.g., `bg-gradient-to-r`, `text-primary-500`).
- Define and use a custom color palette and font sizes in `tailwind.config.js`.
- Prefer utility-first styling over raw CSS unless component-specific logic requires otherwise.
- Implement animations using CSS keyframes (`animate-gradient`, `animate-float`) in component CSS or global styles.
- Use responsive design with Tailwind’s `sm:`, `md:`, `lg:`, `xl:` prefixes.

# Component Structure
- Place reusable UI components in `src/app/ui/components/`.
- Structure features in modules (e.g., `SearchModule`) for lazy loading.
- Use `@Input()` and `@Output()` for component interaction.
- Organize related services, models, and utilities into `services/`, `models/`, and `common/`.

# HTML & Accessibility
- Use semantic HTML (e.g., `<h1>`, `<button>`) and proper ARIA attributes.
- Follow WCAG 2.1 guidelines for contrast and keyboard navigation.
- Use `trackBy` in `*ngFor` when rendering lists.
- Add inline comments for complex DOM behaviors (e.g., swipe gestures).
- Avoid exposing sensitive data like API keys.

# API & Backend Integration
- Use `AnimalService` for all animal-related API calls.
- Configure endpoints via `src/configs/config.json`.
- Handle filtering and pagination according to the established logic in components like `SearchComponent`.

# Internationalization (i18n)
- **Wrap all user-facing text with Angular’s `i18n` attribute** (e.g., `<h1 i18n>Find Your Perfect Pet</h1>`).
- **Group all translations inside an `APP` root object** in translation files (e.g., `en.json`, `el.json`).
- **Use structured keys** under relevant sections:
  - `APP.HOME-PAGE` – For homepage-related translations
  - `APP.COMMONS` – For common terms like buttons (`SUBMIT`, `CANCEL`, `BACK`, etc.)
  - `APP.HEADER`, `APP.SEARCH`, etc. – For other specific components
- Maintain consistent and descriptive translation keys.
- Extract translations using Angular’s i18n tools (e.g., `ng extract-i18n` or `ng xi18n`).
- Always ensure translated elements preserve accessibility and semantic meaning.

# Testing and Documentation
- Write unit tests in `*.spec.ts` using Jasmine and Karma.
- Document all components with JSDoc, especially inputs/outputs.
- Simulate and test swipe gestures and UI state changes.
- Use descriptive commit messages and maintain feature branches for isolated changes.
