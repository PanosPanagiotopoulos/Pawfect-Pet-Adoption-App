

// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\app.component.css
```

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\app.component.html
```
<div class="min-h-screen">
  <app-header></app-header>
  <router-outlet></router-outlet>
</div>

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\app.component.spec.ts
```
import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AppComponent],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have the 'PetAdoptionApp-Frontend' title`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('PetAdoptionApp-Frontend');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, PetAdoptionApp-Frontend');
  });
});

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\app.component.ts
```
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrl: './app.component.css',
})
export class AppComponent {}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\app.config.ts
```
import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';
import { provideAnimations } from '@angular/platform-browser/animations';
import { provideHttpClient } from '@angular/common/http';

import { routes } from './app.routes';

export const appConfig: ApplicationConfig = {
  providers: [
    provideZoneChangeDetection({ eventCoalescing: true }), 
    provideRouter(routes),
    provideAnimations(),
    provideHttpClient()
  ]
};
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\app.module.ts
```
import { NgModule, APP_INITIALIZER } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { RouterModule } from '@angular/router';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { routes } from './app.routes';
import { NgIconsModule } from '@ng-icons/core';
import {
  lucideInfo,
  lucideMapPin,
  lucideMenu,
  lucideX,
  lucideHeart,
  lucideUser,
  lucideSearch,
  lucideMessageCircle,
  lucideHouse,
  lucidePhone,
  lucideMail,
  lucideLogOut,
  lucideClock,
  lucideUpload,
  lucideFile,
  lucideCheck,
  lucideTriangle,
  lucidePawPrint,
  lucideCake,
  lucideDog,
  lucideHeartPulse,
  lucideScale,
  lucideActivity,
  lucideMoon
} from '@ng-icons/lucide';

import { AppComponent } from './app.component';
import { HomeModule } from './ui/components/home/home.module';
import { InstallationConfigurationService } from './common/services/installation-configuration.service';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { AuthInterceptor } from 'src/app/common/tools/auth.interceptor';
import { UnauthorizedInterceptor } from 'src/app/common/tools/unauthorised.interceptor';
import { BaseHttpService } from './common/services/base-http.service';
import { HeaderComponent } from './ui/components/home/shared/header/header.component';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { ErrorHandlerService } from './common/services/error-handler.service';

export function initializeApp(
  installationConfigService: InstallationConfigurationService
) {
  return () => installationConfigService.loadConfig().toPromise();
}

@NgModule({
  declarations: [AppComponent],
  imports: [
    BrowserModule,
    BrowserAnimationsModule,
    RouterModule.forRoot(routes, {
      scrollPositionRestoration: 'enabled',
      anchorScrolling: 'enabled',
    }),
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    HttpClientModule,
    MatFormFieldModule,
    MatInputModule,
    NgIconsModule.withIcons({
      lucideHeart,
      lucideSearch,
      lucideMessageCircle,
      lucidePhone,
      lucideMail,
      lucideMenu,
      lucideUser,
      lucideX,
      lucideHouse,
      lucideInfo,
      lucideLogOut,
      lucideClock,
      lucideUpload,
      lucideFile,
      lucideCheck,
      lucideTriangle,
      lucidePawPrint,
      lucideCake,
      lucideDog,
      lucideHeartPulse,
      lucideScale,
      lucideActivity,
      lucideMoon
    }),
    HeaderComponent,
  ],
  providers: [
    InstallationConfigurationService,
    BaseHttpService,
    {
      provide: APP_INITIALIZER,
      useFactory: initializeApp,
      deps: [InstallationConfigurationService],
      multi: true,
    },
    {
      provide: HTTP_INTERCEPTORS,
      useClass: AuthInterceptor,
      multi: true,
    },
    {
      provide: HTTP_INTERCEPTORS,
      useClass: UnauthorizedInterceptor,
      multi: true,
    },
  ],
  bootstrap: [AppComponent],
})
export class AppModule {}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\app.routes.ts
```
import { Routes } from '@angular/router';
import { NotFoundComponent } from './ui/components/not-found/not-found.component';

export const routes: Routes = [
  {
    path: '',
    redirectTo: 'home',
    pathMatch: 'full',
  },
  {
    path: 'home',
    loadChildren: () =>
      import('./ui/components/home/home.module').then((m) => m.HomeModule),
  },
  {
    path: 'auth',
    loadChildren: () =>
      import('./ui/components/auth/auth.module').then((m) => m.AuthModule),
  },
  {
    path: 'search',
    loadChildren: () =>
      import('./ui/components/search/search.module').then(
        (m) => m.SearchModule
      ),
  },
  {
    path: '404',
    component: NotFoundComponent
  },
  {
    path: '**',
    redirectTo: '/404',
  },
];
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\enum\auth-provider.enum.ts
```
export enum AuthProvider {
    Local = 1,
    Google = 2,
  }
  
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\enum\gender.ts
```
export enum Gender {
  Male = 1,
  Female = 2,
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\enum\user-role.enum.ts
```
export enum UserRole {
    User = 1,
    Shelter = 2,
    Admin = 3,
  }
  
  
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\enum\verification-status.ts
```
export enum VerificationStatus {
  Pending = 1,
  Verified = 2,
  Rejected = 3,
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\models\jwt.model.ts
```
export interface JwtPayload {
  nameid: string;
  email: string;
  role: string;
  exp: number;
  iat: number;
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\services\base-http.service.ts
```
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

@Injectable()
export class BaseHttpService {
  constructor(protected http: HttpClient) {}

  get<T>(url: string, options?: Object): Observable<T> {
    return this.http.get<T>(url, options);
  }

  post<T>(url: string, body?: any, options?: Object): Observable<T> {
    return this.http.post<T>(url, body, options);
  }

  put<T>(url: string, body: any, options?: Object): Observable<T> {
    return this.http.put<T>(url, body, options);
  }

  delete<T>(url: string, options?: Object): Observable<T> {
    return this.http.post<T>(url, options);
  }

  patch<T>(url: string, body: any, options?: Object): Observable<T> {
    return this.http.patch<T>(url, body, options);
  }

  head<T>(url: string, options?: Object): Observable<T> {
    return this.http.head<T>(url, options);
  }

  options<T>(url: string, options?: Object): Observable<T> {
    return this.http.options<T>(url, options);
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\services\error-handler.service.ts
```
import { Injectable } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { ErrorDetails } from '../ui/error-message-banner.component';

@Injectable({
  providedIn: 'root',
})
export class ErrorHandlerService {
  handleError(error: any): ErrorDetails {
    if (error instanceof HttpErrorResponse) {
      return this.handleHttpError(error);
    }

    return {
      title: 'Σφάλμα',
      message: 'Παρουσιάστηκε ένα απρόσμενο σφάλμα. Παρακαλώ δοκιμάστε ξανά.',
      type: 'error',
    };
  }

  private handleHttpError(error: HttpErrorResponse): ErrorDetails {
    switch (error.status) {
      case 400:
        return {
          title: 'Μη έγκυρα δεδομένα',
          message:
            error.error?.message ||
            'Παρακαλώ ελέγξτε τα στοιχεία σας και δοκιμάστε ξανά.',
          type: 'warning',
        };

      case 401:
        return {
          title: 'Μη εξουσιοδοτημένη πρόσβαση',
          message: 'Παρακαλώ συνδεθείτε για να συνεχίσετε.',
          type: 'warning',
        };

      case 403:
        return {
          title: 'Απαγορευμένη πρόσβαση',
          message: 'Δεν έχετε δικαίωμα πρόσβασης σε αυτό το περιεχόμενο.',
          type: 'error',
        };

      case 404:
        return {
          title: 'Δεν βρέθηκε',
          message: 'Το περιεχόμενο που αναζητάτε δεν είναι διαθέσιμο.',
          type: 'warning',
        };

      case 409:
        return {
          title: 'Διένεξη δεδομένων',
          message:
            error.error?.message || 'Υπάρχει ήδη εγγραφή με αυτά τα στοιχεία.',
          type: 'warning',
        };

      case 422:
        return {
          title: 'Μη έγκυρα δεδομένα',
          message:
            error.error?.message ||
            'Τα δεδομένα που υποβάλατε δεν είναι έγκυρα.',
          type: 'warning',
        };

      case 500:
        return {
          title: 'Σφάλμα διακομιστή',
          message:
            'Παρουσιάστηκε ένα εσωτερικό σφάλμα. Παρακαλώ δοκιμάστε ξανά αργότερα.',
          type: 'error',
        };

      case 503:
        return {
          title: 'Υπηρεσία μη διαθέσιμη',
          message:
            'Η υπηρεσία δεν είναι προσωρινά διαθέσιμη. Παρακαλώ δοκιμάστε ξανά αργότερα.',
          type: 'error',
        };

      case 0:
        return {
          title: 'Σφάλμα σύνδεσης',
          message:
            'Δεν ήταν δυνατή η σύνδεση με τον διακομιστή. Παρακαλώ ελέγξτε τη σύνδεσή σας.',
          type: 'warning',
        };

      default:
        return {
          title: 'Σφάλμα',
          message:
            'Παρουσιάστηκε ένα απρόσμενο σφάλμα. Παρακαλώ δοκιμάστε ξανά.',
          type: 'error',
        };
    }
  }

  handleAuthError(error: HttpErrorResponse): ErrorDetails {
    switch (error.status) {
      case 401:
        return {
          title: 'Σφάλμα σύνδεσης',
          message: 'Λάθος email ή κωδικός πρόσβασης.',
          type: 'error',
        };

      case 403:
        if (error.error?.isEmailVerified === false) {
          return {
            title: 'Μη επιβεβαιωμένο email',
            message: 'Παρακαλώ επιβεβαιώστε το email σας για να συνεχίσετε.',
            type: 'warning',
          };
        }
        return {
          title: 'Απαγορευμένη πρόσβαση',
          message: 'Ο λογαριασμός σας έχει απενεργοποιηθεί.',
          type: 'error',
        };

      case 404:
        return {
          title: 'Λογαριασμός δεν βρέθηκε',
          message: 'Δεν υπάρχει λογαριασμός με αυτό το email.',
          type: 'error',
        };

      case 429:
        return {
          title: 'Πολλές προσπάθειες',
          message:
            'Έχετε κάνει πολλές προσπάθειες. Παρακαλώ δοκιμάστε ξανά αργότερα.',
          type: 'warning',
        };

      default:
        return this.handleError(error);
    }
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\services\installation-configuration.service.ts
```
import { Injectable } from '@angular/core';
import { BaseHttpService } from './base-http.service';
import { Observable, forkJoin, map, tap, catchError, of } from 'rxjs';

interface InstallationConfig {
  appServiceAddress?: string;
  disableAuth?: boolean;
  googleClientId?: string;
  googleClientSecret?: string;
  baseGoogleEndpoint?: string;
  redirectUri?: string;
}

interface EnvironmentConfig {
  googleClientId: string;
  googleClientSecret: string;
  baseGoogleEndpoint: string;
  redirectPath: string;
}

@Injectable({
  providedIn: 'root',
})
export class InstallationConfigurationService {
  constructor(private readonly http: BaseHttpService) {}

  private _appServiceAddress: string = './';
  get appServiceAddress(): string {
    return this._appServiceAddress || './';
  }

  private _disableAuth: boolean = true;
  get disableAuth(): boolean {
    return this._disableAuth;
  }

  private _googleClientId: string = '';
  get googleClientId(): string {
    return this._googleClientId;
  }

  private _googleClientSecret: string = '';
  get googleClientSecret(): string {
    return this._googleClientSecret;
  }

  private _baseGoogleEndpoint: string = '';
  get baseGoogleEndpoint(): string {
    return this._baseGoogleEndpoint;
  }

  private _redirectUri: string = '';
  get redirectUri(): string {
    return this._redirectUri;
  }

  loadConfig(): Observable<InstallationConfig> {
    // Load both configuration files in parallel
    const configFile$ = this.http
      .get<InstallationConfig>('configs/config.json')
      .pipe(
        catchError((error) => {
          console.warn('Failed to load config.json:', error);
          return of({} as InstallationConfig);
        })
      );

    const environmentFile$ = this.http
      .get<EnvironmentConfig>('configs/environment.json')
      .pipe(
        catchError((error) => {
          console.warn('Failed to load environment.json:', error);
          return of({} as EnvironmentConfig);
        })
      );

    return forkJoin({
      config: configFile$,
      environment: environmentFile$,
    }).pipe(
      map((result) => {
        // Construct the full redirectUri using the redirectPath from environment
        const redirectUri = result.environment.redirectPath
          ? `${window.location.origin}${result.environment.redirectPath}`
          : '';

        // Combine the configurations
        const combinedConfig: InstallationConfig = {
          ...result.config,
          googleClientId: result.environment.googleClientId,
          googleClientSecret: result.environment.googleClientSecret,
          baseGoogleEndpoint: result.environment.baseGoogleEndpoint,
          redirectUri: redirectUri,
        };
        return combinedConfig;
      }),
      tap((config: InstallationConfig) => {
        // Set all configuration values with fallbacks
        this._appServiceAddress = config.appServiceAddress ?? './';
        this._disableAuth = config.disableAuth ?? false;
        this._googleClientId = config.googleClientId ?? '';
        this._googleClientSecret = config.googleClientSecret ?? '';
        this._baseGoogleEndpoint = config.baseGoogleEndpoint ?? '';
        this._redirectUri = config.redirectUri ?? '';
      }),
      catchError((error) => {
        console.error('Error loading configuration:', error);
        return of({} as InstallationConfig);
      })
    );
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\services\log.service.ts
```
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root',
})
export class LogService {
  separator = (key: string, value: any) => {
    if (value instanceof Error) {
      return {
        message: value.message,
        stack: value.stack,
        name: value.name
      };
    }
    return value ?? 'No value found to print';
  };

  logFormatted(log: any) {
    const timestamp = new Date().toISOString();
    const logWithTimestamp = {
      timestamp,
      ...log
    };

    const formatted: string = (typeof log).toLowerCase() === 'string' ? log : JSON.stringify(logWithTimestamp, this.separator, 2); 

    console.log(formatted);
  }
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\services\time-zone.service.ts
```
import { Injectable } from '@angular/core';
import * as moment from 'moment';
import * as momentTimezone from 'moment-timezone';
import { Observable, Subject } from 'rxjs';

@Injectable()
export class TimezoneService {
  private timezoneValues: string[];
  private timezoneChangeSubject = new Subject<string>();
  private currentTimezone?: string;

  constructor() {
    this.timezoneValues = momentTimezone.tz.names();
  }

  getTimezoneValues(): string[] {
    return this.timezoneValues;
  }

  hasTimezoneValue(timezone: string): boolean {
    return this.timezoneValues.includes(timezone);
  }

  timezoneSelected(timezone: string) {
    if (this.currentTimezone === timezone) {
      return;
    }
    this.currentTimezone = timezone;
    this.timezoneChangeSubject.next(timezone);
  }

  getTimezoneChangeObservable(): Observable<string> {
    return this.timezoneChangeSubject.asObservable();
  }

  getCurrentTimezone(): string {
    return this.currentTimezone!;
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\services\utils.service.ts
```
import { Injectable } from '@angular/core';
import { Animal } from '../../models/animal/animal.model';
import { LogService } from './log.service';

@Injectable({
  providedIn: 'root'
})
export class UtilsService {
  constructor(private logService: LogService) {}

  // Combine arrays while removing duplicates based on id
  combineDistinct<T extends { id?: string }>(arr1: T[], arr2: T[]): T[] {
    const combined = [...arr1]; 
    arr2.forEach(item => {
      if (!combined.some(existingItem => existingItem.id! === item.id!)) {
        combined.push(item); 
      }
    });
    return combined;
  }

  // Try to load each image URL until one succeeds or fall back to placeholder
  async tryLoadImages(animal: Animal): Promise<string> {
    if (!animal.attachedPhotos || animal.attachedPhotos.length === 0) {
      return '/assets/placeholder.jpg';
    }

    for (const photoUrl of animal.attachedPhotos.map(photo => photo.sourceUrl)) {
      try {
        await this.loadImage(photoUrl!);
        return photoUrl!;
      } catch (error) {
        continue;
      }
    }

    // If all photos fail, return placeholder
    return '/assets/placeholder.jpg';
  }

  private loadImage(url: string): Promise<void> {
    return new Promise((resolve, reject) => {
      const img = new Image();
      img.onload = () => resolve();
      img.onerror = () => reject();
      img.src = url;
    });
  }
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\tools\auth.interceptor.ts
```
import { Injectable } from '@angular/core';
import {
  HttpRequest,
  HttpHandler,
  HttpEvent,
  HttpInterceptor,
} from '@angular/common/http';
import { Observable } from 'rxjs';
import { AuthService } from '../../services/auth.service';

@Injectable()
export class AuthInterceptor implements HttpInterceptor {
  constructor(private authService: AuthService) {}

  intercept(
    request: HttpRequest<unknown>,
    next: HttpHandler
  ): Observable<HttpEvent<unknown>> {
    const token = this.authService.getToken();
    if (token) {
      const authRequest = request.clone({
        setHeaders: {
          Authorization: `Bearer ${token}`,
        },
      });

      return next.handle(authRequest);
    }

    return next.handle(request);
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\tools\date-time-format.pipe.ts
```
import { DatePipe } from '@angular/common';
import { Pipe, PipeTransform } from '@angular/core';
import * as moment from 'moment';
import * as momentTimezone from 'moment-timezone';
import { TimezoneService } from '../services/time-zone.service';

@Pipe({
  name: 'dateTimeFormatter',
})
export class DateTimeFormatPipe implements PipeTransform {
  constructor(
    private datePipe: DatePipe,
    private timezoneService: TimezoneService
  ) {}

  transform(
    value: any,
    format?: string,
    timezone?: string,
    locale?: string
  ): string | null {
    // using timezone set in timezoneService by default. can be overwritten with pipe arguments
    const timezoneToUse = timezone
      ? timezone
      : momentTimezone(value)
          .tz(this.timezoneService.getCurrentTimezone())
          .format('Z');
    return this.datePipe.transform(value, format, timezoneToUse, locale);
  }
}

@Pipe({
  name: 'dataTableDateTimeFormatter',
})
// This is only used for the DataTable Column definition.
// It's a hacky way to apply format to the pipe because it only supports passing a pipe instance and calls transform in it without params.
export class DataTableDateTimeFormatPipe
  extends DateTimeFormatPipe
  implements PipeTransform
{
  format: string = '';
  timezone: string = '';

  constructor(
    private _datePipe: DatePipe,
    private _timezoneService: TimezoneService
  ) {
    super(_datePipe, _timezoneService);
  }

  public withTimezone(timezone: string): DataTableDateTimeFormatPipe {
    this.timezone = timezone;
    return this;
  }

  public withFormat(format: string): DataTableDateTimeFormatPipe {
    this.format = format;
    return this;
  }

  override transform(value: any): string | null {
    return super.transform(value, this.format, this.timezone);
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\tools\unauthorised.interceptor.ts
```
import { Injectable } from '@angular/core';
import {
  HttpRequest,
  HttpHandler,
  HttpEvent,
  HttpInterceptor,
  HttpErrorResponse,
} from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { Router } from '@angular/router';

@Injectable()
export class UnauthorizedInterceptor implements HttpInterceptor {
  constructor(private router: Router) {}

  intercept(
    request: HttpRequest<unknown>,
    next: HttpHandler
  ): Observable<HttpEvent<unknown>> {
    return next.handle(request).pipe(
      catchError((error: HttpErrorResponse) => {
        // Check specifically for 403 Forbidden responses
        if (error.status === 403) {
          console.log('Access forbidden. Redirecting to login page.');

          // Navigate to login page
          this.router.navigate(['/auth/login']);
        }

        // Re-throw the error so other error handlers can process it
        return throwError(() => error);
      })
    );
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\ui\base-component.ts
```
import { Directive, OnDestroy } from '@angular/core';
import { Subject } from 'rxjs';

@Directive()
export abstract class BaseComponent implements OnDestroy {
  protected _destroyed: Subject<boolean> = new Subject();

  protected constructor() {}

  ngOnDestroy(): void {
    this._destroyed.next(true);
    this._destroyed.complete();
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\ui\clock-time-picker.component.ts
```
import { Component, Input, Output, EventEmitter, OnInit, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { NgIconsModule } from '@ng-icons/core';
import { lucideClock, lucideX } from '@ng-icons/lucide';

@Component({
  selector: 'app-clock-time-picker',
  standalone: true,
  imports: [CommonModule, FormsModule, NgIconsModule],
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: `
    <div class="mb-4 border border-gray-700/50 rounded-xl p-4 hover:border-gray-600/70 transition-colors">
      <div class="flex justify-between items-center mb-3">
        <h4 class="text-white font-medium">{{ day }}</h4>
        
        <!-- Closed toggle -->
        <div class="flex items-center">
          <label class="relative inline-flex items-center cursor-pointer">
            <input
              type="checkbox"
              [(ngModel)]="isClosed"
              (change)="onClosedChange()"
              class="sr-only peer"
            />
            <div
              class="w-11 h-6 bg-gray-700 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-red-600"
            ></div>
          </label>
          <span class="ml-3 text-sm text-gray-300">{{ isClosed ? 'Κλειστό' : 'Ανοιχτό' }}</span>
        </div>
      </div>
      
      <!-- Time selection (shown only when not closed) -->
      <div *ngIf="!isClosed" class="flex items-center justify-between">
        <div class="flex items-center space-x-2">
          <span class="text-gray-400 text-sm">{{ openTime || 'Επιλέξτε ώρα' }}</span>
          <button 
            (click)="openTimePicker('open')" 
            class="p-2 bg-gray-700/50 hover:bg-gray-600/50 rounded-lg transition-colors"
            aria-label="Select opening time"
            type="button"
          >
            <ng-icon name="lucideClock" [size]="'18'" class="text-gray-300"></ng-icon>
          </button>
        </div>
        
        <span class="text-gray-400 mx-2">έως</span>
        
        <div class="flex items-center space-x-2">
          <span class="text-gray-400 text-sm">{{ closeTime || 'Επιλέξτε ώρα' }}</span>
          <button 
            (click)="openTimePicker('close')" 
            class="p-2 bg-gray-700/50 hover:bg-gray-600/50 rounded-lg transition-colors"
            aria-label="Select closing time"
            type="button"
          >
            <ng-icon name="lucideClock" [size]="'18'" class="text-gray-300"></ng-icon>
          </button>
        </div>
      </div>
      
      <!-- Time picker modal -->
      <div *ngIf="showTimePicker" class="fixed inset-0 z-50 flex items-center justify-center">
        <!-- Backdrop -->
        <div class="absolute inset-0 bg-black/50 backdrop-blur-sm" (click)="closeTimePicker()"></div>
        
        <!-- Modal -->
        <div class="relative bg-gray-800 rounded-xl p-6 shadow-xl max-w-md w-full mx-4 transform transition-all">
          <button 
            (click)="closeTimePicker()" 
            class="absolute top-3 right-3 p-1 text-gray-400 hover:text-white"
            aria-label="Close time picker"
            type="button"
          >
            <ng-icon name="lucideX" [size]="'20'"></ng-icon>
          </button>
          
          <h3 class="text-xl font-semibold text-white mb-4">
            {{ currentPickerType === 'open' ? 'Επιλογή ώρας ανοίγματος' : 'Επιλογή ώρας κλεισίματος' }}
          </h3>
          
          <div class="mb-6">
            <label class="block text-sm font-medium text-gray-400 mb-2">Επιλέξτε ώρα</label>
            <input 
              type="time" 
              [(ngModel)]="tempTime" 
              class="w-full px-4 py-3 bg-white/5 border border-white/10 rounded-xl text-white 
                     focus:border-primary-500/50 focus:ring-2 focus:ring-primary-500/20 focus:outline-none"
            />
          </div>
          
          <div class="flex justify-end space-x-3">
            <button 
              (click)="closeTimePicker()" 
              class="px-4 py-2 border border-gray-600 text-gray-300 rounded-lg hover:bg-white/5 transition-all"
              type="button"
            >
              Ακύρωση
            </button>
            <button 
              (click)="confirmTimeSelection()" 
              class="px-4 py-2 bg-gradient-to-r from-primary-600 to-accent-600 text-white rounded-lg 
                     hover:shadow-lg hover:shadow-primary-500/20 transition-all"
              type="button"
            >
              Επιβεβαίωση
            </button>
          </div>
        </div>
      </div>
      
      <!-- Error message -->
      <div *ngIf="error" class="text-red-400 text-sm mt-2">{{ error }}</div>
    </div>
  `,
  styles: [`
    .time-picker-container {
      display: flex;
      align-items: center;
      gap: 1rem;
    }
  `]
})
export class ClockTimePickerComponent implements OnInit {
  @Input() day!: string;
  @Input() initialValue: string = '';
  @Output() timeChange = new EventEmitter<{day: string, openTime: string, closeTime: string}>();

  openTime: string = '';
  closeTime: string = '';
  isClosed: boolean = false;
  error: string | null = null;
  isModified: boolean = false;
  
  // Time picker modal
  showTimePicker: boolean = false;
  currentPickerType: 'open' | 'close' = 'open';
  tempTime: string = '';

  constructor(private cdr: ChangeDetectorRef) {}

  ngOnInit() {
    this.parseInitialValue();
  }

  parseInitialValue() {
    if (this.initialValue === 'closed') {
      this.isClosed = true;
      this.isModified = true;
    } else if (this.initialValue && this.initialValue !== '') {
      const parts = this.initialValue.split(',');
      if (parts.length === 2) {
        this.openTime = parts[0];
        this.closeTime = parts[1];
        this.isModified = true;
      }
    }
  }

  onClosedChange() {
    this.isModified = true;
    
    if (this.isClosed) {
      this.emitTimeChange('closed', 'closed');
    } else {
      this.emitTimeChange(this.openTime, this.closeTime);
    }
  }

  openTimePicker(type: 'open' | 'close') {
    this.currentPickerType = type;
    this.tempTime = type === 'open' ? this.openTime : this.closeTime;
    this.showTimePicker = true;
    this.cdr.markForCheck();
  }

  closeTimePicker() {
    this.showTimePicker = false;
    this.cdr.markForCheck();
  }

  confirmTimeSelection() {
    if (this.tempTime) {
      this.isModified = true;
      
      if (this.currentPickerType === 'open') {
        this.openTime = this.tempTime;
      } else {
        this.closeTime = this.tempTime;
      }
      
      this.validateTimeRange();
      this.closeTimePicker();
      
      if (!this.error) {
        this.emitTimeChange(this.openTime, this.closeTime);
      }
    }
  }

  validateTimeRange() {
    if (this.openTime && this.closeTime) {
      if (this.openTime >= this.closeTime) {
        this.error = 'Η ώρα κλεισίματος πρέπει να είναι μετά την ώρα ανοίγματος';
        return false;
      } else {
        this.error = null;
        return true;
      }
    } else if ((this.openTime && !this.closeTime) || (!this.openTime && this.closeTime)) {
      // If only one time is provided
      this.error = 'Πρέπει να συμπληρώσετε και τις δύο ώρες';
      return false;
    } else if (!this.isModified) {
      // If no times are provided and component hasn't been modified, it's valid
      this.error = null;
      return true;
    }
    return true;
  }

  emitTimeChange(openTime: string, closeTime: string) {
    this.timeChange.emit({
      day: this.day,
      openTime,
      closeTime
    });
  }
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\ui\country-codes.ts
```
export interface CountryCode {
  code: string;
  name: string;
  flag: string;
}

export const COUNTRY_CODES: CountryCode[] = [
  { code: '+30', name: 'Greece', flag: '🇬🇷' },
  { code: '+31', name: 'Netherlands', flag: '🇳🇱' },
  { code: '+32', name: 'Belgium', flag: '🇧🇪' },
  { code: '+33', name: 'France', flag: '🇫🇷' },
  { code: '+34', name: 'Spain', flag: '🇪🇸' },
  { code: '+350', name: 'Gibraltar', flag: '🇬🇮' },
  { code: '+351', name: 'Portugal', flag: '🇵🇹' },
  { code: '+352', name: 'Luxembourg', flag: '🇱🇺' },
  { code: '+353', name: 'Ireland', flag: '🇮🇪' },
  { code: '+354', name: 'Iceland', flag: '🇮🇸' },
  { code: '+355', name: 'Albania', flag: '🇦🇱' },
  { code: '+356', name: 'Malta', flag: '🇲🇹' },
  { code: '+357', name: 'Cyprus', flag: '🇨🇾' },
  { code: '+358', name: 'Finland', flag: '🇫🇮' },
  { code: '+359', name: 'Bulgaria', flag: '🇧🇬' },
  { code: '+36', name: 'Hungary', flag: '🇭🇺' },
  { code: '+370', name: 'Lithuania', flag: '🇱🇹' },
  { code: '+371', name: 'Latvia', flag: '🇱🇻' },
  { code: '+372', name: 'Estonia', flag: '🇪🇪' },
  { code: '+373', name: 'Moldova', flag: '🇲🇩' },
  { code: '+374', name: 'Armenia', flag: '🇦🇲' },
  { code: '+375', name: 'Belarus', flag: '🇧🇾' },
  { code: '+376', name: 'Andorra', flag: '🇦🇩' },
  { code: '+377', name: 'Monaco', flag: '🇲🇨' },
  { code: '+378', name: 'San Marino', flag: '🇸🇲' },
  { code: '+380', name: 'Ukraine', flag: '🇺🇦' },
  { code: '+381', name: 'Serbia', flag: '🇷🇸' },
  { code: '+382', name: 'Montenegro', flag: '🇲🇪' },
  { code: '+385', name: 'Croatia', flag: '🇭🇷' },
  { code: '+386', name: 'Slovenia', flag: '🇸🇮' },
  { code: '+387', name: 'Bosnia and Herzegovina', flag: '🇧🇦' },
  { code: '+389', name: 'North Macedonia', flag: '🇲🇰' },
  { code: '+39', name: 'Italy', flag: '🇮🇹' },
  { code: '+40', name: 'Romania', flag: '🇷🇴' },
  { code: '+41', name: 'Switzerland', flag: '🇨🇭' },
  { code: '+420', name: 'Czech Republic', flag: '🇨🇿' }
].sort((a, b) => a.name.localeCompare(b.name));
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\ui\error-message-banner.component.ts
```
import { Component, Input } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NgIconsModule } from '@ng-icons/core';

export interface ErrorDetails {
  title?: string;
  message: string;
  type?: 'error' | 'warning' | 'info';
}

@Component({
  selector: 'app-error-message-banner',
  standalone: true,
  imports: [CommonModule, NgIconsModule],
  template: `
    <div
      *ngIf="error"
      class="relative rounded-lg p-4 mb-6 animate-fadeIn"
      [class]="getBackgroundClass()"
      role="alert"
    >
      <div class="flex items-start">
        <!-- Icon -->
        <div class="flex-shrink-0">
          <ng-icon
            [name]="getIcon()"
            [class]="getIconClass()"
            [size]="'24'"
          ></ng-icon>
        </div>

        <!-- Content -->
        <div class="ml-3">
          <h3
            *ngIf="error.title"
            [class]="getTitleClass()"
            class="text-lg font-medium"
          >
            {{ error.title }}
          </h3>
          <div [class]="getMessageClass()" class="text-sm">
            {{ error.message }}
          </div>
        </div>

        <!-- Close Button -->
        <div class="ml-auto pl-3">
          <div class="-mx-1.5 -my-1.5">
            <button
              type="button"
              [class]="getCloseButtonClass()"
              (click)="clearError()"
            >
              <span class="sr-only">Dismiss</span>
              <ng-icon name="lucideX" [size]="'16'"></ng-icon>
            </button>
          </div>
        </div>
      </div>
    </div>
  `,
})
export class ErrorMessageBannerComponent {
  @Input() error?: ErrorDetails;

  getBackgroundClass(): string {
    switch (this.error?.type) {
      case 'warning':
        return 'bg-yellow-500/10 border border-yellow-500/30';
      case 'info':
        return 'bg-blue-500/10 border border-blue-500/30';
      default:
        return 'bg-red-500/10 border border-red-500/30';
    }
  }

  getIcon(): string {
    switch (this.error?.type) {
      case 'warning':
        return 'lucideTriangle';
      case 'info':
        return 'lucideInfo';
      default:
        return 'lucideX';
    }
  }

  getIconClass(): string {
    switch (this.error?.type) {
      case 'warning':
        return 'text-yellow-400';
      case 'info':
        return 'text-blue-400';
      default:
        return 'text-red-400';
    }
  }

  getTitleClass(): string {
    switch (this.error?.type) {
      case 'warning':
        return 'text-yellow-400';
      case 'info':
        return 'text-blue-400';
      default:
        return 'text-red-400';
    }
  }

  getMessageClass(): string {
    switch (this.error?.type) {
      case 'warning':
        return 'text-yellow-300';
      case 'info':
        return 'text-blue-300';
      default:
        return 'text-red-300';
    }
  }

  getCloseButtonClass(): string {
    switch (this.error?.type) {
      case 'warning':
        return 'rounded-md p-1.5 hover:bg-yellow-500/20 text-yellow-400 hover:text-yellow-300 focus:outline-none focus:ring-2 focus:ring-yellow-500/30 transition-colors';
      case 'info':
        return 'rounded-md p-1.5 hover:bg-blue-500/20 text-blue-400 hover:text-blue-300 focus:outline-none focus:ring-2 focus:ring-blue-500/30 transition-colors';
      default:
        return 'rounded-md p-1.5 hover:bg-red-500/20 text-red-400 hover:text-red-300 focus:outline-none focus:ring-2 focus:ring-red-500/30 transition-colors';
    }
  }

  clearError(): void {
    this.error = undefined;
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\ui\file-drop-area.component.ts
```
import {
  Component,
  Input,
  Output,
  EventEmitter,
  ChangeDetectionStrategy,
  HostListener,
  ElementRef,
  ViewChild,
  ChangeDetectorRef,
  OnDestroy,
  OnInit,
} from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormGroup, ReactiveFormsModule } from '@angular/forms';
import { NgIconsModule } from '@ng-icons/core';
import { ValidationMessageComponent } from './validation-message.component';
import { FileItem, FilePersist } from 'src/app/models/file/file.model';
import { FileService } from 'src/app/services/file.service';

@Component({
  selector: 'app-file-drop-area',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    NgIconsModule,
    ValidationMessageComponent,
  ],
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: `
    <div [formGroup]="form" class="relative group mb-10">
      <!-- Label -->
      <label
        [for]="controlName"
        class="block text-sm font-medium text-gray-400 mb-2"
      >
        {{ label }}
      </label>

      <!-- File drop area -->
      <div
        #dropArea
        class="relative border-2 border-dashed rounded-xl p-4 sm:p-6 text-center transition-all duration-300 max-w-full"
        [ngClass]="{
          'border-primary-500': isDragging,
          'border-white/20': !isDragging && !isInvalid,
          'border-red-500': isInvalid,
          'bg-primary-500/5': isDragging,
          'bg-white/5': !isDragging,
          'hover:border-primary-400/50 hover:bg-primary-500/5': !isInvalid
        }"
        (dragover)="onDragOver($event)"
        (dragleave)="onDragLeave($event)"
        (drop)="onDrop($event)"
      >
        <input
          type="file"
          [id]="controlName"
          class="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
          [accept]="accept"
          [multiple]="multiple"
          (change)="onFileSelected($event)"
          [attr.aria-invalid]="isInvalid"
          [attr.aria-describedby]="controlName + '-error'"
        />

        <div class="space-y-2 sm:space-y-4">
          <ng-icon
            name="lucideUpload"
            [size]="'36'"
            class="text-gray-400 group-hover:text-primary-400 transition-colors duration-300"
          ></ng-icon>

          <div class="space-y-1 sm:space-y-2">
            <p class="text-gray-300 text-sm sm:text-base">{{ dragDropText }}</p>
            <p class="text-xs sm:text-sm text-gray-500">{{ acceptText }}</p>
          </div>
        </div>
      </div>

      <!-- Selected files preview -->
      <div *ngIf="selectedFiles.length > 0" class="mt-4 space-y-2">
        <div class="text-sm font-medium text-gray-400 mb-2">
          {{ selectedFiles.length }}
          {{ selectedFiles.length === 1 ? 'αρχείο' : 'αρχεία' }} επιλεγμένα
        </div>

        <div class="max-h-40 overflow-y-auto custom-scrollbar">
          <div
            *ngFor="let file of selectedFiles; let i = index"
            class="flex items-center justify-between p-2 bg-white/5 rounded-lg mb-2 group"
          >
            <div class="flex items-center overflow-hidden">
              <ng-icon
                name="lucideFile"
                [size]="'20'"
                class="text-gray-400 mr-2 flex-shrink-0"
              ></ng-icon>
              <span class="text-sm text-gray-300 truncate">{{
                file.file.name  
              }}</span>
              <span class="text-xs text-gray-500 ml-2 flex-shrink-0"
                >({{ formatFileSize(file.file.size!) }})</span
              >
            </div>

            <button
              type="button"
              class="p-1 text-gray-500 hover:text-red-400 transition-colors opacity-0 group-hover:opacity-100 flex-shrink-0"
              (click)="removeFile(i)"
              aria-label="Remove file"
            >
              <ng-icon name="lucideX" [size]="'16'"></ng-icon>
            </button>
          </div>
        </div>
      </div>

      <!-- Error message for upload failure -->
      <div *ngIf="uploadError" class="mt-2 text-sm text-red-500">
        {{ uploadError }}
      </div>

      <!-- Error message from validation -->
      <app-validation-message
        [id]="controlName + '-error'"
        [control]="form.get(controlName)"
        [field]="label"
        [showImmediately]="true"
      >
      </app-validation-message>

      <!-- Hint text -->
      <p *ngIf="hint && !isInvalid" class="mt-2 text-sm text-gray-400">
        {{ hint }}
      </p>
    </div>
  `,
  styles: [
    `
      .custom-scrollbar {
        scrollbar-width: thin;
        scrollbar-color: rgba(255, 255, 255, 0.2) rgba(255, 255, 255, 0.1);
      }

      .custom-scrollbar::-webkit-scrollbar {
        width: 6px;
      }

      .custom-scrollbar::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 3px;
      }

      .custom-scrollbar::-webkit-scrollbar-thumb {
        background: rgba(255, 255, 255, 0.2);
        border-radius: 3px;
      }

      .custom-scrollbar::-webkit-scrollbar-thumb:hover {
        background: rgba(255, 255, 255, 0.3);
      }
    `,
  ],
})
export class FileDropAreaComponent implements OnInit, OnDestroy {
  @Input() form!: FormGroup;
  @Input() controlName!: string;
  @Input() label: string = 'Επιλογή αρχείων';
  @Input() hint?: string;
  @Input() accept: string = '*/*';
  @Input() multiple: boolean = false;
  @Input() maxFileSize: number = 5 * 1024 * 1024; 
  @Input() maxFiles: number = 5;
  @Output() filesChange = new EventEmitter<FileItem[]>(); 

  @ViewChild('dropArea') dropArea!: ElementRef;

  isDragging = false;
  selectedFiles: FileItem[] = [];
  private persistInterval: any;
  uploadError: string | null = null; // New property to display upload error

  constructor(
    private cdr: ChangeDetectorRef,
    private fileService: FileService
  ) {}

  ngOnInit() {
    this.persistInterval = setInterval(() => this.checkAndPersistFiles(), 1000);
  }

  ngOnDestroy() {
    if (this.persistInterval) {
      clearInterval(this.persistInterval);
    }
  }

  get isInvalid(): boolean {
    const control = this.form.get(this.controlName);
    return !!(control?.invalid && (control?.touched || control?.dirty));
  }

  get dragDropText(): string {
    return this.multiple
      ? 'Σύρετε και αφήστε αρχεία εδώ ή κάντε κλικ για επιλογή'
      : 'Σύρετε και αφήστε ένα αρχείο εδώ ή κάντε κλικ για επιλογή';
  }

  get acceptText(): string {
    if (this.accept === '*/*') return 'Αποδεκτοί όλοι οι τύποι αρχείων';
    const types = this.accept
      .split(',')
      .map((type) => type.trim().replace('.', '').toUpperCase())
      .join(', ');
    return `Αποδεκτοί τύποι: ${types}`;
  }

  @HostListener('window:dragover', ['$event'])
  onWindowDragOver(event: DragEvent): void {
    event.preventDefault();
  }

  @HostListener('window:drop', ['$event'])
  onWindowDrop(event: DragEvent): void {
    event.preventDefault();
  }

  onDragOver(event: DragEvent): void {
    event.preventDefault();
    event.stopPropagation();
    this.isDragging = true;
    this.cdr.markForCheck();
  }

  onDragLeave(event: DragEvent): void {
    event.preventDefault();
    event.stopPropagation();
    this.isDragging = false;
    this.cdr.markForCheck();
  }

  onDrop(event: DragEvent): void {
    event.preventDefault();
    event.stopPropagation();
    this.isDragging = false;
    if (event.dataTransfer?.files) {
      this.handleFiles(event.dataTransfer.files);
    }
    this.cdr.markForCheck();
  }

  onFileSelected(event: Event): void {
    const input = event.target as HTMLInputElement;
    if (input.files) {
      this.handleFiles(input.files);
    }
  }

  handleFiles(fileList: FileList): void {
    const newFiles = Array.from(fileList);

    if (this.multiple) {
      if (this.selectedFiles.length + newFiles.length > this.maxFiles) {
        this.setError(`Μπορείτε να επιλέξετε μέχρι ${this.maxFiles} αρχεία`);
        return;
      }
    } else {
      this.selectedFiles = [];
    }

    const oversizedFiles = newFiles.filter(file => file.size > this.maxFileSize);
    if (oversizedFiles.length > 0) {
      this.setError(`Το μέγιστο μέγεθος αρχείου είναι ${this.formatFileSize(this.maxFileSize)}`);
      return;
    }

    if (this.accept !== '*/*') {
      const acceptedTypes = this.accept.split(',').map(type => type.trim());
      const invalidFiles = newFiles.filter(file => {
        return !acceptedTypes.some(type => {
          if (type.startsWith('.')) {
            return file.name.toLowerCase().endsWith(type.toLowerCase());
          } else {
            return file.type.match(new RegExp(type.replace('*', '.*')));
          }
        });
      });
      if (invalidFiles.length > 0) {
        this.setError(`Μη αποδεκτός τύπος αρχείου. Αποδεκτοί τύποι: ${this.accept}`);
        return;
      }
    }

    const newFileItems = newFiles.map(file => ({ 
      file, 
      addedAt: Date.now(), 
      isPersisting: false, 
      uploadFailed: false 
    }));
    if (this.multiple) {
      this.selectedFiles = [...this.selectedFiles, ...newFileItems];
    } else {
      this.selectedFiles = newFileItems;
    }

    this.updateFormControl();
    this.filesChange.emit(this.selectedFiles);
    this.uploadError = null; 
  }

  removeFile(index: number): void {
    this.selectedFiles.splice(index, 1);
    this.updateFormControl();
    this.filesChange.emit(this.selectedFiles);
    this.uploadError = null; 
    this.cdr.markForCheck();
  }

  checkAndPersistFiles(): void {
    const now = Date.now();
    // Exclude files that have already failed to upload
    const filesToPersist = this.selectedFiles.filter(
      item => !item.persistedId && !item.isPersisting && !item.uploadFailed && item.addedAt + 2000 <= now
    );

    if (filesToPersist.length > 0) {
      filesToPersist.forEach(item => item.isPersisting = true);
      const formData = new FormData();
      filesToPersist.forEach((item: FileItem, index) => {
        formData.append(`files[${index}]`, item.file);
      });

      this.fileService.persistBatchTemporary(formData).subscribe({
        next: (filePersists: FilePersist[]) => {
          filePersists.forEach((fp, index) => {
            const item = filesToPersist[index];
            if (this.selectedFiles.includes(item)) {
              item.persistedId = fp.id;
            }
            item.isPersisting = false;
          });
          this.updateFormControl();
          this.filesChange.emit(this.selectedFiles);
          this.uploadError = null; 
          this.cdr.markForCheck();
        },
        error: (error: Error) => {
          console.error('Error persisting files:', error);
          filesToPersist.forEach(item => {
            item.isPersisting = false;
            item.uploadFailed = true; 
          });
          this.uploadError = 'Η μεταφόρτωση απέτυχε. Παρακαλώ δοκιμάστε ξανά.';
          this.cdr.markForCheck();
        }
      });
    }
  }

  updateFormControl(): void {
    const control = this.form.get(this.controlName);
    if (control) {
      const persistedIds = this.selectedFiles
        .filter(item => item.persistedId)
        .map(item => item.persistedId!);
      const valueToSet = this.multiple ? persistedIds : persistedIds[0] || null;
      control.setValue(valueToSet);
      control.markAsTouched();
      control.markAsDirty();
      control.updateValueAndValidity();
    }
  }

  setError(errorMessage: string): void {
    const control = this.form.get(this.controlName);
    if (control) {
      control.setErrors({ custom: errorMessage });
      control.markAsTouched();
    }
  }

  formatFileSize(bytes: number): string {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\ui\form-error-summary.component.ts
```
import { Component, Input, ChangeDetectionStrategy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ValidationErrorInfo } from '../form-input-error-tracker.service';

@Component({
  selector: 'app-form-error-summary',
  standalone: true,
  imports: [CommonModule],
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: `
    <div *ngIf="errors.length > 0" 
         class="bg-red-500/10 border border-red-500/30 rounded-lg p-4 my-4 animate-fadeIn"
         role="alert"
         aria-live="assertive">
      <h3 class="text-red-400 font-medium mb-2 flex items-center">
        <span class="mr-2">⚠️</span> {{ title }}
      </h3>
      <ul class="list-disc list-inside text-sm text-red-400 space-y-1">
        <li *ngFor="let error of errors" 
            (click)="scrollToError(error)"
            class="cursor-pointer hover:underline">
          {{ error.errorMessage }}
        </li>
      </ul>
    </div>
  `,
  styles: [`
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    .animate-fadeIn {
      animation: fadeIn 0.3s ease-out forwards;
    }
  `]
})
export class FormErrorSummaryComponent {
  @Input() errors: ValidationErrorInfo[] = [];
  @Input() title: string = 'Παρακαλώ διορθώστε τα παρακάτω σφάλματα:';

  scrollToError(error: ValidationErrorInfo): void {
    if (error.element) {
      // Scroll to the element
      error.element.scrollIntoView({ 
        behavior: 'smooth', 
        block: 'center' 
      });
      
      // Focus the element if it's an input
      if (error.element instanceof HTMLInputElement || 
          error.element instanceof HTMLTextAreaElement || 
          error.element instanceof HTMLSelectElement) {
        error.element.focus();
      }
      
      // Add a highlight effect
      this.highlightElement(error.element);
    }
  }

  private highlightElement(element: HTMLElement): void {
    // Add a temporary highlight class
    element.classList.add('highlight-error');
    
    // Remove the class after animation completes
    setTimeout(() => {
      element.classList.remove('highlight-error');
    }, 1500);
  }
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\ui\form-field.component.ts
```
import { Component, Input, ChangeDetectionStrategy } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-form-field',
  standalone: true,
  imports: [CommonModule],
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: `
    <div class="form-field-container mb-8">
      <h3 *ngIf="title" class="text-lg font-medium text-white mb-4">{{ title }}</h3>
      <div [class]="containerClass">
        <ng-content></ng-content>
      </div>
      <p *ngIf="hint" class="mt-2 text-sm text-gray-400">{{ hint }}</p>
    </div>
  `,
  styles: [`
    .form-field-container {
      position: relative;
    }
  `]
})
export class FormFieldComponent {
  @Input() title?: string;
  @Input() hint?: string;
  @Input() containerClass: string = '';
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\ui\form-input-error-tracker.service.ts
```
import { Injectable } from '@angular/core';
import { AbstractControl, FormGroup } from '@angular/forms';
import { BehaviorSubject, Observable } from 'rxjs';

export interface ValidationErrorInfo {
  controlName: string;
  controlPath: string[];
  errorType: string;
  errorMessage: string;
  element?: HTMLElement;
}

@Injectable({
  providedIn: 'root'
})
export class FormInputErrorTrackerService {
  private errorsSubject = new BehaviorSubject<ValidationErrorInfo[]>([]);
  public errors$: Observable<ValidationErrorInfo[]> = this.errorsSubject.asObservable();

  constructor() {}

  /**
   * Track validation errors in a form group
   * @param formGroup The form group to track
   * @param formContainer The HTML element containing the form
   */
  trackFormErrors(formGroup: FormGroup, formContainer: HTMLElement): ValidationErrorInfo[] {
    const errors: ValidationErrorInfo[] = [];
    this.collectFormErrors(formGroup, [], errors);
    
    // Try to find elements for each error
    errors.forEach(error => {
      error.element = this.findElementForControl(error.controlName, formContainer);
    });
    
    this.errorsSubject.next(errors);
    return errors;
  }

  /**
   * Recursively collect validation errors from a form group
   */
  private collectFormErrors(
    formGroup: FormGroup, 
    parentPath: string[], 
    errors: ValidationErrorInfo[]
  ): void {
    Object.keys(formGroup.controls).forEach(key => {
      const control = formGroup.get(key);
      const currentPath = [...parentPath, key];
      
      if (control instanceof FormGroup) {
        // Recursively check nested form groups
        this.collectFormErrors(control, currentPath, errors);
      } else if (control && control.invalid && (control.touched || control.dirty)) {
        // Process errors for this control
        Object.keys(control.errors || {}).forEach(errorType => {
          errors.push({
            controlName: key,
            controlPath: currentPath,
            errorType,
            errorMessage: this.getErrorMessage(key, errorType, control.errors?.[errorType])
          });
        });
      }
    });
  }

  /**
   * Find the HTML element for a control
   */
  private findElementForControl(controlName: string, formContainer: HTMLElement): HTMLElement | undefined {
    // Try different selectors to find the element
    let element = formContainer.querySelector(`#${controlName}`) as HTMLElement;
    
    if (!element) {
      element = formContainer.querySelector(`[formcontrolname="${controlName}"]`) as HTMLElement;
    }
    
    if (!element) {
      element = formContainer.querySelector(`[name="${controlName}"]`) as HTMLElement;
    }
    
    return element;
  }

  /**
   * Scroll to the first error element
   */
  scrollToFirstError(errors: ValidationErrorInfo[]): void {
    if (errors.length === 0) return;
    
    // Find the first error with an element
    const errorWithElement = errors.find(error => error.element);
    
    if (errorWithElement?.element) {
      // Scroll to the element
      errorWithElement.element.scrollIntoView({ 
        behavior: 'smooth', 
        block: 'center' 
      });
      
      // Focus the element if it's an input
      if (errorWithElement.element instanceof HTMLInputElement || 
          errorWithElement.element instanceof HTMLTextAreaElement || 
          errorWithElement.element instanceof HTMLSelectElement) {
        errorWithElement.element.focus();
      }
    }
  }

  /**
   * Get a user-friendly error message for a validation error
   */
  private getErrorMessage(controlName: string, errorType: string, errorValue: any): string {
    const fieldName = this.formatFieldName(controlName);
    
    switch (errorType) {
      case 'required':
        return `Το πεδίο "${fieldName}" είναι υποχρεωτικό`;
      case 'minlength':
        return `Το πεδίο "${fieldName}" πρέπει να έχει τουλάχιστον ${errorValue.requiredLength} χαρακτήρες`;
      case 'maxlength':
        return `Το πεδίο "${fieldName}" δεν μπορεί να υπερβαίνει τους ${errorValue.requiredLength} χαρακτήρες`;
      case 'email':
        return `Παρακαλώ εισάγετε ένα έγκυρο email`;
      case 'pattern':
        return `Το πεδίο "${fieldName}" δεν έχει έγκυρη μορφή`;
      case 'invalidTimeRange':
        return `Η ώρα κλεισίματος πρέπει να είναι μετά την ώρα ανοίγματος`;
      case 'invalidSocialMedia':
        return `Η διεύθυνση ${fieldName} δεν είναι έγκυρη`;
      default:
        return `Το πεδίο "${fieldName}" περιέχει σφάλμα`;
    }
  }

  /**
   * Format a control name to be more user-friendly
   */
  private formatFieldName(controlName: string): string {
    // Convert camelCase to space-separated words
    const formatted = controlName
      .replace(/([A-Z])/g, ' $1')
      .replace(/^./, str => str.toUpperCase());
    
    // Special cases
    const specialCases: {[key: string]: string} = {
      'shelterName': 'Όνομα Καταφυγίου',
      'description': 'Περιγραφή',
      'website': 'Ιστοσελίδα',
      'facebook': 'Facebook',
      'instagram': 'Instagram',
      'monday': 'Δευτέρα',
      'tuesday': 'Τρίτη',
      'wednesday': 'Τετάρτη',
      'thursday': 'Πέμπτη',
      'friday': 'Παρασκευή',
      'saturday': 'Σάββατο',
      'sunday': 'Κυριακή'
    };
    
    return specialCases[controlName] || formatted;
  }

  /**
   * Clear tracked errors
   */
  clearErrors(): void {
    this.errorsSubject.next([]);
  }
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\ui\form-input.component.ts
```
import {
  Component,
  Input,
  Output,
  EventEmitter,
  ChangeDetectionStrategy,
} from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormGroup, ReactiveFormsModule } from '@angular/forms';
import { ValidationMessageComponent } from 'src/app/common/ui/validation-message.component';

@Component({
  selector: 'app-form-input',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, ValidationMessageComponent],
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: `
    <div [formGroup]="form" class="relative group mb-10">
      <!-- Input field -->
      <input
        [type]="type"
        [formControlName]="controlName"
        [id]="controlName"
        [attr.aria-invalid]="isInvalid"
        [attr.aria-describedby]="controlName + '-error'"
        [class]="inputClass"
        [readOnly]="readonly"
        [class.cursor-not-allowed]="readonly"
        [class.opacity-75]="readonly"
        class="peer w-full px-4 py-3 bg-white/5 border rounded-xl text-white 
               placeholder-transparent
               focus:ring-2 focus:outline-none 
               transition-all duration-300"
        [placeholder]="placeholder"
        [maxLength]="maxLength"
        (input)="onInputChange($event)"
        (blur)="onBlur()"
      />

      <!-- Floating label -->
      <label
        [for]="controlName"
        [class]="labelClass"
        class="absolute text-sm duration-300 transform 
               -translate-y-4 scale-75 top-2 z-10 origin-[0] bg-transparent
               px-2 peer-focus:px-2
               peer-placeholder-shown:scale-100 peer-placeholder-shown:-translate-y-1/2 
               peer-placeholder-shown:top-1/2 peer-focus:top-2 peer-focus:-translate-y-4 
               peer-focus:scale-75 left-1"
      >
        {{ placeholder }}
      </label>

      <!-- Background gradient effect -->
      <div
        class="absolute inset-0 rounded-xl bg-gradient-to-r from-primary-500/10 
               via-secondary-500/10 to-accent-500/10 opacity-0 
               group-hover:opacity-50 peer-focus:opacity-100 -z-10 
               transition-opacity duration-500"
      ></div>

      <!-- Error message -->
      <app-validation-message
        [id]="controlName + '-error'"
        [control]="form.get(controlName)"
        [field]="placeholder"
        [showImmediately]="true"
      >
      </app-validation-message>
    </div>
  `,
})
export class FormInputComponent {
  @Input() form!: FormGroup;
  @Input() controlName!: string;
  @Input() type: string = 'text';
  @Input() placeholder: string = '';
  @Input() maxLength?: string = '200';
  @Input() readonly?: boolean = false;
  @Output() valueChange = new EventEmitter<any>();

  get isInvalid(): boolean {
    const control = this.form.get(this.controlName);
    return !!(control?.invalid && (control?.touched || control?.dirty));
  }

  get inputClass(): string {
    const control = this.form.get(this.controlName);
    const isInvalid = control?.invalid && (control?.touched || control?.dirty);

    return `
      border-white/10
      ${
        isInvalid
          ? 'border-red-500 focus:border-red-500 focus:ring-red-500/20'
          : 'focus:border-primary-500/50 focus:ring-primary-500/20'
      }
    `;
  }

  get labelClass(): string {
    const control = this.form.get(this.controlName);
    const isInvalid = control?.invalid && (control?.touched || control?.dirty);

    return `
      text-gray-400
      ${isInvalid ? 'text-red-400' : 'peer-focus:text-primary-400'}
    `;
  }

  onInputChange(event: Event): void {
    const input = event.target as HTMLInputElement;
    this.valueChange.emit(input.value);

    // Mark as dirty to trigger validation immediately
    const control = this.form.get(this.controlName);
    if (control) {
      control.markAsDirty();
      control.updateValueAndValidity();
    }
  }

  onBlur(): void {
    // Mark as touched on blur to ensure validation shows
    const control = this.form.get(this.controlName);
    if (control) {
      control.markAsTouched();
      control.updateValueAndValidity();
    }
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\ui\operating-hours-input.component.ts
```

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\ui\otp-input.component.ts
```
import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef, ViewChildren, QueryList, ElementRef, AfterViewInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormGroup, ReactiveFormsModule } from '@angular/forms';
import { ValidationMessageComponent } from './validation-message.component';

@Component({
  selector: 'app-otp-input',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, ValidationMessageComponent],
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: `
    <div [formGroup]="form" class="relative group mb-10">
      <!-- Label -->
      <label
        [for]="controlName"
        class="block text-sm font-medium text-gray-400 mb-2"
      >
        {{ label }}
      </label>

      <!-- Hidden input for form control -->
      <input
        type="hidden"
        [formControlName]="controlName"
        [id]="controlName"
      />

      <!-- OTP Input Boxes -->
      <div class="flex justify-center space-x-2 sm:space-x-4">
        <ng-container *ngFor="let i of [0, 1, 2, 3, 4, 5]">
          <div class="relative">
            <input
              type="text"
              class="w-10 h-14 sm:w-12 sm:h-16 text-center text-xl sm:text-2xl font-bold bg-white/5 border border-white/10 rounded-lg text-white 
                     focus:border-primary-500/50 focus:ring-2 focus:ring-primary-500/20 focus:outline-none transition-all duration-300"
              [class.border-red-500]="isInvalid"
              maxlength="1"
              (input)="onDigitInput($event, i)"
              (keydown)="onKeyDown($event, i)"
              (focus)="onFocus(i)"
              (paste)="onPaste($event)"
              (blur)="onBlur()"
              #digitInput
            />
          </div>
        </ng-container>
      </div>

      <!-- Error message -->
      <div class="mt-4 text-center">
        <app-validation-message
          [id]="controlName + '-error'"
          [control]="form.get(controlName)"
          [field]="label"
          [showImmediately]="true">
        </app-validation-message>
      </div>

      <!-- Hint text -->
      <p *ngIf="hint && !isInvalid" class="mt-2 text-sm text-gray-400 text-center">
        {{ hint }}
      </p>
    </div>
  `,
  styles: [`
    /* Add animation for focus indicator */
    @keyframes pulse {
      0%, 100% { border-color: rgba(124, 58, 237, 0.3); }
      50% { border-color: rgba(124, 58, 237, 0.8); }
    }
    
    input:focus {
      animation: pulse 1.5s cubic-bezier(0.4, 0, 0.6, 1) infinite;
      border-color: rgba(124, 58, 237, 0.5);
    }
  `]
})
export class OtpInputComponent implements AfterViewInit {
  @Input() form!: FormGroup;
  @Input() controlName!: string;
  @Input() label: string = 'Κωδικός OTP';
  @Input() hint?: string;
  @Input() length: number = 6;
  @Output() completed = new EventEmitter<string>();
  
  @ViewChildren('digitInput') digitInputs!: QueryList<ElementRef>;
  
  private otpValue: string = '';

  constructor(private cdr: ChangeDetectorRef) {}

  ngOnInit() {
    // Initialize from existing value if present
    const currentValue = this.form.get(this.controlName)?.value || '';
    if (currentValue) {
      this.otpValue = currentValue;
      // We'll distribute the digits in afterViewInit
    }
  }

  ngAfterViewInit() {
    // Distribute existing value to input boxes
    if (this.otpValue) {
      const digits = this.otpValue.split('');
      const inputs = this.digitInputs.toArray();
      digits.forEach((digit, index) => {
        if (index < inputs.length) {
          inputs[index].nativeElement.value = digit;
        }
      });
    }
    
    // Focus the first empty input or the first input if all are filled
    setTimeout(() => this.focusInput(), 100);
  }

  get isInvalid(): boolean {
    const control = this.form.get(this.controlName);
    return !!(control?.invalid && (control?.touched || control?.dirty));
  }

  onDigitInput(event: Event, index: number): void {
    const input = event.target as HTMLInputElement;
    let value = input.value;
    
    // Allow only numbers
    if (value && !/^\d+$/.test(value)) {
      input.value = '';
      return;
    }
    
    // Take only the last character if multiple were somehow entered
    if (value.length > 1) {
      value = value.slice(-1);
      input.value = value;
    }
    
    // Update the OTP value
    this.updateOtpValue();
    
    // Auto-focus next input
    if (value && index < this.length - 1) {
      const inputs = this.digitInputs.toArray();
      if (inputs[index + 1]) {
        inputs[index + 1].nativeElement.focus();
      }
    }
    
    // Mark main control as touched
    this.form.get(this.controlName)?.markAsTouched();
  }

  onKeyDown(event: KeyboardEvent, index: number): void {
    const input = event.target as HTMLInputElement;
    const inputs = this.digitInputs.toArray();
    
    // Handle backspace
    if (event.key === 'Backspace') {
      if (input.value === '') {
        // Move to previous input if current is empty
        if (index > 0) {
          inputs[index - 1].nativeElement.focus();
          inputs[index - 1].nativeElement.value = '';
          this.updateOtpValue();
        }
      } else {
        // Clear current input
        input.value = '';
        this.updateOtpValue();
      }
    }
    
    // Handle arrow keys
    if (event.key === 'ArrowLeft' && index > 0) {
      inputs[index - 1].nativeElement.focus();
    }
    
    if (event.key === 'ArrowRight' && index < this.length - 1) {
      inputs[index + 1].nativeElement.focus();
    }
    
    // Handle paste event
    if ((event.metaKey || event.ctrlKey) && event.key === 'v') {
      // Let the paste event handler handle this
      return;
    }
    
    // Prevent non-numeric input
    if (
      !/^\d$/.test(event.key) && // Not a digit
      event.key !== 'Backspace' &&
      event.key !== 'Delete' &&
      event.key !== 'Tab' &&
      event.key !== 'ArrowLeft' &&
      event.key !== 'ArrowRight'
    ) {
      event.preventDefault();
    }
  }

  onFocus(index: number): void {
    // Select the content of the input when focused
    setTimeout(() => {
      const inputs = this.digitInputs.toArray();
      if (inputs[index]) {
        inputs[index].nativeElement.select();
      }
    }, 0);
  }

  onBlur(): void {
    // Mark as touched on blur
    this.form.get(this.controlName)?.markAsTouched();
    
    // Update OTP value
    this.updateOtpValue();
  }

  // Update the OTP value based on the input fields
  private updateOtpValue(): void {
    setTimeout(() => {
      const inputs = this.digitInputs.toArray();
      const value = inputs.map(input => input.nativeElement.value || '').join('');
      
      this.otpValue = value;
      this.form.get(this.controlName)?.setValue(value);
      
      // Emit completed event when all digits are filled
      if (value.length === this.length) {
        this.completed.emit(value);
      }
      
      this.cdr.markForCheck();
    }, 0);
  }

  // Handle paste event
  onPaste(event: ClipboardEvent): void {
    event.preventDefault();
    
    const clipboardData = event.clipboardData;
    if (!clipboardData) return;
    
    const pastedText = clipboardData.getData('text');
    const digits = pastedText.replace(/\D/g, '').substring(0, this.length);
    
    if (digits.length > 0) {
      const inputs = this.digitInputs.toArray();
      
      // Fill in as many inputs as we have digits
      digits.split('').forEach((digit, index) => {
        if (index < inputs.length) {
          inputs[index].nativeElement.value = digit;
        }
      });
      
      // Focus the next empty input or the last input if all are filled
      const focusIndex = Math.min(digits.length, this.length - 1);
      inputs[focusIndex].nativeElement.focus();
      
      // Update the OTP value
      this.updateOtpValue();
    }
  }

  // Focus the first input (can be called from parent)
  focusInput(): void {
    const inputs = this.digitInputs.toArray();
    if (inputs && inputs.length > 0) {
      // Find first empty input
      const emptyIndex = inputs.findIndex(input => !input.nativeElement.value);
      const focusIndex = emptyIndex >= 0 ? emptyIndex : 0;
      inputs[focusIndex].nativeElement.focus();
    }
  }
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\ui\pet-details-dialog\pet-details-dialog.component.html
```
<div *ngIf="isOpen" class="fixed inset-0 z-[9999] flex items-center justify-center p-4" (click)="onClose()">
  <!-- Backdrop with animation -->
  <div 
    class="absolute inset-0 bg-black/80 backdrop-blur-sm"
    [@backdropAnimation]>
  </div>

  <!-- Dialog Content with animation -->
  <div 
    [@dialogAnimation]
    class="relative bg-gradient-to-br from-gray-800 to-gray-900 rounded-3xl overflow-hidden shadow-2xl w-full max-w-2xl max-h-[80vh] overflow-y-auto"
    (click)="$event.stopPropagation()">
    
    <!-- Rest of the dialog content remains the same -->
    <div *ngIf="animal" class="relative">
      <!-- Image Gallery -->
      <div class="h-72 sm:h-96 relative overflow-hidden">
        <img
          [src]="currentImage"
          [alt]="animal.name"
          class="w-full h-full object-cover"
          (error)="onImageError($event)" />
        <!-- Gradient Overlay -->
        <div class="absolute inset-0 bg-gradient-to-t from-gray-900 via-gray-900/50 to-transparent"></div>
        
        <!-- Type Badge -->
        <div class="absolute top-4 left-4 px-3 py-1.5 bg-primary-500/90 backdrop-blur-sm rounded-full text-white text-sm font-medium shadow-lg">
          {{ animal.animalType?.name || 'Άγνωστο' }}
        </div>

        <!-- Close Button -->
        <button 
        (click)="onClose()"
          class="absolute top-4 right-4 p-2.5 bg-red-500/20 hover:bg-red-500/30 rounded-full transition-all duration-300 group shadow-lg flex items-center justify-center">
          <ng-icon 
            name="lucideX" 
            [size]="'24'" 
            class="text-red-400 transform transition-transform group-hover:scale-110">
          </ng-icon>
        </button>
        
        <!-- Image Navigation Controls -->
        <div class="absolute inset-x-0 bottom-4 flex justify-center items-center gap-2">
          <div class="flex justify-center gap-1.5 px-2 py-1 bg-black/40 backdrop-blur-sm rounded-full" *ngIf="animal.attachedPhotos && animal.attachedPhotos.length > 0">
            <div *ngFor="let photo of animal.attachedPhotos; let i = index"
                 [class.bg-white]="currentImageIndex === i"
                 [ngStyle]="{ 'background-color': currentImageIndex !== i ? 'rgba(255, 255, 255, 0.4)' : 'white' }"
                 class="w-2 h-2 rounded-full cursor-pointer transition-all"
                 (click)="changeImage(i)">
            </div>
          </div>
        </div>
      </div>

      <!-- Enhanced Info Content -->
      <div class="p-6 space-y-6">
        <!-- Header Section -->
        <div class="flex items-start justify-between">
          <div>
            <div class="flex items-center space-x-2 mb-1">
              <h2 class="text-2xl font-bold text-white">{{ animal.name }}</h2>
              <div 
                class="w-7 h-7 rounded-full flex items-center justify-center shadow-md" 
                [ngClass]="{'bg-blue-500/25': animal.gender === 1, 'bg-pink-500/25': animal.gender === 2}">
                <ng-icon 
                  [name]="animal.gender === 1 ? 'lucideMars' : 'lucideVenus'" 
                  [size]="'16'" 
                  [class]="animal.gender === 1 ? 'text-blue-400' : 'text-pink-400'">
                </ng-icon>
              </div>
            </div>
            <div class="flex flex-wrap items-center gap-x-2 gap-y-1">
              <span class="text-lg text-primary-400">{{ animal.age }} ετών</span>
              <span *ngIf="animal.weight" class="text-gray-400">•</span>
              <span *ngIf="animal.weight" class="text-gray-400">{{ animal.weight }} kg</span>
              <span *ngIf="animal.adoptionStatus" class="text-gray-400">•</span>
              <span *ngIf="animal.adoptionStatus" 
                    [ngClass]="{
                      'text-green-400': animal.adoptionStatus === 1,
                      'text-yellow-400': animal.adoptionStatus === 2,
                      'text-red-400': animal.adoptionStatus === 3
                    }">
                {{ getAdoptionStatusLabel(animal.adoptionStatus) }}
              </span>
            </div>
          </div>
        </div>

        <!-- Details Cards Grid -->
        <div class="grid grid-cols-2 gap-4">
          <div class="bg-white/5 hover:bg-white/8 rounded-2xl p-4 transition-colors shadow-sm">
            <div class="text-sm text-gray-400 mb-1">Είδος</div>
            <div class="text-white font-medium">{{ animal.animalType?.name || 'Μη διαθέσιμο' }}</div>
          </div>
          <div class="bg-white/5 hover:bg-white/8 rounded-2xl p-4 transition-colors shadow-sm">
            <div class="text-sm text-gray-400 mb-1">Φυλή</div>
            <div class="text-white font-medium">{{ animal.breed?.name || animal.breed || 'Μη διαθέσιμο' }}</div>
          </div>
          <div class="bg-white/5 hover:bg-white/8 rounded-2xl p-4 transition-colors shadow-sm">
            <div class="text-sm text-gray-400 mb-1">Φύλο</div>
            <div class="text-white font-medium">
              {{ animal.gender === 1 ? 'Αρσενικό' : animal.gender === 2 ? 'Θηλυκό' : animal.gender || 'Μη διαθέσιμο' }}
            </div>
          </div>
          <div class="bg-white/5 hover:bg-white/8 rounded-2xl p-4 transition-colors shadow-sm">
            <div class="text-sm text-gray-400 mb-1">Ηλικία</div>
            <div class="text-white font-medium">
              {{ animal.age || 'Μη διαθέσιμη' }} ετών
            </div>
          </div>
          <div class="bg-white/5 hover:bg-white/8 rounded-2xl p-4 transition-colors shadow-sm">
            <div class="text-sm text-gray-400 mb-1">Βάρος</div>
            <div class="text-white font-medium">
              {{ animal.weight ? (animal.weight + ' kg') : 'Μη διαθέσιμο' }}
            </div>
          </div>
          <div class="bg-white/5 hover:bg-white/8 rounded-2xl p-4 transition-colors shadow-sm">
            <div class="text-sm text-gray-400 mb-1">Όνομα Καταφυγίου</div>
            <div class="text-white font-medium">
              {{ animal.shelter?.shelterName || 'Μη διαθέσιμη' }}
            </div>
          </div>
          <div *ngIf="animal.shelter" class="bg-white/5 hover:bg-white/8 rounded-2xl p-4 col-span-2 transition-colors shadow-sm">
            <div class="text-sm text-gray-400 mb-1">Κατάσταση Υγείας</div>
            <div class="text-white font-medium">
              {{ animal.healthStatus || 'Μη διαθέσιμο' }}
            </div>
          </div>
          <div *ngIf="animal.createdAt" class="bg-white/5 hover:bg-white/8 rounded-2xl p-4 col-span-2 transition-colors shadow-sm">
            <div class="text-sm text-gray-400 mb-1">Καταχωρήθηκε</div>
            <div class="text-white font-medium">
              {{ animal.createdAt | date:'dd/MM/yyyy' }}
            </div>
          </div>
        </div>

        <!-- Description Section with Enhanced Visibility -->
        <div class="bg-white/5 hover:bg-white/8 rounded-2xl p-4 transition-colors shadow-sm">
          <h3 class="text-lg font-medium text-white mb-2">Περιγραφή</h3>
          <p class="text-white leading-relaxed">
            {{ animal.description || 'Δεν υπάρχει διαθέσιμη περιγραφή.' }}
          </p>
        </div>

        <!-- More Photos -->
        <div *ngIf="animal.attachedPhotos && animal.attachedPhotos.length > 1" class="space-y-3">
          <h3 class="text-lg font-medium text-white">Περισσότερες φωτογραφίες</h3>
          <div class="grid grid-cols-3 gap-2">
            <div *ngFor="let photo of animal.attachedPhotos; let i = index"
                 class="aspect-square rounded-xl overflow-hidden cursor-pointer relative group"
                 [class.ring-2]="currentImageIndex === i"
                 [class.ring-primary-500]="currentImageIndex === i"
                 (click)="changeImage(i)">
              <img [src]="photo" [alt]="'Photo ' + (i + 1)" class="w-full h-full object-cover" />
              <div class="absolute inset-0 bg-black/30 opacity-0 group-hover:opacity-100 transition-opacity"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\ui\pet-details-dialog\pet-details-dialog.component.scss
```
:host {
    display: block;
    position: relative;
    z-index: 10000;
  }

.action-button {
    padding: 0.75rem; /* Adjust as needed */
    border-radius: 9999px; /* Full circle */
    transition: all 0.3s ease;
  }
  .x-button {
    background-color: rgba(239, 68, 68, 0.15); /* red-500/15 */
    color: #f87171; /* text-red-400 */
    &:hover {
      background-color: rgba(239, 68, 68, 0.25); /* red-500/25 */
    }
  }
  .heart-button {
    background-color: rgba(34, 197, 94, 0.15); /* green-500/15 */
    color: #4ade80; /* text-green-400 */
    &:hover {
      background-color: rgba(34, 197, 94, 0.25); /* green-500/25 */
    }
  }
  .icon-center {
    display: block;
    margin: auto;
  }

  .animate-slideIn {
    animation: slideIn 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  @keyframes slideIn {
    from {
      opacity: 0;
      transform: scale(0.95) translateY(-10px);
    }
    to {
      opacity: 1;
      transform: scale(1) translateY(0);
    }
  }
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\ui\pet-details-dialog\pet-details-dialog.component.ts
```
import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef, OnChanges, SimpleChanges } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NgIconsModule } from '@ng-icons/core';
import { Animal } from 'src/app/models/animal/animal.model';
import { UtilsService } from '../../services/utils.service';
import { animate, style, transition, trigger } from '@angular/animations';

@Component({
  selector: 'app-pet-details-dialog',
  templateUrl: './pet-details-dialog.component.html',
  styleUrls: ['./pet-details-dialog.component.scss'],
  standalone: true,
  imports: [CommonModule, NgIconsModule],
  changeDetection: ChangeDetectionStrategy.OnPush,
  animations: [
    trigger('dialogAnimation', [
      transition(':enter', [
        style({ 
          opacity: 0,
          transform: 'scale(0.95) translateY(30px)'
        }),
        animate('400ms cubic-bezier(0.34, 1.56, 0.64, 1)', style({ 
          opacity: 1,
          transform: 'scale(1) translateY(0)'
        }))
      ]),
      transition(':leave', [
        animate('300ms cubic-bezier(0.4, 0, 0.2, 1)', style({ 
          opacity: 0,
          transform: 'scale(0.95) translateY(30px)'
        }))
      ])
    ]),
    trigger('backdropAnimation', [
      transition(':enter', [
        style({ opacity: 0 }),
        animate('200ms ease-out', style({ opacity: 1 }))
      ]),
      transition(':leave', [
        animate('150ms ease-in', style({ opacity: 0 }))
      ])
    ])
  ]
})
export class PetDetailsDialogComponent {
  @Input() animal!: Animal;
  @Input() isOpen = false;
  @Output() closeDialog = new EventEmitter<void>();

  currentImage: string = '';
  currentImageIndex: number = 0;

  constructor(
    private utilsService: UtilsService,
    private cdr: ChangeDetectorRef
  ) {}

  ngOnChanges(changes: SimpleChanges) {
    if (changes['isOpen']) {
      if (this.isOpen && this.animal) {
        // Dialog is opening - initialize
        this.currentImageIndex = 0;
        this.loadImage();
      } else if (!this.isOpen) {
        // Dialog is closing - reset all fields
        this.resetFields();
      }
    } else if (changes['animal'] && this.isOpen && this.animal) {
      // Animal changed while dialog is open
      this.currentImageIndex = 0;
      this.loadImage();
    }
  }

  async loadImage() {
    this.currentImage = await this.utilsService.tryLoadImages(this.animal);
    this.cdr.markForCheck();
  }

  onImageError(event: Event) {
    const img = event.target as HTMLImageElement;
    img.src = '/assets/placeholder.jpg';
  }

  onClose() {
    this.closeDialog.emit();
  }

  getAdoptionStatusLabel(status: number): string {
    switch (status) {
      case 1: return 'Διαθέσιμο';
      case 2: return 'Σε αναμονή';
      case 3: return 'Υιοθετημένο';
      default: return 'Άγνωστο';
    }
  }

  changeImage(index: number) {
    this.currentImageIndex = index;
    if (this.animal?.attachedPhotos?.length) {
      this.currentImage = this.animal.attachedPhotos[index].sourceUrl!;
    } else {
      this.currentImage = 'assets/placeholder.jpg';
    }
  }

  private resetFields(): void {
    this.currentImage = '';
    this.currentImageIndex = 0;
    this.cdr.markForCheck();
  }

}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\ui\phone-input.component.ts
```
import {
  Component,
  Input,
  OnInit,
  OnDestroy,
  ChangeDetectionStrategy,
  Output,
  EventEmitter,
  ChangeDetectorRef,
} from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormGroup, ReactiveFormsModule, FormsModule } from '@angular/forms';
import { COUNTRY_CODES, CountryCode } from './country-codes';
import { ValidationMessageComponent } from './validation-message.component';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { trigger, transition, style, animate } from '@angular/animations';

@Component({
  selector: 'app-phone-input',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    FormsModule,
    ValidationMessageComponent,
  ],
  changeDetection: ChangeDetectionStrategy.OnPush,
  animations: [
    trigger('dropdownAnimation', [
      transition(':enter', [
        style({ opacity: 0, transform: 'translateY(-10px)' }),
        animate(
          '200ms ease-out',
          style({ opacity: 1, transform: 'translateY(0)' })
        ),
      ]),
      transition(':leave', [
        animate(
          '150ms ease-in',
          style({ opacity: 0, transform: 'translateY(-10px)' })
        ),
      ]),
    ]),
  ],
  template: `
    <div [formGroup]="form" class="relative group mb-10">
      <div class="flex flex-col sm:flex-row gap-2">
        <!-- Country Code Dropdown -->
        <div class="relative w-full sm:w-44 country-dropdown">
          <button
            type="button"
            (click)="toggleDropdown()"
            class="w-full px-4 py-3 bg-white/5 border border-white/10 rounded-xl text-white
                   focus:border-primary-500/50 focus:ring-2 focus:ring-primary-500/20 focus:outline-none 
                   transition-all duration-300 flex items-center justify-between"
            [class.border-red-500]="isCountryCodeInvalid"
            [attr.aria-expanded]="isOpen"
            [attr.aria-controls]="'country-dropdown-' + countryCodeControl"
          >
            <div class="flex items-center space-x-2">
              <span class="text-xl">{{ selectedCountry?.flag }}</span>
              <span class="text-sm">{{ selectedCountry?.code }}</span>
            </div>
            <svg
              class="w-4 h-4 text-gray-400 transition-transform duration-300"
              [class.transform]="isOpen"
              [class.rotate-180]="isOpen"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              aria-hidden="true"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M19 9l-7 7-7-7"
              ></path>
            </svg>
          </button>

          <!-- Dropdown Menu -->
          <div
            *ngIf="isOpen"
            [id]="'country-dropdown-' + countryCodeControl"
            class="absolute z-50 w-full sm:w-72 mt-2 py-2 bg-gray-800 rounded-xl shadow-lg border border-white/10
                   max-h-[300px] overflow-y-auto custom-scrollbar"
            [@dropdownAnimation]
            role="listbox"
          >
            <!-- Search Input -->
            <div class="px-3 pb-2">
              <input
                type="text"
                [(ngModel)]="searchQuery"
                [ngModelOptions]="{ standalone: true }"
                placeholder="Αναζήτηση χωρών..."
                class="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white
                       placeholder-gray-500 focus:border-primary-500/50 focus:ring-2
                       focus:ring-primary-500/20 focus:outline-none text-sm"
                (input)="filterCountries()"
                aria-label="Αναζήτηση χωρών"
              />
            </div>

            <!-- Country List -->
            <div class="country-list">
              <button
                *ngFor="let country of filteredCountries; let i = index"
                type="button"
                (click)="selectCountry(country)"
                class="w-full px-4 py-2.5 text-left hover:bg-white/5 transition-colors
                       flex items-center space-x-3 group"
                role="option"
                [attr.aria-selected]="selectedCountry?.code === country.code"
                [attr.id]="'country-option-' + i"
              >
                <span
                  class="text-xl group-hover:scale-110 transition-transform"
                  >{{ country.flag }}</span
                >
                <div class="flex flex-col">
                  <span class="text-white text-sm">{{ country.name }}</span>
                  <span class="text-gray-400 text-xs">{{ country.code }}</span>
                </div>
              </button>
            </div>
          </div>
        </div>

        <!-- Phone Number Input -->
        <div class="flex-1">
          <input
            type="tel"
            [formControlName]="phoneNumberControl"
            [id]="phoneNumberControl"
            [class.border-red-500]="isPhoneNumberInvalid"
            class="w-full px-4 py-3 bg-white/5 border border-white/10 rounded-xl text-white 
                   placeholder-gray-500 focus:border-primary-500/50 focus:ring-2 
                   focus:ring-primary-500/20 focus:outline-none transition-all duration-300"
            placeholder="Αριθμός τηλεφώνου"
            (input)="onPhoneNumberInput($event)"
            (blur)="onPhoneBlur()"
            [readOnly]="readonly"
            [class.cursor-not-allowed]="readonly"
            [class.opacity-75]="readonly"
            [attr.aria-invalid]="isPhoneNumberInvalid"
            [attr.aria-describedby]="phoneNumberControl + '-error'"
          />
        </div>
      </div>

      <!-- Background gradient effect -->
      <div
        class="absolute inset-0 rounded-xl bg-gradient-to-r from-primary-500/10 
               via-secondary-500/10 to-accent-500/10 opacity-0 
               group-hover:opacity-50 peer-focus:opacity-100 -z-10 
               transition-opacity duration-500"
      ></div>

      <!-- Error messages -->
      <div class="mt-2 space-y-1">
        <app-validation-message
          [id]="countryCodeControl + '-error'"
          [control]="form.get(countryCodeControl)"
          field="Κωδικός χώρας"
          [showImmediately]="true"
        >
        </app-validation-message>
        <app-validation-message
          [id]="phoneNumberControl + '-error'"
          [control]="form.get(phoneNumberControl)"
          field="Αριθμός τηλεφώνου"
          [showImmediately]="true"
        >
        </app-validation-message>
      </div>
    </div>
  `,
  styles: [
    `
      .custom-scrollbar {
        scrollbar-width: thin;
        scrollbar-color: rgba(255, 255, 255, 0.2) rgba(255, 255, 255, 0.1);
      }

      .custom-scrollbar::-webkit-scrollbar {
        width: 6px;
      }

      .custom-scrollbar::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 3px;
      }

      .custom-scrollbar::-webkit-scrollbar-thumb {
        background: rgba(255, 255, 255, 0.2);
        border-radius: 3px;
      }

      .custom-scrollbar::-webkit-scrollbar-thumb:hover {
        background: rgba(255, 255, 255, 0.3);
      }

      .country-list {
        max-height: calc(300px - 50px);
        overflow-y: auto;
      }
    `,
  ],
})
export class PhoneInputComponent implements OnInit, OnDestroy {
  @Input() form!: FormGroup;
  @Input() countryCodeControl: string = 'countryCode';
  @Input() phoneNumberControl: string = 'phoneNumber';
  @Input() readonly?: boolean = false;
  @Output() phoneChange = new EventEmitter<string>();

  isOpen = false;
  searchQuery = '';
  countryCodes = COUNTRY_CODES;
  filteredCountries = this.countryCodes;
  selectedCountry: CountryCode | null = null;
  private destroy$ = new Subject<void>();

  get isCountryCodeInvalid(): boolean {
    const control = this.form.get(this.countryCodeControl);
    return !!(control?.invalid && (control?.touched || control?.dirty));
  }

  get isPhoneNumberInvalid(): boolean {
    const control = this.form.get(this.phoneNumberControl);
    return !!(control?.invalid && (control?.touched || control?.dirty));
  }

  constructor(private cdr: ChangeDetectorRef) {
    // Close dropdown when clicking outside
    document.addEventListener('click', (e: Event) => {
      const target = e.target as HTMLElement;
      if (!target.closest('.country-dropdown')) {
        this.isOpen = false;
        this.cdr.markForCheck();
      }
    });
  }

  ngOnInit() {
    // Initialize selected country
    const initialCode = this.form.get(this.countryCodeControl)?.value;
    if (initialCode) {
      this.selectedCountry =
        this.countryCodes.find((c) => c.code === initialCode) ||
        this.countryCodes[0];
    } else {
      // Default to Greece (+30)
      this.selectedCountry =
        this.countryCodes.find((c) => c.code === '+30') || this.countryCodes[0];
      this.form
        .get(this.countryCodeControl)
        ?.setValue(this.selectedCountry.code);
    }

    // Combine country code and phone number when either changes
    this.form
      .get(this.countryCodeControl)
      ?.valueChanges.pipe(takeUntil(this.destroy$))
      .subscribe(() => this.updateCombinedValue());

    this.form
      .get(this.phoneNumberControl)
      ?.valueChanges.pipe(takeUntil(this.destroy$))
      .subscribe(() => this.updateCombinedValue());
  }

  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }

  toggleDropdown() {
    this.isOpen = !this.isOpen;
    if (this.isOpen) {
      this.searchQuery = '';
      this.filteredCountries = this.countryCodes;
    }
    this.cdr.markForCheck();
  }

  filterCountries() {
    const query = this.searchQuery.toLowerCase();
    this.filteredCountries = this.countryCodes.filter(
      (country) =>
        country.name.toLowerCase().includes(query) ||
        country.code.includes(query)
    );
    this.cdr.markForCheck();
  }

  selectCountry(country: CountryCode) {
    this.selectedCountry = country;
    this.form.get(this.countryCodeControl)?.setValue(country.code);
    this.form.get(this.countryCodeControl)?.markAsDirty();
    this.form.get(this.countryCodeControl)?.updateValueAndValidity();
    this.isOpen = false;
    this.updateCombinedValue();
    this.cdr.markForCheck();
  }

  onPhoneNumberInput(event: Event) {
    const input = event.target as HTMLInputElement;
    input.value = input.value.replace(/\D/g, ''); // Remove non-numeric characters
    this.form
      .get(this.phoneNumberControl)
      ?.setValue(input.value, { emitEvent: true });

    // Mark as dirty to trigger validation immediately
    this.form.get(this.phoneNumberControl)?.markAsDirty();
    this.form.get(this.phoneNumberControl)?.updateValueAndValidity();
  }

  onPhoneBlur() {
    // Mark as touched on blur
    this.form.get(this.phoneNumberControl)?.markAsTouched();
    this.form.get(this.phoneNumberControl)?.updateValueAndValidity();
  }

  private updateCombinedValue() {
    const countryCode = this.form.get(this.countryCodeControl)?.value || '';
    const phoneNumber = this.form.get(this.phoneNumberControl)?.value || '';

    if (countryCode && phoneNumber) {
      const combinedValue = `${countryCode}${phoneNumber}`;
      this.form.get('phone')?.setValue(combinedValue);
      this.phoneChange.emit(combinedValue);
    }
  }
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\ui\text-area-input.component.ts
```
import {
  Component,
  Input,
  Output,
  EventEmitter,
  ChangeDetectionStrategy,
} from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormGroup, ReactiveFormsModule } from '@angular/forms';
import { ValidationMessageComponent } from './validation-message.component';

@Component({
  selector: 'app-text-area-input',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, ValidationMessageComponent],
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: `
    <div [formGroup]="form" class="relative group mb-10">
      <!-- Label -->
      <label
        [for]="controlName"
        class="block text-sm font-medium text-gray-400 mb-2"
      >
        {{ label }}
      </label>

      <!-- Textarea field -->
      <textarea
        [formControlName]="controlName"
        [id]="controlName"
        [attr.aria-invalid]="isInvalid"
        [attr.aria-describedby]="controlName + '-error'"
        [class]="inputClass"
        class="w-full px-4 py-3 bg-white/5 border border-white/10 rounded-xl text-white 
               placeholder-gray-500 focus:border-primary-500/50 focus:ring-2 
               focus:ring-primary-500/20 focus:outline-none transition-all duration-300"
        [placeholder]="placeholder"
        [rows]="rows"
        (input)="onInputChange($event)"
        (blur)="onBlur()"
      ></textarea>

      <!-- Background gradient effect -->
      <div
        class="absolute inset-0 rounded-xl bg-gradient-to-r from-primary-500/10 
               via-secondary-500/10 to-accent-500/10 opacity-0 
               group-hover:opacity-50 peer-focus:opacity-100 -z-10 
               transition-opacity duration-500"
      ></div>

      <!-- Error message -->
      <app-validation-message
        [id]="controlName + '-error'"
        [control]="form.get(controlName)"
        [field]="label"
        [showImmediately]="true"
      >
      </app-validation-message>

      <!-- Hint text -->
      <p *ngIf="hint && !isInvalid" class="mt-2 text-sm text-gray-400">
        {{ hint }}
      </p>
    </div>
  `,
})
export class TextAreaInputComponent {
  @Input() form!: FormGroup;
  @Input() controlName!: string;
  @Input() label: string = '';
  @Input() placeholder: string = '';
  @Input() hint?: string;
  @Input() rows: number = 3;
  @Output() valueChange = new EventEmitter<any>();

  get isInvalid(): boolean {
    const control = this.form.get(this.controlName);
    return !!(control?.invalid && (control?.touched || control?.dirty));
  }

  get inputClass(): string {
    const control = this.form.get(this.controlName);
    const isInvalid = control?.invalid && (control?.touched || control?.dirty);

    return `
      border-white/10
      ${
        isInvalid
          ? 'border-red-500 focus:border-red-500 focus:ring-red-500/20'
          : 'focus:border-primary-500/50 focus:ring-primary-500/20'
      }
    `;
  }

  onInputChange(event: Event): void {
    const textarea = event.target as HTMLTextAreaElement;
    this.valueChange.emit(textarea.value);

    // Mark as dirty to trigger validation immediately
    const control = this.form.get(this.controlName);
    if (control) {
      control.markAsDirty();
      control.updateValueAndValidity();
    }
  }

  onBlur(): void {
    // Mark as touched on blur to ensure validation shows
    const control = this.form.get(this.controlName);
    if (control) {
      control.markAsTouched();
      control.updateValueAndValidity();
    }
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\ui\time-input.component.ts
```
import {
  Component,
  Input,
  OnInit,
  Output,
  EventEmitter,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
} from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormGroup, ReactiveFormsModule, FormsModule } from '@angular/forms';
import { ValidationMessageComponent } from './validation-message.component';

@Component({
  selector: 'app-time-input',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    FormsModule,
    ValidationMessageComponent,
  ],
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: `
    <div [formGroup]="form" class="space-y-2 mb-8">
      <label
        [for]="controlName"
        class="block text-sm font-medium text-gray-400 capitalize mb-2"
      >
        {{ controlName }}
      </label>

      <!-- Closed toggle -->
      <div class="flex items-center mb-3">
        <label class="relative inline-flex items-center cursor-pointer">
          <input
            type="checkbox"
            [(ngModel)]="isClosed"
            [ngModelOptions]="{ standalone: true }"
            (change)="onClosedChange()"
            class="sr-only peer"
          />
          <div
            class="w-11 h-6 bg-gray-700 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-red-600"
          ></div>
        </label>
        <span class="ml-3 text-sm text-gray-300">{{
          isClosed ? 'Κλειστό' : 'Ανοιχτό'
        }}</span>
      </div>

      <!-- Time inputs (shown only when not closed) -->
      <div *ngIf="!isClosed" class="flex items-center space-x-4">
        <div class="flex-1">
          <input
            type="time"
            [id]="controlName + '-open'"
            [value]="openingTime"
            (change)="onTimeChange($event, 'open')"
            (blur)="onTimeBlur()"
            class="w-full px-4 py-3 bg-white/5 border border-white/10 rounded-xl text-white
                   placeholder-gray-500 focus:border-primary-500/50 focus:ring-2 
                   focus:ring-primary-500/20 focus:outline-none transition-all duration-300"
            [class.border-red-500]="isTimeInvalid"
            [attr.aria-label]="'Ώρα ανοίγματος για ' + controlName"
            [attr.aria-invalid]="isTimeInvalid"
            [attr.aria-describedby]="controlName + '-error'"
          />
          <div class="text-xs text-gray-500 mt-1">Ώρα ανοίγματος</div>
        </div>

        <span class="text-gray-400">έως</span>

        <div class="flex-1">
          <input
            type="time"
            [id]="controlName + '-close'"
            [value]="closingTime"
            (change)="onTimeChange($event, 'close')"
            (blur)="onTimeBlur()"
            class="w-full px-4 py-3 bg-white/5 border border-white/10 rounded-xl text-white
                   placeholder-gray-500 focus:border-primary-500/50 focus:ring-2 
                   focus:ring-primary-500/20 focus:outline-none transition-all duration-300"
            [class.border-red-500]="isTimeInvalid"
            [attr.aria-label]="'Ώρα κλεισίματος για ' + controlName"
            [attr.aria-invalid]="isTimeInvalid"
            [attr.aria-describedby]="controlName + '-error'"
          />
          <div class="text-xs text-gray-500 mt-1">Ώρα κλεισίματος</div>
        </div>
      </div>

      <!-- Error messages -->
      <app-validation-message
        [id]="controlName + '-error'"
        [control]="form.get(controlName)"
        field="Ώρες λειτουργίας"
        [showImmediately]="true"
      >
      </app-validation-message>
    </div>
  `,
})
export class TimeInputComponent implements OnInit {
  @Input() form!: FormGroup;
  @Input() controlName!: string;
  @Output() timeChange = new EventEmitter<string>();

  openingTime: string = '';
  closingTime: string = '';
  isClosed: boolean = false;
  isModified: boolean = false;

  constructor(private cdr: ChangeDetectorRef) {}

  get isTimeInvalid(): boolean {
    const control = this.form.get(this.controlName);
    return !!(control?.invalid && (control?.touched || control?.dirty));
  }

  ngOnInit() {
    const currentValue = this.form.get(this.controlName)?.value;
    if (currentValue) {
      if (currentValue === 'closed') {
        this.isClosed = true;
        this.isModified = true;
      } else if (currentValue.includes(',')) {
        const [open, close] = currentValue.split(',');
        this.openingTime = open || '';
        this.closingTime = close || '';
        this.isModified = true;
      }
    }
  }

  onClosedChange(): void {
    this.isModified = true;
    
    if (this.isClosed) {
      // Set value to 'closed'
      this.form.get(this.controlName)?.setValue('closed');
      this.form.get(this.controlName)?.setErrors(null);
    } else {
      // Restore previous time values or set to empty
      if (!this.openingTime && !this.closingTime) {
        this.form.get(this.controlName)?.setValue('');
        this.form.get(this.controlName)?.setErrors(null);
      } else {
        // Use existing times if available
        const timeValue = `${this.openingTime},${this.closingTime}`;
        this.form.get(this.controlName)?.setValue(timeValue);
        
        // Validate time range
        this.validateTimeRange();
      }
    }

    // Mark as dirty to trigger validation immediately
    this.form.get(this.controlName)?.markAsDirty();
    this.form.get(this.controlName)?.updateValueAndValidity();

    // Emit the change
    this.timeChange.emit(this.form.get(this.controlName)?.value);
  }

  onTimeChange(event: Event, type: 'open' | 'close'): void {
    const input = event.target as HTMLInputElement;
    this.isModified = true;

    if (type === 'open') {
      this.openingTime = input.value;
    } else {
      this.closingTime = input.value;
    }

    // Validate time range
    this.validateTimeRange();

    // Mark as dirty to trigger validation immediately
    this.form.get(this.controlName)?.markAsDirty();
    this.form.get(this.controlName)?.updateValueAndValidity();

    // Update form control value
    const timeValue = `${this.openingTime},${this.closingTime}`;
    this.form.get(this.controlName)?.setValue(timeValue);
    this.timeChange.emit(timeValue);
  }

  onTimeBlur(): void {
    // Mark as touched on blur
    this.form.get(this.controlName)?.markAsTouched();
    this.form.get(this.controlName)?.updateValueAndValidity();
  }

  private validateTimeRange(): void {
    if (this.openingTime && this.closingTime) {
      if (this.openingTime >= this.closingTime) {
        this.form.get(this.controlName)?.setErrors({ invalidTimeRange: true });
      } else {
        this.form.get(this.controlName)?.setErrors(null);
      }
    } else if ((this.openingTime && !this.closingTime) || (!this.openingTime && this.closingTime)) {
      // If only one time is provided, it's incomplete
      this.form.get(this.controlName)?.setErrors({ incomplete: true });
    } else if (!this.isModified) {
      // If no times are provided and component hasn't been modified, it's valid
      this.form.get(this.controlName)?.setErrors(null);
    }
  }
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\ui\time-picker.component.ts
```
import { Component, Input, Output, EventEmitter, OnInit, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormControl, ReactiveFormsModule, FormsModule } from '@angular/forms';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { NgxMaterialTimepickerModule } from 'ngx-material-timepicker';
import { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';

export interface OperatingHours {
  day: string;
  openTime: string;
  closeTime: string;
}

@Component({
  selector: 'app-time-picker',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    FormsModule,
    MatFormFieldModule,
    MatInputModule,
    NgxMaterialTimepickerModule
  ],
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: `
    <div class="mb-6 border border-gray-700/50 rounded-xl p-4 hover:border-gray-600/70 transition-colors">
      <div class="flex justify-between items-center mb-4">
        <h4 class="text-white font-medium">{{ day }}</h4>
        
        <!-- Closed toggle -->
        <div class="flex items-center">
          <label class="relative inline-flex items-center cursor-pointer">
            <input
              type="checkbox"
              [(ngModel)]="isClosed"
              (change)="onClosedChange()"
              class="sr-only peer"
            />
            <div
              class="w-11 h-6 bg-gray-700 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-red-600"
            ></div>
          </label>
          <span class="ml-3 text-sm text-gray-300">{{ isClosed ? 'Κλειστό' : 'Ανοιχτό' }}</span>
        </div>
      </div>
      
      <!-- Time inputs (shown only when not closed) -->
      <div *ngIf="!isClosed" class="time-picker-container" [class.mobile]="isMobile">
        <div class="flex-1">
          <mat-form-field appearance="outline" class="w-full">
            <mat-label>Ώρα ανοίγματος</mat-label>
            <input matInput
                  [formControl]="openTimeControl"
                  [ngxTimepicker]="openPicker"
                  readonly
                  placeholder="Επιλέξτε ώρα"
                  [attr.aria-label]="'Ώρα ανοίγματος για ' + day">
            <ngx-material-timepicker #openPicker
                                    [format]="24"
                                    (timeSet)="onTimeChange()">
            </ngx-material-timepicker>
          </mat-form-field>
        </div>

        <span class="mx-4 text-gray-400 self-center" *ngIf="!isMobile">έως</span>

        <div class="flex-1">
          <mat-form-field appearance="outline" class="w-full">
            <mat-label>Ώρα κλεισίματος</mat-label>
            <input matInput
                  [formControl]="closeTimeControl"
                  [ngxTimepicker]="closePicker"
                  readonly
                  placeholder="Επιλέξτε ώρα"
                  [attr.aria-label]="'Ώρα κλεισίματος για ' + day">
            <ngx-material-timepicker #closePicker
                                    [format]="24"
                                    (timeSet)="onTimeChange()">
            </ngx-material-timepicker>
          </mat-form-field>
        </div>
      </div>

      <div *ngIf="error" class="text-red-400 text-sm mt-1" role="alert">
        {{ error }}
      </div>
    </div>
  `,
  styles: [`
    .time-picker-container {
      display: flex;
      align-items: flex-start;
      gap: 1rem;
    }

    .time-picker-container.mobile {
      flex-direction: column;
    }

    :host ::ng-deep .mat-form-field-appearance-outline .mat-form-field-outline {
      background-color: rgba(255, 255, 255, 0.05);
    }

    :host ::ng-deep .mat-form-field-appearance-outline .mat-form-field-outline-thick {
      color: rgba(255, 255, 255, 0.1);
    }

    :host ::ng-deep .mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick {
      color: var(--color-primary);
    }

    :host ::ng-deep .mat-form-field-label {
      color: rgba(255, 255, 255, 0.7);
    }

    :host ::ng-deep .mat-input-element {
      color: white;
    }
  `]
})
export class TimePickerComponent implements OnInit, OnDestroy {
  @Input() day!: string;
  @Input() initialOpenTime?: string;
  @Input() initialCloseTime?: string;

  @Output() timeChange = new EventEmitter<OperatingHours>();

  openTimeControl = new FormControl('');
  closeTimeControl = new FormControl('');
  error: string | null = null;
  isMobile = false;
  isClosed = false;

  private destroy$ = new Subject<void>();

  constructor(private breakpointObserver: BreakpointObserver) {}

  ngOnInit() {
    this.initializeTimeControls();
    this.setupBreakpointObserver();
  }

  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }

  private initializeTimeControls() {
    if (this.initialOpenTime === 'closed') {
      this.isClosed = true;
    } else {
      if (this.initialOpenTime) {
        this.openTimeControl.setValue(this.initialOpenTime);
      } else {
        this.openTimeControl.setValue('09:00');
      }
      
      if (this.initialCloseTime) {
        this.closeTimeControl.setValue(this.initialCloseTime);
      } else {
        this.closeTimeControl.setValue('17:00');
      }
      
      // Emit initial value if both times are set
      if (this.openTimeControl.value && this.closeTimeControl.value) {
        this.onTimeChange();
      }
    }
  }

  private setupBreakpointObserver() {
    this.breakpointObserver
      .observe([Breakpoints.HandsetPortrait])
      .pipe(takeUntil(this.destroy$))
      .subscribe(result => {
        this.isMobile = result.matches;
      });
  }

  onClosedChange() {
    if (this.isClosed) {
      this.timeChange.emit({
        day: this.day,
        openTime: 'closed',
        closeTime: 'closed'
      });
    } else {
      // Restore previous time values or defaults
      const openTime = this.openTimeControl.value || '09:00';
      const closeTime = this.closeTimeControl.value || '17:00';
      
      this.timeChange.emit({
        day: this.day,
        openTime,
        closeTime
      });
    }
  }

  onTimeChange() {
    if (this.isClosed) return;
    
    const openTime = this.openTimeControl.value;
    const closeTime = this.closeTimeControl.value;

    if (openTime && closeTime) {
      if (this.isValidTimeRange(openTime, closeTime)) {
        this.error = null;
        this.timeChange.emit({
          day: this.day,
          openTime,
          closeTime
        });
      } else {
        this.error = 'Η ώρα κλεισίματος πρέπει να είναι μετά την ώρα ανοίγματος';
      }
    }
  }

  private isValidTimeRange(openTime: string, closeTime: string): boolean {
    const [openHour, openMinute] = openTime.split(':').map(Number);
    const [closeHour, closeMinute] = closeTime.split(':').map(Number);

    if (closeHour > openHour) {
      return true;
    }
    if (closeHour === openHour) {
      return closeMinute > openMinute;
    }
    return false;
  }
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\common\ui\validation-message.component.ts
```
import { Component, Input, ChangeDetectionStrategy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { AbstractControl } from '@angular/forms';

@Component({
  selector: 'app-validation-message',
  standalone: true,
  imports: [CommonModule],
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: `
    <div
      *ngIf="shouldShowErrors()"
      [id]="id"
      role="alert"
      class="absolute -bottom-6 left-0 text-sm text-red-400 transition-all duration-300"
    >
      <!-- Required field -->
      <div *ngIf="control?.errors?.['required']">{{ field }} απαιτείται</div>

      <!-- Email validation -->
      <div *ngIf="control?.errors?.['email']">
        Παρακαλώ εισάγετε έναν έγκυρο email (π.χ., user&#64;domain.com)
      </div>

      <!-- Min length -->
      <div *ngIf="control?.errors?.['minlength']">
        {{ field }} πρέπει να έχει τουλάχιστον
        {{ control?.errors?.['minlength']?.requiredLength }} χαρακτήρες
      </div>

      <!-- Max length -->
      <div *ngIf="control?.errors?.['maxlength']">
        {{ field }} δεν μπορεί να υπερβαίνει τους
        {{ control?.errors?.['maxlength']?.requiredLength }} χαρακτήρες
      </div>

      <!-- Pattern validation -->
      <div *ngIf="control?.errors?.['pattern']">
        <ng-container [ngSwitch]="field.toLowerCase()">
          <!-- Phone number -->
          <ng-container *ngSwitchCase="'αριθμός τηλεφώνου'">
            Παρακαλώ εισάγετε έναν έγκυρο αριθμό τηλεφώνου (μόνο αριθμοί)
          </ng-container>

          <!-- ZIP code -->
          <ng-container *ngSwitchCase="'ταχυδρομικός κώδικας'">
            Παρακαλώ εισάγετε έναν έγκυρο ταχυδρομικό κώδικα (π.χ., 12345)
          </ng-container>

          <!-- Operating hours -->
          <ng-container *ngSwitchCase="'ώρες λειτουργίας'">
            Παρακαλώ εισάγετε έγκυρες ώρες λειτουργίας σε μορφή 24ώρου (π.χ.,
            09:00,17:00)
          </ng-container>

          <!-- Default pattern message -->
          <ng-container *ngSwitchDefault>
            Μη έγκυρη μορφή για {{ field }}
          </ng-container>
        </ng-container>
      </div>

      <!-- Password validation -->
      <div *ngIf="control?.errors?.['uppercase']">
        Ο κωδικός πρέπει να περιέχει τουλάχιστον ένα κεφαλαίο γράμμα
      </div>
      <div *ngIf="control?.errors?.['lowercase']">
        Ο κωδικός πρέπει να περιέχει τουλάχιστον ένα πεζό γράμμα
      </div>
      <div *ngIf="control?.errors?.['number']">
        Ο κωδικός πρέπει να περιέχει τουλάχιστον έναν αριθμό
      </div>
      <div *ngIf="control?.errors?.['specialChar']">
        Ο κωδικός πρέπει να περιέχει τουλάχιστον έναν ειδικό χαρακτήρα
      </div>

      <!-- Password match validation -->
      <div *ngIf="control?.errors?.['mismatch']">Οι κωδικοί δεν ταιριάζουν</div>

      <!-- Social media validation -->
      <div *ngIf="control?.errors?.['invalidSocialMedia']">
        Παρακαλώ εισάγετε έγκυρο link {{ field }}
      </div>

      <!-- Operating hours validation -->
      <div *ngIf="control?.errors?.['invalidTimeRange']">
        Η ώρα κλεισίματος πρέπει να είναι μετά την ώρα ανοίγματος
      </div>

      <!-- Role validation -->
      <div *ngIf="control?.errors?.['invalidRole']">
        Ο ρόλος του χρήστη δεν είναι έγκυρος
      </div>

      <!-- Custom error message -->
      <div *ngIf="control?.errors?.['custom']">
        {{ control?.errors?.['custom'] }}
      </div>
    </div>
  `,
})
export class ValidationMessageComponent {
  @Input() control?: AbstractControl | null;
  @Input() field: string = 'Αυτό το πεδίο';
  @Input() customError?: string;
  @Input() id?: string;
  @Input() showImmediately: boolean = false;

  shouldShowErrors(): boolean {
    if (!this.control) return false;

    // Show errors immediately when control is invalid and dirty
    if (this.showImmediately && this.control.invalid && this.control.dirty) {
      return true;
    }

    // Traditional approach - show when touched
    return this.control.invalid && (this.control.touched || this.control.dirty);
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\lookup\adoption-application-lookup.ts
```
import { ApplicationStatus } from '../models/adoption-application/adoption-application.model';
import { Lookup } from './lookup';

export interface AdoptionApplicationLookup extends Lookup {
  ids?: string[];
  userIds?: string[];
  animalIds?: string[];
  shelterIds?: string[];
  status?: ApplicationStatus[]; // e.g. Available, Pending, Rejected
  createdFrom?: Date;
  createdTill?: Date;
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\lookup\animal-lookup.ts
```
import { AdoptionStatus } from '../models/animal/animal.model';
import { Lookup } from './lookup';

export interface AnimalLookup extends Lookup {
  ids?: string[];
  shelterIds?: string[];
  breedIds?: string[];
  typeIds?: string[];
  adoptionStatuses?: AdoptionStatus[];
  createFrom?: Date;
  createdTill?: Date;
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\lookup\animal-type-lookup.ts
```
import { Lookup } from './lookup';

export interface AnimalTypeLookup extends Lookup {
  ids?: string[];
  name?: string;
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\lookup\breed-lookup.ts
```
import { Lookup } from './lookup';

export interface BreedLookup extends Lookup {
  ids?: string[];
  typeIds?: string[];
  createdFrom?: Date;
  createdTill?: Date;
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\lookup\conversation-lookup.ts
```
import { Lookup } from './lookup';

export interface ConversationLookup extends Lookup {
  ids?: string[];
  userIds?: string[];
  animalIds?: string[];
  createFrom?: Date;
  createdTill?: Date;
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\lookup\file.lookup.ts
```
export interface FileLookup {
  ids?: string[];
  excludedIds?: string[];
  ownerIds?: string[];
  fileSaveStatuses?: FileSaveStatus[];
  createdFrom?: Date;
  createdTill?: Date;
  pageSize?: number;
  offset?: number;
  sortDescending?: boolean;
  sortBy?: string;
  fields?: string[];
  query?: string;
}

export enum FileSaveStatus {
  Temporary = 1,
  Permanent = 2,
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\lookup\lookup.ts
```
export interface Lookup {
  offset: number;
  pageSize: number;
  query?: string;
  excludedIds?: string[];
  fields: string[];
  sortBy: string[];
  sortDescending?: boolean;
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\lookup\message-lookup.ts
```
import { Lookup } from './lookup';

export interface MessageLookup extends Lookup {
  ids?: string[];
  conversationIds?: string[];
  senderIds?: string[];
  recipientIds?: string[];
  createFrom?: Date;
  createdTill?: Date;
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\lookup\notification-lookup.ts
```
import { NotificationType } from '../models/notification/notification.model';
import { Lookup } from './lookup';

export interface NotificationLookup extends Lookup {
  ids?: string[];
  userIds?: string[];
  notificationTypes?: NotificationType[]; // e.g. IncomingMessage, AdoptionApplication, Report
  createFrom?: Date;
  createdTill?: Date;
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\lookup\report-lookup.ts
```
import { ReportStatus, ReportType } from '../models/report/report.model';
import { Lookup } from './lookup';

export interface ReportLookup extends Lookup {
  ids?: string[];
  reporterIds?: string[];
  reportedIds?: string[];
  reportTypes?: ReportType[];
  reportStatus?: ReportStatus[];
  createFrom?: Date;
  createdTill?: Date;
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\lookup\shelter-lookup.ts
```
import { VerificationStatus } from '../common/enum/verification-status';
import { Lookup } from './lookup';

export interface ShelterLookup extends Lookup {
  ids?: string[];
  userIds?: string[];
  verificationStatuses?: VerificationStatus[];
  verifiedBy?: string[];
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\lookup\user-lookup.ts
```
import { UserRole } from '../common/enum/user-role.enum';
import { Lookup } from './lookup';

export interface UserLookup extends Lookup {
  ids?: string[];
  fullNames?: string[];
  roles?: UserRole[];
  cities?: string[];
  zipcodes?: string[];
  createdFrom?: Date;
  createdTill?: Date;
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\models\adoption-application\adoption-application.model.ts
```
import { Animal } from '../animal/animal.model';
import { Shelter } from '../shelter/shelter.model';
import { User } from '../user/user.model';
import { File } from '../file/file.model';

// AdoptionApplication Models
export interface AdoptionApplication {
  id?: string;
  user?: User;
  animal?: Animal;
  shelter?: Shelter;
  status?: ApplicationStatus;
  applicationDetails?: string;
  attachedFiles?: File[];
  createdAt?: Date;
  updatedAt?: Date;
}

export interface AdoptionApplicationPersist {
  id: string;
  userId: string;
  animalId: string;
  shelterId: string;
  status: ApplicationStatus;
  applicationDetails: string;
  attachedFilesIds: string[];
}

// Enums
export enum ApplicationStatus {
  Available = 1,
  Pending = 2,
  Rejected = 3,
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\models\animal\animal.model.ts
```
import { Gender } from 'src/app/common/enum/gender';
import { AnimalType } from '../animal-type/animal-type.model';
import { Shelter } from '../shelter/shelter.model';
import { Breed } from '../breed/breed.model';
import { File } from '../file/file.model';

// Animal Models
export interface Animal {
  id?: string;
  name?: string;
  age?: number;
  gender?: Gender;
  description?: string;
  weight?: number;
  healthStatus?: string;
  shelter?: Shelter;
  breed?: Breed;
  animalType?: AnimalType;
  attachedPhotos?: File[];
  adoptionStatus?: AdoptionStatus;
  createdAt?: Date;
  updatedAt?: Date;
}

export interface AnimalPersist {
  id: string;
  name: string;
  age: number;
  gender: Gender;
  description: string;
  weight: number;
  healthStatus: string;
  shelterId: string;
  breedId: string;
  animalTypeId: string;
  attachedPhotosIds: string[];
  adoptionStatus: AdoptionStatus;
}

// Enum
export enum AdoptionStatus {
  Available = 1,
  Pending = 2,
  Adopted = 3,
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\models\animal-type\animal-type.model.ts
```
// AnimalType Models
export interface AnimalType {
  id?: string;
  name?: string;
  description?: string;
  createdAt?: Date;
  updatedAt?: Date;
}

export interface AnimalTypePersist {
  id: string;
  name: string;
  description: string;
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\models\auth\auth.model.ts
```
import { UserRole } from 'src/app/common/enum/user-role.enum';
import { ShelterPersist } from '../shelter/shelter.model';
import { UserPersist } from '../user/user.model';
import { AuthProvider } from 'src/app/common/enum/auth-provider.enum';

export interface EmailPayload {
  id?: string;
  email: string;
  token?: string;
}

export interface OtpPayload {
  id?: string;
  email?: string;
  phone: string;
  otp?: number;
}

export interface LoggedAccount {
  token: string;
  phone: string;
  roles: string[];
  permissions: string[];
  isPhoneVerified: boolean;
  isEmailVerified: boolean;
  isVerified: boolean;
  loggedAt: Date;
}

export interface LoginPayload {
  email?: string;
  password?: string;
  providerAccessCode?: string;
  loginProvider: AuthProvider;
}

export interface RegisterPayload {
  user: UserPersist;
  shelter?: ShelterPersist;
}

export interface ResetPasswordPayload {
  id?: string;
  email?: string;
  token?: string;
  newPassword?: string;
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\models\breed\breed.model.ts
```
import { AnimalType } from '../animal-type/animal-type.model';

// Breed Models
export interface Breed {
  id?: string;
  name?: string;
  animalType?: AnimalType;
  description?: string;
  createdAt?: Date;
  updatedAt?: Date;
}

export interface BreedPersist {
  id: string;
  name: string;
  typeId: string;
  description: string;
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\models\conversation\conversation.model.ts
```
import { Animal } from '../animal/animal.model';
import { User } from '../user/user.model';

// Conversation Models
export interface Conversation {
  id?: string;
  users?: User[];
  animal?: Animal;
  createdAt?: Date;
  updatedAt?: Date;
}

export interface ConversationPersist {
  id: string;
  userIds: string[];
  animalId: string;
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\models\file\file.model.ts
```
import { User } from "../user/user.model";

export interface File {
    id?: string;
    fileName?: string;
    mimeType?: string;
    fileType?: string;
    owner?: User;
    size?: number;
    sourceUrl?: string;
    createdAt?: Date;
    updatedAt?: Date;
}

export interface FilePersist {
    id: string;
    fileName: string;
    mimeType: string;
    fileType: string;
    ownerId: string;
    size: number;
    awsKey: string;
    sourceUrl: string;
}

export interface FileItem {
  file: globalThis.File;
  addedAt: number;
  persistedId?: string;
  isPersisting: boolean;
  uploadFailed: boolean;
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\models\message\message.model.ts
```
import { Conversation } from '../conversation/conversation.model';
import { User } from '../user/user.model';

// Message Models
export interface Message {
  id?: string;
  conversation?: Conversation;
  sender?: User;
  recipient?: User;
  content?: string;
  isRead?: boolean;
  createdAt?: Date;
}

export interface MessagePersist {
  id: string;
  conversationId: string;
  senderId: string;
  recipientId: string;
  content: string;
  isRead: boolean;
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\models\notification\notification.model.ts
```
import { User } from '../user/user.model';

// Notification Models
export interface Notification {
  id?: string;
  user?: User;
  type?: NotificationType;
  content?: string;
  isRead?: boolean;
  createdAt?: Date;
}

export interface NotificationPersist {
  id: string;
  userId: string;
  type: NotificationType;
  content: string;
  isRead: boolean;
}

// Enum
export enum NotificationType {
  IncomingMessage = 1,
  AdoptionApplication = 2,
  Report = 3,
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\models\report\report.model.ts
```
import { User } from '../user/user.model';

// Report Models
export interface Report {
  id?: string;
  reporter?: User;
  reported?: User;
  type?: ReportType;
  reason?: string;
  status?: ReportStatus;
  createdAt?: Date;
  updatedAt?: Date;
}

export interface ReportPersist {
  id: string;
  reporterId: string;
  reportedId: string;
  type: ReportType;
  reason: string;
  status: ReportStatus;
}

// Enums
export enum ReportType {
  InappropriateMessage = 1,
  Other = 2,
}

export enum ReportStatus {
  Pending = 1,
  Resolved = 2,
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\models\shelter\shelter.model.ts
```
import { VerificationStatus } from 'src/app/common/enum/verification-status';
import { Animal } from '../animal/animal.model';
import { User } from '../user/user.model';

// Shelter Models
export interface Shelter {
  id?: string;
  user?: User;
  shelterName?: string;
  description?: string;
  website?: string;
  socialMedia?: SocialMedia;
  operatingHoours?: OperatingHours;
  verificationStatus?: VerificationStatus;
  verifiedBy?: string;
  animals?: Animal[];
}

export interface ShelterPersist {
  id: string;
  userId: string;
  shelterName: string;
  description: string;
  website: string;
  socialMedia: SocialMedia;
  operatingHours: OperatingHours;
  verificationStatus: VerificationStatus;
  verifiedBy?: string;
}

export interface OperatingHours {
  monday: string;
  tuesday: string;
  wednesday: string;
  thursday: string;
  friday: string;
  saturday: string;
  sunday: string;
}

export interface SocialMedia {
  facebook?: string;
  instagram?: string;
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\models\user\user.model.ts
```
import { Shelter } from '../shelter/shelter.model';
import { File } from '../file/file.model';
import { AuthProvider } from 'src/app/common/enum/auth-provider.enum';
import { UserRole } from 'src/app/common/enum/user-role.enum';

export interface User {
  id?: string;
  email?: string;
  fullName?: string;
  roles?: UserRole[];
  phone?: string;
  location?: Location;
  shelter?: Shelter;
  authProvider?: AuthProvider;
  authProviderId?: string;
  profilePhoto?: File;
  isVerified?: boolean;
  hasPhoneVerified?: boolean;
  hasEmailVerified?: boolean;
  createdAt?: Date;
  updatedAt?: Date;
}

export interface UserPersist {
  id: string;
  email: string;
  password: string;
  fullName: string;
  role: UserRole;
  phone: string;
  location: Location;
  authProvider: AuthProvider;
  authProviderId?: string;
  profilePhotoId?: string;
  hasPhoneVerified: boolean;
  hasEmailVerified: boolean;
}

// Shared Models
export interface Location {
  city?: string;
  zipCode?: string;
  address?: string;
  number?: string;
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\services\adoption-application.service.ts
```
import { Injectable } from '@angular/core';
import { BaseHttpService } from '../common/services/base-http.service';
import { AdoptionApplicationLookup } from '../lookup/adoption-application-lookup';
import {
  AdoptionApplication,
  AdoptionApplicationPersist,
} from '../models/adoption-application/adoption-application.model';
import { catchError, Observable, throwError } from 'rxjs';
import { InstallationConfigurationService } from '../common/services/installation-configuration.service';

@Injectable({
  providedIn: 'root',
})
export class AdoptionApplicationService {
  constructor(
    private installationConfiguration: InstallationConfigurationService,
    private http: BaseHttpService
  ) {}

  private get apiBase(): string {
    return `${this.installationConfiguration.appServiceAddress}api/adoption-applications`;
  }

  query(q: AdoptionApplicationLookup): Observable<AdoptionApplication[]> {
    const url = `${this.apiBase}/query`;
    return this.http
      .post<AdoptionApplication[]>(url, q)
      .pipe(catchError((error: any) => throwError(error)));
  }

  getSingle(
    id: string,
    reqFields: string[] = []
  ): Observable<AdoptionApplication> {
    const url = `${this.apiBase}/${id}`;
    const options = { params: { f: reqFields } };

    return this.http
      .get<AdoptionApplication>(url, options)
      .pipe(catchError((error: any) => throwError(error)));
  }

  persist(item: AdoptionApplicationPersist): Observable<AdoptionApplication> {
    const url = `${this.apiBase}/persist`;
    return this.http
      .post<AdoptionApplication>(url, item)
      .pipe(catchError((error: any) => throwError(error)));
  }

  delete(id: string): Observable<void> {
    const url = `${this.apiBase}/delete`;
    return this.http
      .post<void>(url, { id })
      .pipe(catchError((error: any) => throwError(error)));
  }

  deleteMany(ids: string[]): Observable<void> {
    const url = `${this.apiBase}/delete/many`;
    return this.http
      .post<void>(url, ids)
      .pipe(catchError((error: any) => throwError(error)));
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\services\animal-type.service.ts
```
import { Injectable } from '@angular/core';
import { BaseHttpService } from '../common/services/base-http.service';
import { InstallationConfigurationService } from '../common/services/installation-configuration.service';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { AnimalTypeLookup } from '../lookup/animal-type-lookup';
import {
  AnimalType,
  AnimalTypePersist,
} from '../models/animal-type/animal-type.model';

@Injectable({
  providedIn: 'root',
})
export class AnimalTypeService {
  constructor(
    private installationConfiguration: InstallationConfigurationService,
    private http: BaseHttpService
  ) {}

  private get apiBase(): string {
    return `${this.installationConfiguration.appServiceAddress}api/animal-types`;
  }

  query(q: AnimalTypeLookup): Observable<AnimalType[]> {
    const url = `${this.apiBase}/query`;
    return this.http
      .post<AnimalType[]>(url, q)
      .pipe(catchError((error: any) => throwError(error)));
  }

  getSingle(id: string, reqFields: string[] = []): Observable<AnimalType> {
    const url = `${this.apiBase}/${id}`;
    const options = { params: { f: reqFields } };
    return this.http
      .get<AnimalType>(url, options)
      .pipe(catchError((error: any) => throwError(error)));
  }

  persist(item: AnimalTypePersist): Observable<AnimalType> {
    const url = `${this.apiBase}/persist`;
    return this.http
      .post<AnimalType>(url, item)
      .pipe(catchError((error: any) => throwError(error)));
  }

  delete(id: string): Observable<void> {
    const url = `${this.apiBase}/delete`;
    return this.http
      .post<void>(url, { id })
      .pipe(catchError((error: any) => throwError(error)));
  }

  deleteMany(ids: string[]): Observable<void> {
    const url = `${this.apiBase}/delete/many`;
    return this.http
      .post<void>(url, ids)
      .pipe(catchError((error: any) => throwError(error)));
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\services\animal.service.ts
```
import { Injectable } from '@angular/core';
import { BaseHttpService } from '../common/services/base-http.service';
import { InstallationConfigurationService } from '../common/services/installation-configuration.service';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { AnimalLookup } from '../lookup/animal-lookup';
import { Animal, AnimalPersist } from '../models/animal/animal.model';

@Injectable({
  providedIn: 'root',
})
export class AnimalService {
  constructor(
    private installationConfiguration: InstallationConfigurationService,
    private http: BaseHttpService
  ) {}

  private get apiBase(): string {
    return `${this.installationConfiguration.appServiceAddress}api/animals`;
  }

  query(q: AnimalLookup): Observable<Animal[]> {
    const url = `${this.apiBase}/query`;
    return this.http
      .post<Animal[]>(url, q)
      .pipe(catchError((error: any) => throwError(error)));
  }

  queryFreeView(q: AnimalLookup): Observable<Animal[]> {
    const url = `${this.apiBase}/query/free-view`;
    return this.http
      .post<Animal[]>(url, q)
      .pipe(catchError((error: any) => throwError(error)));
  }

  getSingle(id: string, reqFields: string[] = []): Observable<Animal> {
    const url = `${this.apiBase}/${id}`;
    const options = { params: { f: reqFields } };
    return this.http
      .get<Animal>(url, options)
      .pipe(catchError((error: any) => throwError(error)));
  }

  persist(item: AnimalPersist): Observable<Animal> {
    const url = `${this.apiBase}/persist`;
    return this.http
      .post<Animal>(url, item)
      .pipe(catchError((error: any) => throwError(error)));
  }
  delete(id: string): Observable<void> {
    const url = `${this.apiBase}/delete`;
    return this.http
      .post<void>(url, { id })
      .pipe(catchError((error: any) => throwError(error)));
  }

  deleteMany(ids: string[]): Observable<void> {
    const url = `${this.apiBase}/delete/many`;
    return this.http
      .post<void>(url, ids)
      .pipe(catchError((error: any) => throwError(error)));
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\services\auth.service.ts
```
import { Injectable } from '@angular/core';
import { BaseHttpService } from '../common/services/base-http.service';
import { InstallationConfigurationService } from '../common/services/installation-configuration.service';
import { BehaviorSubject, Observable, throwError } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';
import { User } from '../models/user/user.model';
import {
  LoggedAccount,
  LoginPayload,
  RegisterPayload,
  OtpPayload,
} from '../models/auth/auth.model';
import { jwtDecode } from 'jwt-decode';
import { JwtPayload } from '../common/models/jwt.model';

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private _loggedAccount: LoggedAccount | null = null;
  private readonly authStateSubject = new BehaviorSubject<boolean>(false);
  public authState$ = this.authStateSubject.asObservable();

  constructor(
    private readonly installationConfiguration: InstallationConfigurationService,
    private readonly http: BaseHttpService
  ) {
    // Initialize auth state on service creation
    this.authStateSubject.next(!!this.getToken());
  }

  private get apiBase(): string {
    return `${this.installationConfiguration.appServiceAddress}auth`;
  }

  // Authentication functions
  login(email: string, password: string): Observable<LoggedAccount> {
    const url = `${this.apiBase}/login`;
    const payload: LoginPayload = { email, password, loginProvider: 1 };

    return this.http.post<LoggedAccount>(url, payload).pipe(
      tap((response: LoggedAccount) => {
        if (response.isVerified) {
          this.setLoggedAccount(response);
        }
      }),
      catchError((error: any) => throwError(error))
    );
  }

  loginWithGoogle(code: string): Observable<LoggedAccount> {
    const url = `${this.apiBase}/login`;
    const payload: LoginPayload = {
      email: '',
      password: '',
      loginProvider: 2,
      providerAccessCode: code,
    };

    return this.http.post<LoggedAccount>(url, payload).pipe(
      tap((response: LoggedAccount) => {
        // Only set logged account if email is verified
        if (response.isVerified) {
          this.setLoggedAccount(response);
        }
      }),
      catchError((error: any) => throwError(error))
    );
  }

  logout(): Observable<void> {
    const url = `${this.apiBase}/logout`;
    return this.http.post<void>(url, {}).pipe(
      tap(() => {
        this.clearLoggedAccount();
      }),
      catchError((error: any) => throwError(error))
    );
  }

  register(registerData: RegisterPayload): Observable<User> {
    const url = `${this.apiBase}/register/unverified`;
    return this.http
      .post<User>(url, registerData)
      .pipe(catchError((error: any) => throwError(error)));
  }

  registerWithGoogle(authCode: string): Observable<User> {
    const url = `${this.apiBase}/register/unverified/google`;
    return this.http
      .post<User>(url, { providerAccessCode: authCode })
      .pipe(catchError((error: any) => throwError(error)));
  }

  sendOtp(otpPayload: OtpPayload): Observable<void> {
    const url = `${this.apiBase}/send/otp`;
    return this.http
      .post<void>(url, otpPayload)
      .pipe(catchError((error: any) => throwError(error)));
  }

  verifyOtp(otpPayload: OtpPayload): Observable<void> {
    const url = `${this.apiBase}/verify-otp`;
    return this.http
      .post<void>(url, otpPayload)
      .pipe(catchError((error: any) => throwError(error)));
  }

  sendVerificationEmail(email: string): Observable<void> {
    const url = `${this.apiBase}/send/email-verification`;
    return this.http
      .post<void>(url, { email })
      .pipe(catchError((error: any) => throwError(error)));
  }

  verifyEmail(token: string): Observable<User> {
    const url = `${this.apiBase}/verify-email`;
    return this.http
      .post<User>(url, { token })
      .pipe(catchError((error: any) => throwError(error)));
  }

  requestPasswordReset(email: string): Observable<void> {
    const url = `${this.apiBase}/send/reset-password`;
    return this.http
      .post<void>(url, { email })
      .pipe(catchError((error: any) => throwError(error)));
  }

  verifyResetPasswordToken(token: string): Observable<User> {
    const url = `${this.apiBase}/verify-reset-password-token`;
    return this.http
      .post<User>(url, { token })
      .pipe(catchError((error: any) => throwError(error)));
  }

  resetPassword(email: string, password: string): Observable<void> {
    const url = `${this.apiBase}/reset-password`;
    return this.http
      .post<void>(url, { email, password })
      .pipe(catchError((error: any) => throwError(error)));
  }

  verifyUser(userId: string): Observable<void> {
    const url = `${this.apiBase}/verify-user`;
    return this.http
      .post<void>(url, { id: userId })
      .pipe(catchError((error: any) => throwError(error)));
  }

  // Token and Authentication Status Helpers

  isLoggedIn(): Observable<boolean> {
    return this.authState$;
  }

  getUserId(): string | null {
    const token = this.getToken();
    if (!token) return null;

    try {
      const decoded: JwtPayload = jwtDecode<JwtPayload>(token);
      return decoded.nameid;
    } catch (error) {
      console.error('Error decoding JWT token:', error);
      return null;
    }
  }

  getUserEmail(): string | null {
    const token = this.getToken();
    if (!token) return null;

    try {
      const decoded: JwtPayload = jwtDecode<JwtPayload>(token);
      return decoded.email;
    } catch (error) {
      console.error('Error decoding JWT token:', error);
      return null;
    }
  }

  hasPermission(permission: string): boolean {
    const account = this.loadLoggedAccount();
    if (!account) return false;

    const permissions = account.permissions || [];
    return permissions.includes(permission);
  }

  hasAnyPermission(permissions: string[]): boolean {
    const account = this.loadLoggedAccount();
    if (!account) return false;
    const userPermissions = account.permissions || [];
    return permissions.some((permission) => userPermissions.includes(permission));
  }

  getUserRoles(): string[] | null {
    const account = this.loadLoggedAccount();
    return account ? account.roles : null;
  }

  private setLoggedAccount(account: LoggedAccount): void {
    this._loggedAccount = account;
    sessionStorage.setItem('loggedAccount', JSON.stringify(account));
    this.authStateSubject.next(true);
  }

  private clearLoggedAccount(): void {
    this._loggedAccount = null;
    sessionStorage.removeItem('loggedAccount');
    this.authStateSubject.next(false);
  }

  private loadLoggedAccount(): LoggedAccount | null {
    if (!this._loggedAccount) {
      const stored = sessionStorage.getItem('loggedAccount');
      if (stored) {
        this._loggedAccount = JSON.parse(stored) as LoggedAccount;
      }
    }
    return this._loggedAccount;
  }

  getToken(): string | null {
    const account = this.loadLoggedAccount();
    return account ? account.token : null;
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\services\breed.service.ts
```
import { Injectable } from '@angular/core';
import { BaseHttpService } from '../common/services/base-http.service';
import { InstallationConfigurationService } from '../common/services/installation-configuration.service';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { BreedLookup } from '../lookup/breed-lookup';
import { Breed, BreedPersist } from '../models/breed/breed.model';

@Injectable({
  providedIn: 'root',
})
export class BreedService {
  constructor(
    private installationConfiguration: InstallationConfigurationService,
    private http: BaseHttpService
  ) {}

  private get apiBase(): string {
    return `${this.installationConfiguration.appServiceAddress}api/breeds`;
  }

  query(q: BreedLookup): Observable<Breed[]> {
    const url = `${this.apiBase}/query`;
    return this.http
      .post<Breed[]>(url, q)
      .pipe(catchError((error: any) => throwError(error)));
  }

  getSingle(id: string, reqFields: string[] = []): Observable<Breed> {
    const url = `${this.apiBase}/${id}`;
    const options = { params: { f: reqFields } };
    return this.http
      .get<Breed>(url, options)
      .pipe(catchError((error: any) => throwError(error)));
  }

  persist(item: BreedPersist): Observable<Breed> {
    const url = `${this.apiBase}/persist`;
    return this.http
      .post<Breed>(url, item)
      .pipe(catchError((error: any) => throwError(error)));
  }

  delete(id: string): Observable<void> {
    const url = `${this.apiBase}/delete`;
    return this.http
      .post<void>(url, { id })
      .pipe(catchError((error: any) => throwError(error)));
  }

  deleteMany(ids: string[]): Observable<void> {
    const url = `${this.apiBase}/delete/many`;
    return this.http
      .post<void>(url, ids)
      .pipe(catchError((error: any) => throwError(error)));
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\services\conversation.service.ts
```

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\services\file.service.ts
```
import { Injectable } from "@angular/core";
import { Observable, catchError, throwError } from "rxjs";
import { BaseHttpService } from "../common/services/base-http.service";
import { InstallationConfigurationService } from "../common/services/installation-configuration.service";
import { FilePersist } from "../models/file/file.model";
import { FileLookup } from "../lookup/file.lookup";

@Injectable({
  providedIn: 'root',
})
export class FileService {
  constructor(
    private installationConfiguration: InstallationConfigurationService,
    private http: BaseHttpService
  ) {}

  private get apiBase(): string {
    return `${this.installationConfiguration.appServiceAddress}api/files`;
  }

  persistBatchTemporary(models: FormData): Observable<FilePersist[]> {
    const url = `${this.apiBase}/persist/temporary/many`;
    return this.http
      .post<FilePersist[]>(url, models)
      .pipe(catchError((error: any) => throwError(error)));
  }

  persistBatch(models: FilePersist[], fields: string[] = ["*"]): Observable<File[]> {
    const url = `${this.apiBase}/persist`;
    const options = { params: { fields } };
    return this.http
      .post<File[]>(url, models, options)
      .pipe(catchError((error: any) => throwError(error)));
  }

  query(q: FileLookup): Observable<File[]> {
    const url = `${this.apiBase}/query`;
    return this.http
      .post<File[]>(url, q)
      .pipe(catchError((error: any) => throwError(error)));
  }

  getSingle(id: string, fields: string[] = []): Observable<File> {
    const url = `${this.apiBase}/${id}`;
    const options = { params: { fields } };
    return this.http
      .get<File>(url, options)
      .pipe(catchError((error: any) => throwError(error)));
  }

  delete(id: string): Observable<void> {
    const url = `${this.apiBase}/delete`;
    return this.http
      .post<void>(url, { id })
      .pipe(catchError((error: any) => throwError(error)));
  }

  deleteMany(ids: string[]): Observable<void> {
    const url = `${this.apiBase}/delete/many`;
    return this.http
      .post<void>(url, ids)
      .pipe(catchError((error: any) => throwError(error)));
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\services\google-auth.service.ts
```
import { Injectable } from '@angular/core';
import { InstallationConfigurationService } from '../common/services/installation-configuration.service';
import { Router } from '@angular/router';

export interface GoogleOAuthConfig {
  clientId: string;
  redirectUri: string;
  scope: string;
  baseGoogleEndpoint: string;
}

@Injectable({
  providedIn: 'root',
})
export class GoogleAuthService {
  private readonly defaultScope = 'email profile';
  private readonly signupScope =
    'email profile https://www.googleapis.com/auth/user.addresses.read https://www.googleapis.com/auth/user.phonenumbers.read';

  constructor(
    private readonly installationConfig: InstallationConfigurationService,
    private readonly router: Router
  ) {}

  getAuthUrl(isSignup: boolean = false, state: string = ''): string {
    const config = this.getOAuthConfig(isSignup);
    const params = new URLSearchParams({
      client_id: config.clientId,
      redirect_uri: config.redirectUri,
      response_type: 'code',
      scope: config.scope,
      state: state || this.generateState(isSignup),
      prompt: 'consent',
      access_type: 'offline',
    });

    return `${config.baseGoogleEndpoint}?${params.toString()}`;
  }

  private getOAuthConfig(isSignup: boolean): GoogleOAuthConfig {
    const clientId = this.installationConfig.googleClientId;
    if (!clientId) {
      throw new Error('Google Client ID not configured');
    }

    const redirectUri = this.installationConfig.redirectUri;
    const baseGoogleEndpoint = this.installationConfig.baseGoogleEndpoint;

    if (!redirectUri || !baseGoogleEndpoint) {
      throw new Error('Google OAuth configuration is incomplete');
    }

    return {
      clientId,
      redirectUri,
      scope: isSignup ? this.signupScope : this.defaultScope,
      baseGoogleEndpoint,
    };
  }

  private generateState(isSignup: boolean): string {
    const stateObj = {
      timestamp: Date.now(),
      isSignup,
      origin: window.location.pathname,
    };
    return btoa(JSON.stringify(stateObj));
  }

  handleAuthCallback(params: URLSearchParams): void {
    const code = params.get('code');
    const state = params.get('state');
    const error = params.get('error');

    if (error) {
      console.error('Google OAuth error:', error);
      this.router.navigate(['/auth/login']);
      return;
    }

    if (!code || !state) {
      console.error('Invalid OAuth callback');
      this.router.navigate(['/auth/login']);
      return;
    }

    try {
      const decodedState = JSON.parse(atob(state));

      const origin: string | null = decodedState.origin as string;
      // Store the auth code temporarily
      sessionStorage.setItem('googleAuthCode', code);

      // Redirect back to the original page
      this.router.navigate(
        [origin.includes('sign-up') ? '/auth/sign-up' : '/auth/login'],
        {
          queryParams: { mode: 'google' },
        }
      );
    } catch (e) {
      console.error('Invalid state parameter:', e);
      this.router.navigate(['/auth/login']);
    }
  }

  // Add methods for initiating login and signup
  initiateLogin(): void {
    const authUrl = this.getAuthUrl(false);
    window.location.href = authUrl;
  }

  initiateSignup(): void {
    const authUrl = this.getAuthUrl(true);
    window.location.href = authUrl;
  }

  // Helper method to check if we have a pending Google auth code
  hasPendingAuth(): boolean {
    return !!sessionStorage.getItem('googleAuthCode');
  }

  // Get and clear the pending auth code
  getPendingAuthCode(): string | null {
    const code = sessionStorage.getItem('googleAuthCode');
    if (code) {
      sessionStorage.removeItem('googleAuthCode');
    }
    return code;
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\services\message.service.ts
```

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\services\notification.service.ts
```
import { Injectable } from '@angular/core';
import { BaseHttpService } from '../common/services/base-http.service';
import { InstallationConfigurationService } from '../common/services/installation-configuration.service';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { NotificationLookup } from '../lookup/notification-lookup';
import {
  Notification,
  NotificationPersist,
} from '../models/notification/notification.model';

@Injectable({
  providedIn: 'root',
})
export class NotificationService {
  constructor(
    private installationConfiguration: InstallationConfigurationService,
    private http: BaseHttpService
  ) {}

  private get apiBase(): string {
    return `${this.installationConfiguration.appServiceAddress}api/notifications`;
  }

  query(q: NotificationLookup): Observable<Notification[]> {
    const url = `${this.apiBase}/query`;
    return this.http
      .post<Notification[]>(url, q)
      .pipe(catchError((error: any) => throwError(error)));
  }

  getSingle(id: string, reqFields: string[] = []): Observable<Notification> {
    const url = `${this.apiBase}/${id}`;
    const options = { params: { f: reqFields } };
    return this.http
      .get<Notification>(url, options)
      .pipe(catchError((error: any) => throwError(error)));
  }

  persist(item: NotificationPersist): Observable<Notification> {
    const url = `${this.apiBase}/persist`;
    return this.http
      .post<Notification>(url, item)
      .pipe(catchError((error: any) => throwError(error)));
  }

  delete(id: string): Observable<void> {
    const url = `${this.apiBase}/delete`;
    return this.http
      .post<void>(url, { id })
      .pipe(catchError((error: any) => throwError(error)));
  }

  deleteMany(ids: string[]): Observable<void> {
    const url = `${this.apiBase}/delete/many`;
    return this.http
      .post<void>(url, ids)
      .pipe(catchError((error: any) => throwError(error)));
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\services\report.service.ts
```
import { Injectable } from '@angular/core';
import { BaseHttpService } from '../common/services/base-http.service';
import { InstallationConfigurationService } from '../common/services/installation-configuration.service';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { ReportLookup } from '../lookup/report-lookup';
import { Report, ReportPersist } from '../models/report/report.model';

@Injectable({
  providedIn: 'root',
})
export class ReportService {
  constructor(
    private installationConfiguration: InstallationConfigurationService,
    private http: BaseHttpService
  ) {}

  private get apiBase(): string {
    return `${this.installationConfiguration.appServiceAddress}api/reports`;
  }

  query(q: ReportLookup): Observable<Report[]> {
    const url = `${this.apiBase}/query`;
    return this.http
      .post<Report[]>(url, q)
      .pipe(catchError((error: any) => throwError(error)));
  }

  getSingle(id: string, reqFields: string[] = []): Observable<Report> {
    const url = `${this.apiBase}/${id}`;
    const options = { params: { f: reqFields } };
    return this.http
      .get<Report>(url, options)
      .pipe(catchError((error: any) => throwError(error)));
  }

  persist(item: ReportPersist): Observable<Report> {
    const url = `${this.apiBase}/persist`;
    return this.http
      .post<Report>(url, item)
      .pipe(catchError((error: any) => throwError(error)));
  }

  delete(id: string): Observable<void> {
    const url = `${this.apiBase}/delete`;
    return this.http
      .post<void>(url, { id })
      .pipe(catchError((error: any) => throwError(error)));
  }

  deleteMany(ids: string[]): Observable<void> {
    const url = `${this.apiBase}/delete/many`;
    return this.http
      .post<void>(url, ids)
      .pipe(catchError((error: any) => throwError(error)));
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\services\shelter.service.ts
```
import { Injectable } from '@angular/core';
import { BaseHttpService } from '../common/services/base-http.service';
import { InstallationConfigurationService } from '../common/services/installation-configuration.service';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { ShelterLookup } from '../lookup/shelter-lookup';
import { Shelter, ShelterPersist } from '../models/shelter/shelter.model';

@Injectable({
  providedIn: 'root',
})
export class ShelterService {
  constructor(
    private installationConfiguration: InstallationConfigurationService,
    private http: BaseHttpService
  ) {}

  private get apiBase(): string {
    return `${this.installationConfiguration.appServiceAddress}api/shelters`;
  }

  query(q: ShelterLookup): Observable<Shelter[]> {
    const url = `${this.apiBase}/query`;
    return this.http
      .post<Shelter[]>(url, q)
      .pipe(catchError((error: any) => throwError(error)));
  }

  getSingle(id: string, reqFields: string[] = []): Observable<Shelter> {
    const url = `${this.apiBase}/${id}`;
    const options = { params: { f: reqFields } };
    return this.http
      .get<Shelter>(url, options)
      .pipe(catchError((error: any) => throwError(error)));
  }

  persist(item: ShelterPersist): Observable<Shelter> {
    const url = `${this.apiBase}/persist`;
    return this.http
      .post<Shelter>(url, item)
      .pipe(catchError((error: any) => throwError(error)));
  }

  delete(id: string): Observable<void> {
    const url = `${this.apiBase}/delete`;
    return this.http
      .post<void>(url, { id })
      .pipe(catchError((error: any) => throwError(error)));
  }

  deleteMany(ids: string[]): Observable<void> {
    const url = `${this.apiBase}/delete/many`;
    return this.http
      .post<void>(url, ids)
      .pipe(catchError((error: any) => throwError(error)));
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\services\user.service.ts
```
import { Injectable } from '@angular/core';
import { BaseHttpService } from '../common/services/base-http.service';
import { InstallationConfigurationService } from '../common/services/installation-configuration.service';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { UserLookup } from '../lookup/user-lookup';
import { User, UserPersist } from '../models/user/user.model';
import { AuthProvider } from '../common/enum/auth-provider.enum';

@Injectable({
  providedIn: 'root',
})
export class UserService {
  constructor(
    private installationConfiguration: InstallationConfigurationService,
    private http: BaseHttpService
  ) {}

  private get apiBase(): string {
    return `${this.installationConfiguration.appServiceAddress}api/users`;
  }

  query(q: UserLookup): Observable<User[]> {
    const url = `${this.apiBase}/query`;
    return this.http
      .post<User[]>(url, q)
      .pipe(catchError((error: any) => throwError(error)));
  }

  getSingle(id: string, reqFields: string[] = []): Observable<User> {
    const url = `${this.apiBase}/${id}`;
    const options = { params: { fields: reqFields } };
    return this.http
      .get<User>(url, options)
      .pipe(catchError((error: any) => throwError(error)));
  }

  persist(item: UserPersist): Observable<User> {
    const url = `${this.apiBase}/persist`;
    return this.http
      .post<User>(url, item)
      .pipe(catchError((error: any) => throwError(error)));
  }

  getCurrentUser(): Observable<User> {
    const url = `${this.apiBase}/current`;
    return this.http
      .get<User>(url)
      .pipe(catchError((error: any) => throwError(error)));
  }

  isExternalProvider(user: User): boolean {
    return user.authProvider !== AuthProvider.Local;
  }

  delete(id: string): Observable<void> {
    const url = `${this.apiBase}/delete`;
    return this.http
      .post<void>(url, { id })
      .pipe(catchError((error: any) => throwError(error)));
  }

  deleteMany(ids: string[]): Observable<void> {
    const url = `${this.apiBase}/delete/many`;
    return this.http
      .post<void>(url, ids)
      .pipe(catchError((error: any) => throwError(error)));
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\auth\auth.module.ts
```
import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { NgIconsModule } from '@ng-icons/core';
import {
  lucideInfo,
  lucideMapPin,
  lucideMenu,
  lucideX,
  lucideHeart,
  lucideUser,
  lucideSearch,
  lucideMessageCircle,
  lucideHouse,
  lucidePhone,
  lucideMail,
  lucideLogOut,
  lucideClock,
  lucideUpload,
  lucideFile,
  lucideCheck,
  lucideTriangle,
} from '@ng-icons/lucide';

// Auth components
import { LoginComponent } from './login.component';
import { SignupComponent } from './signup.component';
import { ResetPasswordRequestComponent } from './reset-password/reset-password-request.component';
import { ResetPasswordComponent } from './reset-password/reset-password.component';
import { NotFoundComponent } from '../not-found/not-found.component';
import { GoogleCallbackComponent } from './google-callback.component';

// Shared components (standalone)
import { FormInputComponent } from 'src/app/common/ui/form-input.component';
import { TextAreaInputComponent } from 'src/app/common/ui/text-area-input.component';
import { AuthButtonComponent } from './shared/auth-button/auth-button.component';
import { OtpInputComponent } from 'src/app/common/ui/otp-input.component';
import { GoogleLoginButtonComponent } from './shared/google-login-button/google-login-button.component';
import { ValidationMessageComponent } from './shared/validation-message/validation-message.component';

// Signup step components
import { PersonalInfoComponent } from './sign-up-steps/personal-info/personal-info.component';
import { AccountDetailsComponent } from './sign-up-steps/account-details/account-details.component';
import { PreferencesComponent } from './sign-up-steps/preferences/preferences.component';
import { VerifiedComponent } from './sign-up-steps/verified.component';
import { ShelterInfoComponent } from './sign-up-steps/shelter-info/shelter-info.component';
import { ErrorMessageBannerComponent } from 'src/app/common/ui/error-message-banner.component';

@NgModule({
  declarations: [LoginComponent, SignupComponent, VerifiedComponent],
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    RouterModule.forChild([
      { path: 'login', component: LoginComponent },
      { path: 'sign-up', component: SignupComponent },
      { path: 'verified', component: VerifiedComponent },
      { path: 'google/callback', component: GoogleCallbackComponent },
      {
        path: 'reset-password-request',
        component: ResetPasswordRequestComponent,
      },
      { path: 'reset-password', component: ResetPasswordComponent },
      { path: '**', component: NotFoundComponent },
    ]),
    FormInputComponent,
    TextAreaInputComponent,
    AuthButtonComponent,
    OtpInputComponent,
    GoogleLoginButtonComponent,
    ValidationMessageComponent,
    PersonalInfoComponent,
    AccountDetailsComponent,
    PreferencesComponent,
    ShelterInfoComponent,
    ErrorMessageBannerComponent,
    NgIconsModule.withIcons({
      lucideHeart,
      lucideSearch,
      lucideMessageCircle,
      lucidePhone,
      lucideMail,
      lucideMenu,
      lucideUser,
      lucideX,
      lucideHouse,
      lucideInfo,
      lucideLogOut,
      lucideClock,
      lucideUpload,
      lucideFile,
      lucideCheck,
      lucideTriangle,
    }),
  ],
  exports: [LoginComponent, SignupComponent, VerifiedComponent],
  schemas: [CUSTOM_ELEMENTS_SCHEMA],
})
export class AuthModule {}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\auth\google-callback.component.ts
```
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { GoogleAuthService } from '../../../services/google-auth.service';
import { CommonModule } from '@angular/common';
import { NgIconsModule } from '@ng-icons/core';

@Component({
  selector: 'app-google-callback',
  standalone: true,
  imports: [CommonModule, NgIconsModule],
  template: `
    <div class="min-h-screen flex items-center justify-center bg-gray-900">
      <!-- Background elements -->
      <div class="fixed inset-0 z-0">
        <div
          class="absolute inset-0 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900"
        ></div>
        <div
          class="absolute inset-0 bg-gradient-to-br from-primary-900/20 via-secondary-900/20 to-accent-900/20 animate-gradient"
        ></div>
        <div
          class="absolute inset-0 bg-gradient-radial from-transparent via-primary-900/10 to-transparent"
        ></div>
      </div>

      <!-- Content -->
      <div class="relative z-10 max-w-md w-full mx-4">
        <div
          class="bg-white/5 backdrop-blur-lg rounded-2xl shadow-xl p-8 space-y-6 border border-white/10 text-center"
        >
          <!-- Loading State -->
          <div *ngIf="!error" class="space-y-4">
            <div
              class="w-16 h-16 mx-auto border-4 border-primary-500 border-t-transparent rounded-full animate-spin"
            ></div>
            <p class="text-gray-400">Επεξεργασία σύνδεσης Google...</p>
          </div>

          <!-- Error State -->
          <div *ngIf="error" class="space-y-6">
            <div
              class="w-16 h-16 mx-auto bg-red-500/20 rounded-full flex items-center justify-center"
            >
              <ng-icon
                name="lucideX"
                class="text-red-500"
                [size]="'32'"
              ></ng-icon>
            </div>

            <div>
              <h2 class="text-2xl font-bold text-white mb-2">
                Σφάλμα Σύνδεσης
              </h2>
              <p class="text-red-400">{{ error }}</p>
            </div>

            <div class="pt-4">
              <button
                (click)="returnToPrevious()"
                class="w-full px-4 py-3 bg-gradient-to-r from-primary-600 to-accent-600 text-white rounded-xl hover:shadow-lg hover:shadow-primary-500/20 transition-all duration-300 transform hover:-translate-y-1"
              >
                Επιστροφή στη Σύνδεση
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  `,
})
export class GoogleCallbackComponent implements OnInit {
  error: string | null = null;

  constructor(
    private readonly route: ActivatedRoute,
    private readonly router: Router,
    private readonly googleAuthService: GoogleAuthService
  ) {}

  ngOnInit() {
    const queryParams = new URLSearchParams(window.location.search);

    // Check for error parameter from Google
    const errorCode = queryParams.get('error');
    if (errorCode) {
      this.handleError(errorCode);
      return;
    }

    // Check for required parameters
    const code = queryParams.get('code');
    const state = queryParams.get('state');

    if (!code || !state) {
      this.error = 'Μη έγκυρη απάντηση από το Google. Παρακαλώ δοκιμάστε ξανά.';
      return;
    }

    try {
      // Attempt to decode state
      const decodedState = JSON.parse(atob(state));

      // Store the auth code temporarily
      sessionStorage.setItem('googleAuthCode', code);

      // Store original path for potential return
      if (decodedState.origin) {
        sessionStorage.setItem('googleAuthOrigin', decodedState.origin);
      }

      // Handle the callback
      this.googleAuthService.handleAuthCallback(queryParams);
    } catch (e) {
      console.error('Error processing callback:', e);
      this.error =
        'Σφάλμα κατά την επεξεργασία της απάντησης. Παρακαλώ δοκιμάστε ξανά.';
    }
  }

  private handleError(errorCode: string): void {
    switch (errorCode) {
      case 'access_denied':
        this.error =
          'Η πρόσβαση δεν επιτράπηκε. Παρακαλώ επιτρέψτε την πρόσβαση για να συνεχίσετε.';
        break;
      case 'invalid_request':
        this.error = 'Μη έγκυρο αίτημα. Παρακαλώ δοκιμάστε ξανά.';
        break;
      default:
        this.error =
          'Παρουσιάστηκε σφάλμα κατά τη σύνδεση. Παρακαλώ δοκιμάστε ξανά.';
    }
  }

  returnToPrevious(): void {
    const origin = sessionStorage.getItem('googleAuthOrigin');
    if (origin) {
      sessionStorage.removeItem('googleAuthOrigin');
      this.router.navigate([origin]);
    } else {
      this.router.navigate(['/auth/login']);
    }
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\auth\login.component.css
```
/* Component specific styles can be added here */
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\auth\login.component.html
```
<div class="min-h-screen flex items-center justify-center bg-gray-900 pt-6">
  <!-- Background elements -->
  <div class="fixed inset-0 z-0">
    <div
      class="absolute inset-0 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900"
    ></div>
    <div
      class="absolute inset-0 bg-gradient-to-br from-primary-900/20 via-secondary-900/20 to-accent-900/20 animate-gradient"
    ></div>
    <div
      class="absolute inset-0 bg-gradient-radial from-transparent via-primary-900/10 to-transparent"
    ></div>
  </div>

  <div class="max-w-md w-full mx-4 z-10">
    <!-- Logo -->
    <div class="text-center mb-12">
      <h2 class="text-3xl font-bold">
        <span
          class="bg-gradient-to-r from-primary-400 via-secondary-400 to-accent-400 bg-clip-text text-transparent animate-gradient"
        >
          Καλώς ήρθατε
        </span>
      </h2>
      <p class="mt-2 text-gray-400">Συνδεθείτε στον λογαριασμό σας</p>
    </div>

    <!-- Login Form -->
    <div
      class="bg-white/5 backdrop-blur-lg rounded-2xl shadow-xl p-8 space-y-12 border border-white/10"
    >
      <app-error-message-banner [error]="error"></app-error-message-banner>

      <form [formGroup]="loginForm" (ngSubmit)="onSubmit()" class="space-y-8">
        <!-- Form inputs with more space between them -->
        <div class="space-y-10">
          <div class="mb-8">
            <app-form-input
              [form]="loginForm"
              controlName="email"
              type="email"
              placeholder="Διεύθυνση Email"
            ></app-form-input>
          </div>

          <div class="mt-8">
            <app-form-input
              [form]="loginForm"
              controlName="password"
              type="password"
              placeholder="Κωδικός πρόσβασης"
            ></app-form-input>
          </div>
        </div>

        <div class="flex items-center justify-between">
          <div class="text-sm">
            <a
              routerLink="/auth/reset-password-request"
              class="text-primary-400 hover:text-primary-300 transition-colors"
            >
              Ξεχάσατε τον κωδικό σας;
            </a>
          </div>
        </div>

        <!-- Buttons with more space between them -->
        <div class="space-y-6">
          <div>
            <app-auth-button
              type="submit"
              [isLoading]="isLoading"
              [disabled]="loginForm.invalid"
              icon="lucideUser"
              (buttonClick)="onSubmit()"
            >
              Σύνδεση
            </app-auth-button>
          </div>

          <!-- Google Sign In Button -->
          <div class="relative">
            <div class="absolute inset-0 flex items-center">
              <div class="w-full border-t border-gray-600"></div>
            </div>
            <div class="relative flex justify-center text-sm">
              <span class="px-2 text-gray-400 bg-gray-900/95"
                >ή συνεχίστε με</span
              >
            </div>
          </div>

          <div>
            <app-google-login-button
              [isLoading]="isLoading"
              (login)="loginWithGoogle()"
            ></app-google-login-button>
          </div>
        </div>
      </form>

      <div class="text-center text-sm">
        <span class="text-gray-400">Δεν έχετε λογαριασμό;</span>
        <a
          routerLink="/auth/sign-up"
          class="ml-1 text-primary-400 hover:text-primary-300 transition-colors"
        >
          Εγγραφή
        </a>
      </div>
    </div>
  </div>
</div>

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\auth\login.component.ts
```
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { BaseComponent } from 'src/app/common/ui/base-component';
import { AuthService } from 'src/app/services/auth.service';
import { takeUntil } from 'rxjs';
import { HttpErrorResponse } from '@angular/common/http';
import { SignupStep } from './signup.component';
import { LoggedAccount } from 'src/app/models/auth/auth.model';
import { ErrorHandlerService } from 'src/app/common/services/error-handler.service';
import { ErrorDetails } from 'src/app/common/ui/error-message-banner.component';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css'],
})
export class LoginComponent extends BaseComponent implements OnInit {
  loginForm: FormGroup;
  isLoading = false;
  error?: ErrorDetails;

  constructor(
    private readonly fb: FormBuilder,
    private readonly authService: AuthService,
    private readonly router: Router,
    private readonly route: ActivatedRoute,
    private readonly errorHandler: ErrorHandlerService
  ) {
    super();
    this.loginForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]],
      password: ['', Validators.required],
    });
  }

  ngOnInit(): void {
    this.authService.isLoggedIn().subscribe((isLoggedIn) => {
      if (isLoggedIn) {
        this.router.navigate(['/']);
      }
    });

    this.route.queryParams.subscribe((params: any) => {
      if (params['mode'] === 'google') {
        const googleAuthCode: string | null =
          sessionStorage.getItem('googleAuthCode');

        if (googleAuthCode) {
          sessionStorage.removeItem('googleAuthCode');
          sessionStorage.removeItem('googleAuthOrigin');
          this.isLoading = true;
          this.processGoogleLogin(googleAuthCode);
        }
      }
    });
  }

  private processGoogleLogin(authCode: string): void {
    this.authService.loginWithGoogle(authCode).subscribe({
      next: (response: LoggedAccount) => {
        if (response && !response.isPhoneVerified) {
          sessionStorage.setItem('unverifiedPhone', this.authService.getUserEmail()!);
          this.navigateToPhoneVerification();
        }

        if (response && !response.isEmailVerified) {
          sessionStorage.setItem('unverifiedEmail', this.authService.getUserEmail()!);
          this.navigateToEmailVerification();
        } else {
          this.router.navigate(['/']);
        }
        this.isLoading = false;
      },
      error: (error: HttpErrorResponse) => {
        this.isLoading = false;
        this.error = this.errorHandler.handleAuthError(error);
      },
    });
  }

  onSubmit(): void {
    this.error = undefined;
    this.markFormGroupTouched(this.loginForm);

    if (this.loginForm.valid) {
      this.isLoading = true;
      const { email, password } = this.loginForm.value;

      this.authService.login(email, password).subscribe({
        next: (response) => {
          if (response && !response.isPhoneVerified) {
            sessionStorage.setItem('unverifiedPhone', response.phone);
            this.navigateToPhoneVerification();
          }

          if (response && !response.isEmailVerified) {
            sessionStorage.setItem('unverifiedEmail', email);
            this.navigateToEmailVerification();
          } else {
            this.router.navigate(['/']);
          }
          this.isLoading = false;
        },
        error: (error: HttpErrorResponse) => {
          this.isLoading = false;
          this.error = this.errorHandler.handleAuthError(error);
        },
      });
    }
  }

  private navigateToPhoneVerification(): void {
    this.router.navigate(['/auth/sign-up'], {
      state: {
        step: SignupStep.OtpVerification,
        fromLogin: true,
      },
    });
  }

  private navigateToEmailVerification(): void {
    this.router.navigate(['/auth/sign-up'], {
      state: {
        step: SignupStep.EmailConfirmation,
        fromLogin: true,
      },
    });
  }

  loginWithGoogle(): void {
    this.error = undefined;
    this.isLoading = true;

    this.authService
      .loginWithGoogle('')
      .pipe(takeUntil(this._destroyed))
      .subscribe({
        next: (response) => {
          if (response && !response.isEmailVerified) {
            sessionStorage.setItem('unverifiedEmail', this.authService.getUserEmail()!);
            this.navigateToEmailVerification();
          } else {
            this.router.navigate(['/']);
          }
          this.isLoading = false;
        },
        error: (error) => {
          this.isLoading = false;
          this.error = this.errorHandler.handleAuthError(error);
        },
      });
  }

  private markFormGroupTouched(formGroup: FormGroup) {
    Object.keys(formGroup.controls).forEach((key) => {
      const control = formGroup.get(key);
      if (control instanceof FormGroup) {
        this.markFormGroupTouched(control);
      } else if (control) {
        control.markAsTouched();
        control.markAsDirty();
        control.updateValueAndValidity();
      }
    });
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\auth\reset-password\reset-password-request.component.ts
```
import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { BaseComponent } from 'src/app/common/ui/base-component';
import { AuthService } from 'src/app/services/auth.service';
import { takeUntil } from 'rxjs';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { FormInputComponent } from 'src/app/common/ui/form-input.component';
import { AuthButtonComponent } from '../shared/auth-button/auth-button.component';
import { NgIconsModule } from '@ng-icons/core';

@Component({
  selector: 'app-reset-password-request',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    FormInputComponent,
    AuthButtonComponent,
    NgIconsModule,
  ],
  template: `
    <div class="min-h-screen flex items-center justify-center bg-gray-900 pt-6">
      <!-- Background elements -->
      <div class="fixed inset-0 z-0">
        <div
          class="absolute inset-0 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900"
        ></div>
        <div
          class="absolute inset-0 bg-gradient-to-br from-primary-900/20 via-secondary-900/20 to-accent-900/20 animate-gradient"
        ></div>
        <div
          class="absolute inset-0 bg-gradient-radial from-transparent via-primary-900/10 to-transparent"
        ></div>
      </div>

      <div class="max-w-md w-full mx-4 z-10">
        <!-- Logo -->
        <div class="text-center mb-8">
          <h2 class="text-3xl font-bold">
            <span
              class="bg-gradient-to-r from-primary-400 via-secondary-400 to-accent-400 bg-clip-text text-transparent animate-gradient"
            >
              Επαναφορά Κωδικού
            </span>
          </h2>
          <p class="mt-2 text-gray-400">
            Εισάγετε το email σας για να λάβετε οδηγίες επαναφοράς
          </p>
        </div>

        <div
          class="bg-white/5 backdrop-blur-lg rounded-2xl shadow-xl p-8 space-y-8 border border-white/10"
        >
          <!-- Success message -->
          <div
            *ngIf="emailSent"
            class="bg-green-500/10 border border-green-500/30 rounded-lg p-4 text-green-400 text-sm animate-fadeIn"
          >
            <div class="flex items-center">
              <ng-icon name="lucideCheck" class="mr-2" [size]="'20'"></ng-icon>
              <p>Οι οδηγίες επαναφοράς στάλθηκαν στο email σας.</p>
            </div>
          </div>

          <!-- Error message -->
          <div
            *ngIf="errorMessage"
            class="bg-red-500/10 border border-red-500/30 rounded-lg p-4 text-red-400 text-sm animate-fadeIn"
          >
            <div class="flex items-start">
              <ng-icon
                name="lucideX"
                class="mr-2 mt-0.5"
                [size]="'20'"
              ></ng-icon>
              <p>{{ errorMessage }}</p>
            </div>
          </div>

          <form
            [formGroup]="resetForm"
            (ngSubmit)="onSubmit()"
            class="space-y-6"
          >
            <app-form-input
              [form]="resetForm"
              controlName="email"
              type="email"
              placeholder="Διεύθυνση Email"
            ></app-form-input>

            <div class="space-y-4">
              <app-auth-button
                type="submit"
                [isLoading]="isLoading"
                [disabled]="resetForm.invalid"
                icon="lucideMail"
              >
                Αποστολή Οδηγιών
              </app-auth-button>

              <button
                type="button"
                (click)="navigateToLogin()"
                class="w-full px-4 py-3 border border-white/20 text-white rounded-xl hover:bg-white/10 transition-all duration-300"
              >
                Επιστροφή στη Σύνδεση
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  `,
})
export class ResetPasswordRequestComponent extends BaseComponent {
  resetForm: FormGroup;
  isLoading = false;
  emailSent = false;
  errorMessage: string | null = null;

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private router: Router
  ) {
    super();
    this.resetForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]],
    });
  }

  onSubmit(): void {
    if (this.resetForm.valid) {
      this.isLoading = true;
      this.errorMessage = null;
      const email = this.resetForm.get('email')?.value;

      this.authService
        .requestPasswordReset(email)
        .pipe(takeUntil(this._destroyed))
        .subscribe({
          next: () => {
            this.isLoading = false;
            this.emailSent = true;
          },
          error: (error) => {
            this.isLoading = false;
            this.errorMessage =
              'Παρουσιάστηκε σφάλμα κατά την αποστολή των οδηγιών. Παρακαλώ δοκιμάστε ξανά.';
            console.error('Reset password request error:', error);
          },
        });
    }
  }

  navigateToLogin(): void {
    this.router.navigate(['/auth/login']);
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\auth\reset-password\reset-password.component.ts
```
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { AuthService } from 'src/app/services/auth.service';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { FormInputComponent } from 'src/app/common/ui/form-input.component';
import { AuthButtonComponent } from '../shared/auth-button/auth-button.component';
import { NgIconsModule } from '@ng-icons/core';
import { CustomValidators } from '../validators/custom.validators';
import { User } from 'src/app/models/user/user.model';
import { LogService } from 'src/app/common/services/log.service';

@Component({
  selector: 'app-reset-password',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    FormInputComponent,
    AuthButtonComponent,
    NgIconsModule,
  ],
  template: `
    <div class="min-h-screen flex items-center justify-center bg-gray-900 pt-6">
      <!-- Background elements -->
      <div class="fixed inset-0 z-0">
        <div
          class="absolute inset-0 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900"
        ></div>
        <div
          class="absolute inset-0 bg-gradient-to-br from-primary-900/20 via-secondary-900/20 to-accent-900/20 animate-gradient"
        ></div>
        <div
          class="absolute inset-0 bg-gradient-radial from-transparent via-primary-900/10 to-transparent"
        ></div>
      </div>

      <div class="max-w-md w-full mx-4 z-10">
        <!-- Logo -->
        <div class="text-center mb-8">
          <h2 class="text-3xl font-bold">
            <span
              class="bg-gradient-to-r from-primary-400 via-secondary-400 to-accent-400 bg-clip-text text-transparent animate-gradient"
            >
              Νέος Κωδικός
            </span>
          </h2>
          <p class="mt-2 text-gray-400">
            Εισάγετε τον νέο σας κωδικό πρόσβασης
          </p>
        </div>

        <div
          class="bg-white/5 backdrop-blur-lg rounded-2xl shadow-xl p-8 space-y-8 border border-white/10"
        >
          <!-- Success message -->
          <div
            *ngIf="isSuccess"
            class="bg-green-500/10 border border-green-500/30 rounded-lg p-4 text-green-400 text-sm animate-fadeIn"
          >
            <div class="flex items-center">
              <ng-icon name="lucideCheck" class="mr-2" [size]="'20'"></ng-icon>
              <p>Ο κωδικός σας άλλαξε με επιτυχία!</p>
            </div>
          </div>

          <!-- Error message -->
          <div
            *ngIf="errorMessage"
            class="bg-red-500/10 border border-red-500/30 rounded-lg p-4 text-red-400 text-sm animate-fadeIn"
          >
            <div class="flex items-start">
              <ng-icon
                name="lucideX"
                class="mr-2 mt-0.5"
                [size]="'20'"
              ></ng-icon>
              <p>{{ errorMessage }}</p>
            </div>
          </div>

          <!-- Only show form when there's no error and no success -->
          <form
            *ngIf="!isSuccess && !errorMessage"
            [formGroup]="resetForm"
            (ngSubmit)="onSubmit()"
            class="space-y-6"
          >
            <app-form-input
              [form]="resetForm"
              controlName="password"
              type="password"
              placeholder="Νέος κωδικός πρόσβασης"
            ></app-form-input>

            <app-form-input
              [form]="resetForm"
              controlName="confirmPassword"
              type="password"
              placeholder="Επιβεβαίωση κωδικού"
            ></app-form-input>

            <div class="text-sm text-gray-400 space-y-1">
              <p>Ο κωδικός πρέπει να περιέχει:</p>
              <ul class="list-disc list-inside pl-4">
                <li>Τουλάχιστον 8 χαρακτήρες</li>
                <li>Ένα κεφαλαίο γράμμα</li>
                <li>Ένα πεζό γράμμα</li>
                <li>Έναν αριθμό</li>
                <li>Έναν ειδικό χαρακτήρα</li>
              </ul>
            </div>

            <div class="space-y-4">
              <app-auth-button
                type="submit"
                [isLoading]="isLoading"
                [disabled]="resetForm.invalid"
                icon="lucideCheck"
              >
                Αλλαγή Κωδικού
              </app-auth-button>
            </div>
          </form>

          <!-- Add a button to go back when there's an error -->
          <div *ngIf="errorMessage" class="text-center">
            <button
              type="button"
              (click)="navigateToLogin()"
              class="w-full px-4 py-3 bg-gradient-to-r from-primary-600 to-accent-600 text-white rounded-xl hover:shadow-lg hover:shadow-primary-500/20 transition-all duration-300"
            >
              Μετάβαση στη Σύνδεση
            </button>
          </div>

          <div *ngIf="isSuccess" class="text-center">
            <button
              type="button"
              (click)="navigateToLogin()"
              class="w-full px-4 py-3 bg-gradient-to-r from-primary-600 to-accent-600 text-white rounded-xl hover:shadow-lg hover:shadow-primary-500/20 transition-all duration-300"
            >
              Μετάβαση στη Σύνδεση
            </button>
          </div>
        </div>
      </div>
    </div>
  `,
})
export class ResetPasswordComponent implements OnInit {
  resetForm: FormGroup;
  isLoading = false;
  isSuccess = false;
  errorMessage: string | null = null;
  private token: string | null = null;
  private email: string = '';

  constructor(
    private readonly fb: FormBuilder,
    private readonly authService: AuthService,
    private readonly logService: LogService,
    private readonly route: ActivatedRoute,
    private readonly router: Router
  ) {
    this.resetForm = this.fb.group({
      password: [
        '',
        [Validators.required, CustomValidators.passwordValidator()],
      ],
      confirmPassword: ['', [Validators.required]],
    });

    this.resetForm
      .get('confirmPassword')
      ?.setValidators([
        Validators.required,
        CustomValidators.matchValidator('password'),
      ]);
  }

  ngOnInit(): void {
    this.token = this.route.snapshot.queryParamMap.get('token');

    if (!this.token) {
      this.errorMessage = 'Μη έγκυρος σύνδεσμος επαναφοράς κωδικού.';
    }

    this.authService.verifyResetPasswordToken(this.token!).subscribe(
      (model: User) => {
        this.email = (model as any).email;
        this.isLoading = false;
        this.errorMessage = null;
      },
      (error) => {
        this.isLoading = false;
        console.error('Email verification error:', error);
        this.errorMessage = 'Το email επιβεβαίωσης δεν ισχύει πια.';
      }
    );
  }

  onSubmit(): void {
    if (this.resetForm.valid) {
      this.isLoading = true;
      this.errorMessage = null;

      const { password } = this.resetForm.value;

      this.authService.resetPassword(this.email, password).subscribe({
        next: () => {
          this.isLoading = false;
          this.isSuccess = true;
        },
        error: (error) => {
          this.isLoading = false;
          this.errorMessage =
            'Παρουσιάστηκε σφάλμα κατά την αλλαγή του κωδικού. Παρακαλώ δοκιμάστε ξανά.';
          console.error('Reset password error:', error);
        },
      });
    }
  }

  navigateToLogin(): void {
    this.router.navigate(['/auth/login']);
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\auth\shared\auth-button\auth-button.component.ts
```
import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NgIconsModule } from '@ng-icons/core';

@Component({
  selector: 'app-auth-button',
  standalone: true,
  imports: [CommonModule, NgIconsModule],
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: `
    <button
      [type]="type"
      [disabled]="isLoading || disabled"
      [class]="buttonClass"
      class="group relative w-full flex justify-center items-center py-3 px-4 border border-transparent 
             text-sm font-medium rounded-xl text-white transition-all duration-300 
             transform hover:-translate-y-0.5 disabled:opacity-50 disabled:hover:translate-y-0"
      [attr.aria-busy]="isLoading"
      [attr.aria-disabled]="disabled"
      (click)="onClick()"
    >
      <div class="absolute inset-0 rounded-xl bg-gradient-to-r from-primary-500/0 
                  via-white/5 to-primary-500/0 group-hover:animate-shimmer -z-10"></div>
      
      <ng-icon
        *ngIf="icon && !isLoading"
        [name]="icon"
        class="mr-2 group-hover:scale-110 transition-transform duration-300"
        [size]="'20'"
      ></ng-icon>

      <svg
        *ngIf="isLoading"
        class="animate-spin -ml-1 mr-3 h-5 w-5 text-white"
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        aria-hidden="true"
      >
        <circle
          class="opacity-25"
          cx="12"
          cy="12"
          r="10"
          stroke="currentColor"
          stroke-width="4"
        ></circle>
        <path
          class="opacity-75"
          fill="currentColor"
          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
        ></path>
      </svg>

      <span class="relative">
        <ng-content></ng-content>
      </span>
    </button>
  `
})
export class AuthButtonComponent {
  @Input() type: 'button' | 'submit' = 'button';
  @Input() isLoading: boolean = false;
  @Input() disabled: boolean = false;
  @Input() icon?: string;
  @Input() buttonClass: string = 'bg-gradient-to-r from-primary-600 to-accent-600 hover:shadow-lg hover:shadow-primary-500/20';
  @Output() buttonClick = new EventEmitter<void>();

  onClick(): void {
    if (!this.isLoading && !this.disabled) {
      this.buttonClick.emit();
    }
  }
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\auth\shared\google-login-button\google-login-button.component.ts
```
import {
  Component,
  Output,
  EventEmitter,
  Input,
  ChangeDetectionStrategy,
} from '@angular/core';
import { CommonModule } from '@angular/common';
import { GoogleAuthService } from 'src/app/services/google-auth.service';

@Component({
  selector: 'app-google-login-button',
  standalone: true,
  imports: [CommonModule],
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: `
    <button
      type="button"
      (click)="onClick()"
      [disabled]="isLoading"
      [attr.aria-busy]="isLoading"
      class="w-full flex items-center justify-center px-4 py-2.5 border border-gray-300 rounded-md
             shadow-sm bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 
             focus:ring-gray-500 transition-all duration-300 transform hover:-translate-y-0.5 hover:shadow-md 
             active:bg-gray-100 group disabled:opacity-70 disabled:hover:transform-none"
    >
      <div *ngIf="isLoading" class="mr-2">
        <svg
          class="animate-spin h-5 w-5 text-gray-500"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
        >
          <circle
            class="opacity-25"
            cx="12"
            cy="12"
            r="10"
            stroke="currentColor"
            stroke-width="4"
          ></circle>
          <path
            class="opacity-75"
            fill="currentColor"
            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
          ></path>
        </svg>
      </div>
      <img
        *ngIf="!isLoading"
        src="https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/google.svg"
        alt="Google logo"
        class="w-5 h-5 mr-2 transition-transform duration-300 group-hover:scale-110"
      />
      <span class="text-gray-700 font-medium">{{ text }}</span>
    </button>
  `,
})
export class GoogleLoginButtonComponent {
  @Input() text: string = 'Συνέχεια με Google';
  @Input() isLoading: boolean = false;
  @Input() isSignup: boolean = false;
  @Output() login = new EventEmitter<void>();

  constructor(private readonly googleAuthService: GoogleAuthService) {}

  onClick(): void {
    if (!this.isLoading) {
      const authUrl = this.googleAuthService.getAuthUrl(this.isSignup);
      window.location.href = authUrl;
    }
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\auth\shared\validation-message\validation-message.component.ts
```
import { Component, Input, ChangeDetectionStrategy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { AbstractControl } from '@angular/forms';

@Component({
  selector: 'app-validation-message',
  standalone: true,
  imports: [CommonModule],
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: `
    <div
      *ngIf="shouldShowErrors()"
      [id]="id"
      role="alert"
      class="absolute -bottom-6 left-0 text-sm text-red-400 transition-all duration-300"
    >
      <!-- Required field -->
      <div *ngIf="control?.errors?.['required']">{{ field }} απαιτείται</div>

      <!-- Email validation -->
      <div *ngIf="control?.errors?.['email']">
        Παρακαλώ εισάγετε έναν έγκυρο email (π.χ., user&#64;domain.com)
      </div>

      <!-- Min length -->
      <div *ngIf="control?.errors?.['minlength']">
        {{ field }} πρέπει να έχει τουλάχιστον
        {{ control?.errors?.['minlength']?.requiredLength }} χαρακτήρες
      </div>

      <!-- Max length -->
      <div *ngIf="control?.errors?.['maxlength']">
        {{ field }} δεν μπορεί να υπερβαίνει τους
        {{ control?.errors?.['maxlength']?.requiredLength }} χαρακτήρες
      </div>

      <!-- Pattern validation -->
      <div *ngIf="control?.errors?.['pattern']">
        <ng-container [ngSwitch]="field.toLowerCase()">
          <!-- Phone number -->
          <ng-container *ngSwitchCase="'αριθμός τηλεφώνου'">
            Παρακαλώ εισάγετε έναν έγκυρο αριθμό τηλεφώνου (μόνο αριθμοί)
          </ng-container>

          <!-- ZIP code -->
          <ng-container *ngSwitchCase="'ταχυδρομικός κώδικας'">
            Παρακαλώ εισάγετε έναν έγκυρο ταχυδρομικό κώδικα (π.χ., 12345)
          </ng-container>

          <!-- Operating hours -->
          <ng-container *ngSwitchCase="'ώρες λειτουργίας'">
            Παρακαλώ εισάγετε έγκυρες ώρες λειτουργίας σε μορφή 24ώρου (π.χ.,
            09:00,17:00)
          </ng-container>

          <!-- Default pattern message -->
          <ng-container *ngSwitchDefault>
            Μη έγκυρη μορφή για {{ field }}
          </ng-container>
        </ng-container>
      </div>

      <!-- Password validation -->
      <div *ngIf="control?.errors?.['uppercase']">
        Ο κωδικός πρέπει να περιέχει τουλάχιστον ένα κεφαλαίο γράμμα
      </div>
      <div *ngIf="control?.errors?.['lowercase']">
        Ο κωδικός πρέπει να περιέχει τουλάχιστον ένα πεζό γράμμα
      </div>
      <div *ngIf="control?.errors?.['number']">
        Ο κωδικός πρέπει να περιέχει τουλάχιστον έναν αριθμό
      </div>
      <div *ngIf="control?.errors?.['specialChar']">
        Ο κωδικός πρέπει να περιέχει τουλάχιστον έναν ειδικό χαρακτήρα
      </div>

      <!-- Password match validation -->
      <div *ngIf="control?.errors?.['mismatch']">Οι κωδικοί δεν ταιριάζουν</div>

      <!-- Social media validation -->
      <div *ngIf="control?.errors?.['invalidSocialMedia']">
        Παρακαλώ εισάγετε έγκυρο link {{ field }}
      </div>

      <!-- Operating hours validation -->
      <div *ngIf="control?.errors?.['invalidTimeRange']">
        Η ώρα κλεισίματος πρέπει να είναι μετά την ώρα ανοίγματος
      </div>

      <!-- Role validation -->
      <div *ngIf="control?.errors?.['invalidRole']">
        Ο ρόλος του χρήστη δεν είναι έγκυρος
      </div>

      <!-- Custom error message -->
      <div *ngIf="control?.errors?.['custom']">
        {{ control?.errors?.['custom'] }}
      </div>
    </div>
  `,
})
export class ValidationMessageComponent {
  @Input() control?: AbstractControl | null;
  @Input() field: string = 'Αυτό το πεδίο';
  @Input() customError?: string;
  @Input() id?: string;
  @Input() showImmediately: boolean = false;

  shouldShowErrors(): boolean {
    if (!this.control) return false;

    // Show errors immediately when control is invalid and dirty
    if (this.showImmediately && this.control.invalid && this.control.dirty) {
      return true;
    }

    // Traditional approach - show when touched
    return this.control.invalid && (this.control.touched || this.control.dirty);
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\auth\sign-up-steps\account-details\account-details.component.ts
```
import {
  Component,
  Input,
  Output,
  EventEmitter,
  ChangeDetectionStrategy,
  ViewChild,
  ElementRef,
} from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormGroup, ReactiveFormsModule } from '@angular/forms';
import { FormInputComponent } from 'src/app/common/ui/form-input.component';

@Component({
  selector: 'app-account-details',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, FormInputComponent],
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: `
    <div [formGroup]="form" class="space-y-6" #formContainer>
      <h2 class="text-2xl font-bold text-white mb-6">Στοιχεία Λογαριασμού</h2>

      <ng-container>
        <app-form-input
          [form]="form"
          controlName="password"
          type="password"
          placeholder="Κωδικός πρόσβασης"
        >
        </app-form-input>

        <app-form-input
          [form]="form"
          controlName="confirmPassword"
          type="password"
          placeholder="Επιβεβαίωση κωδικού"
        >
        </app-form-input>

        <!-- Password requirements info -->
        <div class="text-sm text-gray-400 space-y-1 mt-2">
          <p>Ο κωδικός πρέπει να περιέχει:</p>
          <ul class="list-disc list-inside pl-4">
            <li>Τουλάχιστον 8 χαρακτήρες</li>
            <li>Ένα κεφαλαίο γράμμα</li>
            <li>Ένα πεζό γράμμα</li>
            <li>Έναν αριθμό</li>
            <li>Έναν ειδικό χαρακτήρα</li>
          </ul>
        </div>
      </ng-container>

      <ng-template #externalProvider>
        <div class="text-center text-gray-400 py-8">
          <p>Ο λογαριασμός σας είναι συνδεδεμένος με το Google.</p>
          <p>Δεν απαιτείται κωδικός πρόσβασης.</p>
        </div>
      </ng-template>

      <!-- Navigation buttons -->
      <div class="flex justify-between pt-6">
        <button
          type="button"
          (click)="onBack()"
          class="px-6 py-2 border border-gray-600 text-gray-300 rounded-lg
                 hover:bg-white/5 transition-all duration-300"
        >
          Πίσω
        </button>

        <button
          type="button"
          (click)="onNext()"
          class="px-6 py-2 bg-gradient-to-r from-primary-600 to-accent-600 text-white rounded-lg
                 hover:shadow-lg hover:shadow-primary-500/20 transition-all duration-300 
                 transform hover:-translate-y-1"
        >
          Επόμενο
        </button>
      </div>
    </div>
  `,
})
export class AccountDetailsComponent {
  @Input() form!: FormGroup;
  @Output() next = new EventEmitter<void>();
  @Output() back = new EventEmitter<void>();
  @ViewChild('formContainer') formContainer!: ElementRef;

  onNext(): void {
    if (this.form.valid) {
      this.next.emit();
    }
  }

  onBack(): void {
    this.back.emit();
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\auth\sign-up-steps\personal-info\google-signup-loading.component.ts
```
import { Component, Input } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-google-signup-loading',
  standalone: true,
  imports: [CommonModule],
  template: `
    <div
      *ngIf="isLoading"
      class="absolute inset-0 z-50 bg-gray-900/50 backdrop-blur-sm flex items-center justify-center"
    >
      <div
        class="bg-white/5 backdrop-blur-lg rounded-2xl shadow-xl p-8 space-y-6 border border-white/10 text-center"
      >
        <div
          class="w-16 h-16 mx-auto border-4 border-primary-500 border-t-transparent rounded-full animate-spin"
        ></div>
        <p class="text-gray-400">Λήψη στοιχείων από Google...</p>
      </div>
    </div>
  `,
})
export class GoogleSignupLoadingComponent {
  @Input() isLoading = false;
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\auth\sign-up-steps\personal-info\personal-info.component.ts
```
import {
  Component,
  Input,
  Output,
  EventEmitter,
  ChangeDetectionStrategy,
  ElementRef,
  ViewChild,
  ChangeDetectorRef,
} from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormGroup, ReactiveFormsModule } from '@angular/forms';
import { FormInputComponent } from 'src/app/common/ui/form-input.component';
import { PhoneInputComponent } from 'src/app/common/ui/phone-input.component';
import { FileDropAreaComponent } from 'src/app/common/ui/file-drop-area.component';
import { NgIconsModule } from '@ng-icons/core';
import { GoogleSignupLoadingComponent } from './google-signup-loading.component';
import { ErrorMessageBannerComponent } from 'src/app/common/ui/error-message-banner.component';
import { ErrorDetails } from 'src/app/common/ui/error-message-banner.component';
import { FileItem } from 'src/app/models/file/file.model';

interface ValidationError {
  field: string;
  message: string;
  element?: HTMLElement;
}

@Component({
  selector: 'app-personal-info',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    FormInputComponent,
    PhoneInputComponent,
    FileDropAreaComponent,
    NgIconsModule,
    GoogleSignupLoadingComponent,
    ErrorMessageBannerComponent,
  ],
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: `
    <div
      [formGroup]="form"
      class="space-y-6 w-full max-w-2xl mx-auto px-4 sm:px-6"
      #formContainer
    >
      <app-google-signup-loading
        [isLoading]="isExternalProviderLoading"
      ></app-google-signup-loading>

      <!-- Google Data Banner -->
      <div
        *ngIf="hasGooglePopulatedFields()"
        class="mb-6 p-4 rounded-lg bg-primary-900/30 border border-primary-500/30 animate-fadeIn"
      >
        <div
          class="flex flex-col sm:flex-row items-start sm:items-center gap-4"
        >
          <div class="flex-shrink-0">
            <div
              class="h-8 w-8 rounded-full bg-primary-600 flex items-center justify-center"
            >
              <span class="text-white text-sm font-bold">G</span>
            </div>
          </div>
          <div>
            <h3 class="text-primary-400 font-medium">
              Έχουμε συμπληρώσει κάποια στοιχεία από το Google
            </h3>
            <p class="text-gray-400 text-sm mt-1">
              Τα πεδία που έχουν συμπληρωθεί αυτόματα είναι επισημασμένα και δεν
              μπορούν να αλλαχθούν.
            </p>
          </div>
        </div>
      </div>

      <h2 class="text-2xl sm:text-3xl font-bold text-white mb-6">
        Προσωπικές Πληροφορίες
      </h2>

      <!-- Form Fields -->
      <div class="space-y-6">
        <!-- Each form field is wrapped in a relative container -->
        <div class="form-field-container">
          <app-form-input
            [form]="form"
            controlName="fullName"
            type="text"
            placeholder="Ονοματεπώνυμο"
            [readonly]="form.get('fullName')?.disabled"
          ></app-form-input>
          <div *ngIf="form.get('fullName')?.disabled" class="google-hint">
            <div
              class="h-4 w-4 rounded-full bg-white flex items-center justify-center mr-1"
            >
              <span class="text-primary-600 text-xs font-bold">G</span>
            </div>
            <span>Από Google</span>
          </div>
        </div>

        <div class="form-field-container">
          <app-form-input
            [form]="form"
            controlName="email"
            type="email"
            placeholder="Email"
            [readonly]="form.get('email')?.disabled"
          ></app-form-input>
          <div *ngIf="form.get('email')?.disabled" class="google-hint">
            <div
              class="h-4 w-4 rounded-full bg-white flex items-center justify-center mr-1"
            >
              <span class="text-primary-600 text-xs font-bold">G</span>
            </div>
            <span>Από Google</span>
          </div>
        </div>

        <div class="form-field-container">
          <app-phone-input
            [form]="form"
            countryCodeControl="countryCode"
            phoneNumberControl="phoneNumber"
            [readonly]="
              form.get('phoneNumber')?.disabled ||
              form.get('countryCode')?.disabled
            "
            (phoneChange)="onPhoneChange($event)"
          ></app-phone-input>
          <div
            *ngIf="
              form.get('phoneNumber')?.disabled ||
              form.get('countryCode')?.disabled
            "
            class="google-hint"
          >
            <div
              class="h-4 w-4 rounded-full bg-white flex items-center justify-center mr-1"
            >
              <span class="text-primary-600 text-xs font-bold">G</span>
            </div>
            <span>Από Google</span>
          </div>
        </div>

        <!-- Location Information -->
        <div class="space-y-6">
          <h3 class="text-lg font-medium text-white">Πληροφορίες Τοποθεσίας</h3>

          <div
            class="grid grid-cols-1 sm:grid-cols-2 gap-x-[1px] gap-y-2 sm:gap-x-2"
          >
            <div class="form-field-container">
              <app-form-input
                [form]="getLocationForm()"
                controlName="city"
                type="text"
                placeholder="Πόλη"
                [readonly]="getLocationForm().get('city')?.disabled"
              ></app-form-input>
              <div
                *ngIf="getLocationForm().get('city')?.disabled"
                class="google-hint"
              >
                <div
                  class="h-4 w-4 rounded-full bg-white flex items-center justify-center mr-1"
                >
                  <span class="text-primary-600 text-xs font-bold">G</span>
                </div>
                <span>Από Google</span>
              </div>
            </div>

            <div class="form-field-container">
              <app-form-input
                [form]="getLocationForm()"
                controlName="zipCode"
                type="text"
                placeholder="Ταχυδρομικός Κώδικας"
                [readonly]="getLocationForm().get('zipCode')?.disabled"
              ></app-form-input>
              <div
                *ngIf="getLocationForm().get('zipCode')?.disabled"
                class="google-hint"
              >
                <div
                  class="h-4 w-4 rounded-full bg-white flex items-center justify-center mr-1"
                >
                  <span class="text-primary-600 text-xs font-bold">G</span>
                </div>
                <span>Από Google</span>
              </div>
            </div>
          </div>

          <div
            class="grid grid-cols-1 sm:grid-cols-2 gap-x-[1px] gap-y-2 sm:gap-x-6"
          >
            <div class="form-field-container">
              <app-form-input
                [form]="getLocationForm()"
                controlName="address"
                type="text"
                placeholder="Διεύθυνση"
                [readonly]="getLocationForm().get('address')?.disabled"
              ></app-form-input>
              <div
                *ngIf="getLocationForm().get('address')?.disabled"
                class="google-hint"
              >
                <div
                  class="h-4 w-4 rounded-full bg-white flex items-center justify-center mr-1"
                >
                  <span class="text-primary-600 text-xs font-bold">G</span>
                </div>
                <span>Από Google</span>
              </div>
            </div>

            <div class="form-field-container">
              <app-form-input
                [form]="getLocationForm()"
                controlName="number"
                type="text"
                placeholder="Αριθμός"
                [readonly]="getLocationForm().get('number')?.disabled"
              ></app-form-input>
              <div
                *ngIf="getLocationForm().get('number')?.disabled"
                class="google-hint"
              >
                <div
                  class="h-4 w-4 rounded-full bg-white flex items-center justify-center mr-1"
                >
                  <span class="text-primary-600 text-xs font-bold">G</span>
                </div>
                <span>Από Google</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Profile Picture Section -->
        <div class="space-y-6">
          <h3 class="text-lg font-medium text-white">Φωτογραφία Προφίλ</h3>
          <app-file-drop-area
            [form]="form"
            controlName="profilePhoto"
            label="Επιλογή Φωτογραφίας"
            hint="Ανεβάστε μια φωτογραφία προφίλ (μέγιστο μέγεθος: 2MB)"
            accept=".jpg,.jpeg,.png"
            [multiple]="false"
            [maxFileSize]="2 * 1024 * 1024"
            (filesChange)="onProfilePhotoChange($event)"
          ></app-file-drop-area>

          <!-- Photo Preview -->
          <div
            *ngIf="profilePhotoPreview || isPhotoLoading"
            class="flex justify-center"
          >
            <div
              class="relative group w-24 h-24 sm:w-32 sm:h-32 rounded-full overflow-hidden border-2 border-primary-500/50"
            >
              <div
                *ngIf="isPhotoLoading"
                class="absolute inset-0 flex items-center justify-center bg-gray-800/70 z-10"
              >
                <div
                  class="w-8 h-8 sm:w-10 sm:h-10 border-4 border-primary-400 border-t-transparent rounded-full animate-spin"
                ></div>
              </div>
              <img
                *ngIf="profilePhotoPreview"
                [src]="profilePhotoPreview"
                alt="Profile preview"
                class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-110"
              />
              <button
                *ngIf="profilePhotoPreview"
                type="button"
                (click)="removeProfilePhoto()"
                class="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity"
                aria-label="Remove profile photo"
              >
                <ng-icon name="lucideX" [size]="'16'"></ng-icon>
              </button>
            </div>
          </div>

          <!-- Photo Status Messages -->
          <div class="text-center">
            <div
              *ngIf="photoUploadSuccess"
              class="text-sm text-green-400 animate-fadeIn"
            >
              Η φωτογραφία φορτώθηκε επιτυχώς
            </div>
            <div
              *ngIf="photoUploadError"
              class="text-sm text-red-400 animate-fadeIn"
            >
              {{ photoUploadError }}
            </div>
          </div>
        </div>
      </div>

      <!-- Navigation -->
      <div class="flex justify-end pt-6">
        <button
          type="button"
          (click)="onNext()"
          class="w-full sm:w-auto px-6 py-3 sm:py-2 bg-gradient-to-r from-primary-600 to-accent-600 text-white rounded-lg
                 hover:shadow-lg hover:shadow-primary-500/20 transition-all duration-300 
                 transform hover:-translate-y-1"
        >
          Επόμενο
        </button>
      </div>
      <div
        *ngIf="showErrorSummary"
        class="bg-red-500/10 border border-red-500/30 rounded-lg p-4 my-4 animate-fadeIn"
      >
        <h3 class="text-red-400 font-medium mb-2 flex items-center">
          <span class="mr-2">⚠️</span> Παρακαλώ διορθώστε τα παρακάτω σφάλματα:
        </h3>
        <ul class="list-disc list-inside text-sm text-red-400 space-y-1">
          <li
            *ngFor="let error of validationErrors"
            class="cursor-pointer hover:underline"
            (click)="scrollToErrorField(error)"
          >
            {{ error.message }}
          </li>
        </ul>
      </div>

      <!-- Error Banner -->
      <app-error-message-banner [error]="error"></app-error-message-banner>
    </div>
  `,
  styles: [
    `
      .form-field-container {
        @apply relative mb-6;
      }

      .google-hint {
        @apply absolute top-full left-0 flex items-center text-xs text-white mt-1 px-2 py-1 rounded-md bg-primary-900/10 border border-primary-500/20 animate-slideIn;
      }

      @keyframes slideIn {
        from {
          @apply opacity-0 -translate-y-1;
        }
        to {
          @apply opacity-100 translate-y-0;
        }
      }

      .animate-fadeIn {
        @apply animate-[fadeIn_0.3s_ease-out];
      }

      @keyframes fadeIn {
        from {
          @apply opacity-0;
        }
        to {
          @apply opacity-100;
        }
      }
    `,
  ],
})
export class PersonalInfoComponent {
  @Input() form!: FormGroup;
  @Input() isLoading = false;
  @Input() isExternalProviderLoading = false;
  @Output() next = new EventEmitter<void>();
  @ViewChild('formContainer') formContainer!: ElementRef;

  profilePhotoPreview: string | null = null;
  isPhotoLoading = false;
  photoUploadSuccess = false;
  photoUploadError: string | null = null;
  error?: ErrorDetails;
  validationErrors: ValidationError[] = [];
  showErrorSummary = false;

  constructor(private cdr: ChangeDetectorRef) {}

  getLocationForm(): FormGroup {
    return this.form.get('location') as FormGroup;
  }

  onNext(): void {
    this.validationErrors = [];
    this.showErrorSummary = false;
    this.error = undefined;

    if (this.form.valid) {
      this.next.emit();
    } else {
      this.markFormGroupTouched(this.form);
      this.collectValidationErrors();
      this.showErrorSummary = this.validationErrors.length > 0;
      this.scrollToFirstError();
    }
  }

  onPhoneChange(phone: string): void {
    this.form.get('phone')?.setValue(phone);
  }

  onProfilePhotoChange(files: FileItem[]): void {
    this.photoUploadSuccess = false;
    this.photoUploadError = null;
    if (files.length > 0) {
      const profilePhoto: FileItem = files[0];

      if (!profilePhoto.file.type.match('image.*')) {
        this.photoUploadError =
          'Μη έγκυρος τύπος αρχείου. Επιτρέπονται μόνο εικόνες.';
        this.profilePhotoPreview = null;
        this.form.get('profilePhoto')?.setErrors({ invalidType: true });
        this.cdr.markForCheck();
        return;
      }

      if (profilePhoto.file.size > 2 * 1024 * 1024) {
        this.photoUploadError =
          'Το μέγεθος της εικόνας δεν πρέπει να υπερβαίνει τα 2MB.';
        this.profilePhotoPreview = null;
        this.form.get('profilePhoto')?.setErrors({ invalidSize: true });
        this.cdr.markForCheck();
        return;
      }

      this.isPhotoLoading = true;
      this.cdr.markForCheck();

      this.createImagePreview(profilePhoto.file);

      this.form.get('profilePhoto')?.setValue(profilePhoto.file);
      this.form.get('profilePhoto')?.updateValueAndValidity();
    } else {
      this.profilePhotoPreview = null;
      this.cdr.markForCheck();
    }
  }

  hasGooglePopulatedFields(): boolean {
    const disabledControls = [
      this.form.get('fullName')?.disabled,
      this.form.get('email')?.disabled,
      this.form.get('phoneNumber')?.disabled,
      this.form.get('countryCode')?.disabled,
      this.getLocationForm()?.get('city')?.disabled,
      this.getLocationForm()?.get('zipCode')?.disabled,
      this.getLocationForm()?.get('address')?.disabled,
      this.getLocationForm()?.get('number')?.disabled,
    ];

    return disabledControls.some((isDisabled) => isDisabled === true);
  }

  removeProfilePhoto(): void {
    this.form.get('profilePhoto')?.setValue(null);
    this.profilePhotoPreview = null;
    this.photoUploadSuccess = false;
    this.photoUploadError = null;

    const fileInput =
      this.formContainer.nativeElement.querySelector('input[type="file"]');
    if (fileInput) {
      fileInput.value = '';
    }

    this.cdr.markForCheck();
  }

  private createImagePreview(file: File): void {
    if (!file.type.match('image.*')) {
      this.isPhotoLoading = false;
      return;
    }

    const reader = new FileReader();

    reader.onload = (e: any) => {
      setTimeout(() => {
        this.isPhotoLoading = false;
        this.profilePhotoPreview = e.target.result;
        this.photoUploadSuccess = true;
        this.cdr.markForCheck();
      }, 800);
    };

    reader.onerror = () => {
      this.isPhotoLoading = false;
      this.photoUploadError = 'Σφάλμα κατά τη φόρτωση της εικόνας.';
      this.cdr.markForCheck();
    };

    reader.readAsDataURL(file);
  }

  private markFormGroupTouched(formGroup: FormGroup) {
    Object.keys(formGroup.controls).forEach((key) => {
      const control = formGroup.get(key);
      if (control instanceof FormGroup) {
        this.markFormGroupTouched(control);
      } else if (control) {
        control.markAsTouched();
        control.markAsDirty();
        control.updateValueAndValidity();
      }
    });
  }

  private collectValidationErrors(): void {
    // Personal Info Validation
    const fullNameControl = this.form.get('fullName');
    if (fullNameControl?.invalid) {
      const element = this.findElementForControl('fullName');
      if (fullNameControl.errors?.['required']) {
        this.validationErrors.push({
          field: 'fullName',
          message: 'Το ονοματεπώνυμο είναι υποχρεωτικό',
          element,
        });
      } else if (fullNameControl.errors?.['minlength']) {
        this.validationErrors.push({
          field: 'fullName',
          message: 'Το ονοματεπώνυμο πρέπει να έχει τουλάχιστον 5 χαρακτήρες',
          element,
        });
      }
    }

    const emailControl = this.form.get('email');
    if (emailControl?.invalid) {
      const element = this.findElementForControl('email');
      if (emailControl.errors?.['required']) {
        this.validationErrors.push({
          field: 'email',
          message: 'Το email είναι υποχρεωτικό',
          element,
        });
      } else if (emailControl.errors?.['email']) {
        this.validationErrors.push({
          field: 'email',
          message: 'Παρακαλώ εισάγετε ένα έγκυρο email',
          element,
        });
      }
    }

    // Phone Validation
    const phoneControl = this.form.get('phoneNumber');
    if (phoneControl?.invalid) {
      const element = this.findElementForControl('phoneNumber');
      if (phoneControl.errors?.['required']) {
        this.validationErrors.push({
          field: 'phoneNumber',
          message: 'Ο αριθμός τηλεφώνου είναι υποχρεωτικός',
          element,
        });
      } else if (phoneControl.errors?.['pattern']) {
        this.validationErrors.push({
          field: 'phoneNumber',
          message: 'Παρακαλώ εισάγετε έναν έγκυρο αριθμό τηλεφώνου',
          element,
        });
      }
    }

    // Location Validation
    const locationForm = this.getLocationForm();
    const cityControl = locationForm.get('city');
    if (cityControl?.invalid) {
      const element = this.findElementForControl('city', 'location');
      if (cityControl.errors?.['required']) {
        this.validationErrors.push({
          field: 'city',
          message: 'Η πόλη είναι υποχρεωτική',
          element,
        });
      }
    }

    const zipCodeControl = locationForm.get('zipCode');
    if (zipCodeControl?.invalid) {
      const element = this.findElementForControl('zipCode', 'location');
      if (zipCodeControl.errors?.['required']) {
        this.validationErrors.push({
          field: 'zipCode',
          message: 'Ο ταχυδρομικός κώδικας είναι υποχρεωτικός',
          element,
        });
      } else if (zipCodeControl.errors?.['pattern']) {
        this.validationErrors.push({
          field: 'zipCode',
          message: 'Παρακαλώ εισάγετε έναν έγκυρο ταχυδρομικό κώδικα',
          element,
        });
      }
    }

    const addressControl = locationForm.get('address');
    if (addressControl?.invalid) {
      const element = this.findElementForControl('address', 'location');
      if (addressControl.errors?.['required']) {
        this.validationErrors.push({
          field: 'address',
          message: 'Η διεύθυνση είναι υποχρεωτική',
          element,
        });
      }
    }

    const numberControl = locationForm.get('number');
    if (numberControl?.invalid) {
      const element = this.findElementForControl('number', 'location');
      if (numberControl.errors?.['required']) {
        this.validationErrors.push({
          field: 'number',
          message: 'Ο αριθμός είναι υποχρεωτικός',
          element,
        });
      } else if (numberControl.errors?.['pattern']) {
        this.validationErrors.push({
          field: 'number',
          message: 'Παρακαλώ εισάγετε έναν έγκυρο αριθμό',
          element,
        });
      }
    }
  }

  private findElementForControl(
    controlName: string,
    groupName?: string
  ): HTMLElement | undefined {
    let selector = groupName
      ? `[formGroupName="${groupName}"] [formControlName="${controlName}"]`
      : `[formControlName="${controlName}"]`;

    let element = this.formContainer?.nativeElement.querySelector(
      selector
    ) as HTMLElement;

    if (!element) {
      element = this.formContainer?.nativeElement.querySelector(
        `#${controlName}`
      ) as HTMLElement;
    }

    return element;
  }

  scrollToErrorField(error: ValidationError): void {
    if (error.element) {
      this.highlightElement(error.element);
      error.element.scrollIntoView({ behavior: 'smooth', block: 'center' });
      if (
        error.element instanceof HTMLInputElement ||
        error.element instanceof HTMLTextAreaElement ||
        error.element instanceof HTMLSelectElement
      ) {
        error.element.focus();
      }
    }
  }

  private highlightElement(element: HTMLElement): void {
    element.classList.add('highlight-error');
    setTimeout(() => {
      element.classList.remove('highlight-error');
    }, 1500);
  }

  private scrollToFirstError(): void {
    if (this.validationErrors.length > 0) {
      const errorSummary =
        this.formContainer?.nativeElement.querySelector('.bg-red-500\\/10');
      if (errorSummary) {
        errorSummary.scrollIntoView({ behavior: 'smooth', block: 'start' });
      } else {
        const firstError = this.validationErrors[0];
        if (firstError.element) {
          this.scrollToErrorField(firstError);
        }
      }
    }
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\auth\sign-up-steps\preferences\preferences.component.ts
```
import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormGroup, ReactiveFormsModule } from '@angular/forms';
import { ShelterInfoComponent } from '../shelter-info/shelter-info.component';

@Component({
  selector: 'app-preferences',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, ShelterInfoComponent],
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: `
    <div class="space-y-6">
      <app-shelter-info
        [form]="form"
        [isLoading]="isLoading"
        (back)="back.emit()"
        (submit)="submit.emit()"
      ></app-shelter-info>
    </div>
  `
})
export class PreferencesComponent {
  @Input() form!: FormGroup;
  @Input() isLoading = false;
  @Output() back = new EventEmitter<void>();
  @Output() submit = new EventEmitter<void>();
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\auth\sign-up-steps\shelter-info\shelter-info.component.html
```
<div [formGroup]="form" class="space-y-6" #formContainer>
  <h2 class="text-2xl font-bold text-white mb-6">Πληροφορίες Καταφυγίου</h2>

  <app-form-input
    [form]="getShelterForm()"
    controlName="shelterName"
    type="text"
    placeholder="Όνομα Καταφυγίου"
  >
  </app-form-input>

  <app-text-area-input
    [form]="getShelterForm()"
    controlName="description"
    label="Περιγραφή"
    placeholder="Περιγράψτε το καταφύγιό σας"
    [rows]="4"
    hint="Παρακαλώ παρέχετε μια σύντομη περιγραφή του καταφυγίου σας (τουλάχιστον 10 χαρακτήρες)"
    (valueChange)="updateDescription($event)"
  >
  </app-text-area-input>

  <app-form-input
    [form]="getShelterForm()"
    controlName="website"
    type="url"
    placeholder="Ιστοσελίδα (Προαιρετικό)"
  >
  </app-form-input>

  <!-- Social Media Section -->
  <div class="space-y-4">
    <h3 class="text-lg font-medium text-white">
      Κοινωνικά Δίκτυα (Προαιρετικό)
    </h3>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <app-form-input
        [form]="getSocialMediaForm()"
        controlName="facebook"
        type="url"
        placeholder="Facebook URL"
      >
      </app-form-input>

      <app-form-input
        [form]="getSocialMediaForm()"
        controlName="instagram"
        type="url"
        placeholder="Instagram URL"
      >
      </app-form-input>
    </div>
  </div>

  <!-- Operating Hours Section -->
  <div class="space-y-4">
    <div class="flex items-center justify-between">
      <h3 class="text-lg font-medium text-white">Ώρες Λειτουργίας</h3>
      <span class="text-sm text-gray-400">(Προαιρετικό)</span>
    </div>

    <div class="bg-gray-800/50 rounded-xl p-4 space-y-4">
      <p class="text-sm text-gray-400">
        Αφήστε όλες τις μέρες κενές ή συμπληρώστε τις ώρες για όλες τις μέρες
      </p>
      <div
        *ngFor="let day of days"
        class="mb-4 border border-gray-700/50 rounded-xl p-4 hover:border-gray-600/70 transition-colors"
      >
        <div class="flex justify-between items-center mb-3">
          <h4 class="text-white font-medium">{{ day }}</h4>

          <!-- Closed toggle -->
          <div class="flex items-center">
            <label class="relative inline-flex items-center cursor-pointer">
              <input
                type="checkbox"
                [(ngModel)]="closedDays[day]"
                [ngModelOptions]="{ standalone: true }"
                (change)="onClosedChange(day)"
                class="sr-only peer"
              />
              <div
                class="w-11 h-6 bg-gray-700 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-red-600"
              ></div>
            </label>
            <span class="ml-3 text-sm text-gray-300">{{
              closedDays[day] ? "Κλειστό" : "Ανοιχτό"
            }}</span>
          </div>
        </div>

        <!-- Time selection (shown only when not closed) -->
        <div *ngIf="!closedDays[day]" class="flex items-center justify-between">
          <div class="flex-1 mr-4">
            <label class="block text-sm text-gray-400 mb-1"
              >Ώρα ανοίγματος</label
            >
            <input
              type="text"
              [value]="openTimes[day]"
              (input)="onTimeInput($event, day, 'open')"
              (blur)="formatTime(day, 'open')"
              class="w-full px-4 py-3 bg-white/5 border border-white/10 rounded-xl text-white focus:border-primary-500/50 focus:ring-2 focus:ring-primary-500/20 focus:outline-none"
              placeholder="HH:MM"
              pattern="([01]?[0-9]|2[0-3]):[0-5][0-9]"
            />
          </div>

          <span class="text-gray-400 mx-2 self-end mb-3">έως</span>

          <div class="flex-1 ml-4">
            <label class="block text-sm text-gray-400 mb-1"
              >Ώρα κλεισίματος</label
            >
            <input
              type="text"
              [value]="closeTimes[day]"
              (input)="onTimeInput($event, day, 'close')"
              (blur)="formatTime(day, 'close')"
              class="w-full px-4 py-3 bg-white/5 border border-white/10 rounded-xl text-white focus:border-primary-500/50 focus:ring-2 focus:ring-primary-500/20 focus:outline-none"
              placeholder="HH:MM"
              pattern="([01]?[0-9]|2[0-3]):[0-5][0-9]"
            />
          </div>
        </div>

        <!-- Error message -->
        <div *ngIf="timeErrors[day]" class="text-red-400 text-sm mt-2">
          {{ timeErrors[day] }}
        </div>
      </div>
    </div>
  </div>

  <!-- Error summary section -->
  <div
    *ngIf="showErrorSummary"
    class="bg-red-500/10 border border-red-500/30 rounded-lg p-4 my-4 animate-fadeIn"
  >
    <h3 class="text-red-400 font-medium mb-2 flex items-center">
      <span class="mr-2">⚠️</span> Παρακαλώ διορθώστε τα παρακάτω σφάλματα:
    </h3>
    <ul class="list-disc list-inside text-sm text-red-400 space-y-1">
      <li
        *ngFor="let error of validationErrors"
        class="cursor-pointer hover:underline"
        (click)="scrollToErrorField(error)"
      >
        {{ error.message }}
      </li>
    </ul>
  </div>
  <app-error-message-banner [error]="error"></app-error-message-banner>

  <div class="flex justify-between pt-6">
    <button
      type="button"
      (click)="back.emit()"
      class="px-6 py-2 border border-gray-600 text-gray-300 rounded-lg hover:bg-white/5 transition-all duration-300"
    >
      Πίσω
    </button>

    <button
      type="button"
      (click)="submitForm()"
      [disabled]="isLoading"
      class="relative px-6 py-2 bg-gradient-to-r from-primary-600 to-accent-600 text-white rounded-lg hover:shadow-lg hover:shadow-primary-500/20 transition-all duration- 300 transform hover:-translate-y-1 disabled:opacity-70 disabled:transform-none disabled:hover:shadow-none"
    >
      <span [class.opacity-0]="isLoading">Ολοκλήρωση Εγγραφής</span>

      <!-- Loading Spinner -->
      <div
        *ngIf="isLoading"
        class="absolute inset-0 flex items-center justify-center"
      >
        <svg
          class="animate-spin h-5 w-5 text-white"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
        >
          <circle
            class="opacity-25"
            cx="12"
            cy="12"
            r="10"
            stroke="currentColor"
            stroke-width="4"
          ></circle>
          <path
            class="opacity-75"
            fill="currentColor"
            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
          ></path>
        </svg>
      </div>
    </button>
  </div>
</div>

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\auth\sign-up-steps\shelter-info\shelter-info.component.ts
```
import {
  Component,
  Input,
  Output,
  EventEmitter,
  ChangeDetectionStrategy,
  ElementRef,
  ViewChild,
  ChangeDetectorRef,
  OnInit,
} from '@angular/core';
import { CommonModule } from '@angular/common';
import {
  FormGroup,
  ReactiveFormsModule,
  FormsModule,
  AbstractControl,
} from '@angular/forms';
import { NgIconsModule } from '@ng-icons/core';
import { FormInputComponent } from 'src/app/common/ui/form-input.component';
import { TextAreaInputComponent } from 'src/app/common/ui/text-area-input.component';
import {
  ErrorMessageBannerComponent,
  ErrorDetails,
} from 'src/app/common/ui/error-message-banner.component';

@Component({
  selector: 'app-shelter-info',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    FormsModule,
    FormInputComponent,
    TextAreaInputComponent,
    NgIconsModule,
    ErrorMessageBannerComponent,
  ],
  templateUrl: './shelter-info.component.html',
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class ShelterInfoComponent implements OnInit {
  @Input() form!: FormGroup;
  @Input() isLoading = false;
  @Output() back = new EventEmitter<void>();
  @Output() submit = new EventEmitter<void>();
  @ViewChild('formContainer') formContainer!: ElementRef;

  error?: ErrorDetails;

  days = [
    'Δευτέρα',
    'Τρίτη',
    'Τετάρτη',
    'Πέμπτη',
    'Παρασκευή',
    'Σάββατο',
    'Κυριακή',
  ];

  closedDays: { [key: string]: boolean } = {};
  openTimes: { [key: string]: string } = {};
  closeTimes: { [key: string]: string } = {};
  timeErrors: { [key: string]: string | null } = {};
  operatingHoursModified: boolean = false;

  validationErrors: {
    field: string;
    message: string;
    element?: HTMLElement;
  }[] = [];
  showErrorSummary = false;

  constructor(private cdr: ChangeDetectorRef) {
    this.days.forEach((day) => {
      this.closedDays[day] = false;
      this.openTimes[day] = '';
      this.closeTimes[day] = '';
      this.timeErrors[day] = null;
    });
  }

  ngOnInit() {
    this.days.forEach((day) => {
      const dayKey = this.getDayKey(day);
      const operatingHours = this.getOperatingHoursForm();
      const value = operatingHours.get(dayKey)?.value;

      if (value === 'closed') {
        this.closedDays[day] = true;
        this.operatingHoursModified = true;
      } else if (value && value.includes(',')) {
        const [open, close] = value.split(',');
        if (open) {
          this.openTimes[day] = open;
          this.operatingHoursModified = true;
        }
        if (close) {
          this.closeTimes[day] = close;
          this.operatingHoursModified = true;
        }
      } else {
        this.openTimes[day] = '';
        this.closeTimes[day] = '';
        operatingHours.get(dayKey)?.setValue('');
      }
    });

    this.updateOperatingHoursValidators();
  }

  getShelterForm(): FormGroup {
    return this.form.get('shelter') as FormGroup;
  }

  getSocialMediaForm(): FormGroup {
    return this.getShelterForm().get('socialMedia') as FormGroup;
  }

  getOperatingHoursForm(): FormGroup {
    return this.getShelterForm().get('operatingHours') as FormGroup;
  }

  getOperatingHoursValue(day: string): string {
    const dayKey = this.getDayKey(day);
    const operatingHours = this.getOperatingHoursForm();
    return operatingHours.get(dayKey)?.value || '';
  }

  isDescriptionInvalid(): boolean {
    const control = this.getShelterForm().get('description');
    return !!(control?.invalid && (control?.touched || control?.dirty));
  }

  updateDescription(value: string): void {
    const descriptionControl = this.getShelterForm().get('description');
    if (descriptionControl) {
      descriptionControl.setValue(value);
      descriptionControl.markAsDirty();
      descriptionControl.updateValueAndValidity();
      this.cdr.markForCheck();
    }
  }

  onClosedChange(day: string): void {
    const dayKey = this.getDayKey(day);
    const operatingHours = this.getOperatingHoursForm();

    this.operatingHoursModified = true;

    if (this.closedDays[day]) {
      operatingHours.get(dayKey)?.setValue('closed');
      this.timeErrors[day] = null;
    } else {
      this.openTimes[day] = '';
      this.closeTimes[day] = '';
      operatingHours.get(dayKey)?.setValue('');
    }

    this.updateOperatingHoursValidators();
    this.cdr.markForCheck();
  }

  onTimeInput(event: Event, day: string, type: 'open' | 'close'): void {
    const input = event.target as HTMLInputElement;
    let value = input.value;

    this.operatingHoursModified = true;
    value = value.replace(/[^\d:]/g, '');

    if (value.length > 0) {
      if (!value.includes(':') && value.length > 2) {
        value = value.substring(0, 2) + ':' + value.substring(2);
      }

      if (value.length > 5) {
        value = value.substring(0, 5);
      }

      if (value.includes(':')) {
        const hours = value.split(':')[0];
        if (hours.length === 2) {
          const hoursNum = parseInt(hours, 10);
          if (hoursNum > 23) {
            value = '23' + value.substring(2);
          }
        }
      }

      if (value.includes(':') && value.length > 3) {
        const minutes = value.split(':')[1];
        if (minutes.length === 2) {
          const minutesNum = parseInt(minutes, 10);
          if (minutesNum > 59) {
            value = value.split(':')[0] + ':59';
          }
        }
      }
    }

    if (type === 'open') {
      this.openTimes[day] = value;
    } else {
      this.closeTimes[day] = value;
    }

    input.value = value;

    if (this.openTimes[day] && this.closeTimes[day]) {
      this.updateFormValue(day);
      this.validateTimeRange(day);
    }

    this.updateOperatingHoursValidators();
  }

  formatTime(day: string, type: 'open' | 'close'): void {
    let time = type === 'open' ? this.openTimes[day] : this.closeTimes[day];

    if (time) {
      time = time.replace(/[^\d:]/g, '');

      if (!time.includes(':') && time.length > 0) {
        if (time.length === 1) {
          time = '0' + time + ':00';
        } else if (time.length === 2) {
          time = time + ':00';
        } else {
          time = time.substring(0, 2) + ':' + time.substring(2);
        }
      }

      let [hours, minutes] = time.split(':');

      let hoursNum = parseInt(hours || '0', 10);
      if (isNaN(hoursNum) || hoursNum > 23) hoursNum = 0;
      hours = hoursNum.toString().padStart(2, '0');

      let minutesNum = parseInt(minutes || '0', 10);
      if (isNaN(minutesNum) || minutesNum > 59) minutesNum = 0;
      minutes = minutesNum.toString().padStart(2, '0');

      time = `${hours}:${minutes}`;

      if (type === 'open') {
        this.openTimes[day] = time;
      } else {
        this.closeTimes[day] = time;
      }

      this.updateFormValue(day);
      this.validateTimeRange(day);
      this.updateOperatingHoursValidators();
      this.cdr.markForCheck();
    }
  }

  updateFormValue(day: string): void {
    const dayKey = this.getDayKey(day);
    const operatingHours = this.getOperatingHoursForm();

    if (!this.closedDays[day]) {
      if (
        this.isValidTimeFormat(this.openTimes[day]) &&
        this.isValidTimeFormat(this.closeTimes[day])
      ) {
        const timeValue = `${this.openTimes[day]},${this.closeTimes[day]}`;
        operatingHours.get(dayKey)?.setValue(timeValue);
        operatingHours.get(dayKey)?.markAsTouched();
        operatingHours.get(dayKey)?.markAsDirty();
      } else {
        operatingHours.get(dayKey)?.setValue('');
      }
    }
  }

  isValidTimeFormat(time: string): boolean {
    return /^([01]\d|2[0-3]):([0-5]\d)$/.test(time);
  }

  validateTimeRange(day: string): void {
    const openTime = this.openTimes[day];
    const closeTime = this.closeTimes[day];

    this.timeErrors[day] = null;

    if (openTime && closeTime) {
      if (!this.isValidTimeFormat(openTime)) {
        this.timeErrors[day] =
          'Η ώρα ανοίγματος πρέπει να είναι σε μορφή ΩΩ:ΛΛ (π.χ. 09:00)';
        this.setTimeRangeError(day);
        return;
      }

      if (!this.isValidTimeFormat(closeTime)) {
        this.timeErrors[day] =
          'Η ώρα κλεισίματος πρέπει να είναι σε μορφή ΩΩ:ΛΛ (π.χ. 17:00)';
        this.setTimeRangeError(day);
        return;
      }

      if (openTime >= closeTime) {
        this.timeErrors[day] =
          'Η ώρα κλεισίματος πρέπει να είναι μετά την ώρα ανοίγματος';
        this.setTimeRangeError(day);
        return;
      }

      const dayKey = this.getDayKey(day);
      const control = this.getOperatingHoursForm().get(dayKey);
      if (control?.errors?.['invalidTimeRange']) {
        const errors = { ...control.errors };
        delete errors['invalidTimeRange'];
        if (Object.keys(errors).length === 0) {
          control.setErrors(null);
        } else {
          control.setErrors(errors);
        }
      }
    } else if ((openTime && !closeTime) || (!openTime && closeTime)) {
      this.timeErrors[day] = 'Πρέπει να συμπληρώσετε και τις δύο ώρες';
      this.setTimeRangeError(day);
    }
  }

  setTimeRangeError(day: string): void {
    const dayKey = this.getDayKey(day);
    this.getOperatingHoursForm()
      .get(dayKey)
      ?.setErrors({ invalidTimeRange: true });
  }

  getDayKey(day: string): string {
    const dayMap: { [key: string]: string } = {
      Δευτέρα: 'monday',
      Τρίτη: 'tuesday',
      Τετάρτη: 'wednesday',
      Πέμπτη: 'thursday',
      Παρασκευή: 'friday',
      Σάββατο: 'saturday',
      Κυριακή: 'sunday',
    };
    return dayMap[day] || day.toLowerCase();
  }

  hasAnyOperatingHoursSet(): boolean {
    return this.days.some((day) => {
      if (this.closedDays[day]) return true;

      const dayKey = this.getDayKey(day);
      const value = this.getOperatingHoursForm().get(dayKey)?.value;
      return value && value !== '' && value !== 'closed';
    });
  }

  updateOperatingHoursValidators(): void {
    const hasAnyHoursSet = this.hasAnyOperatingHoursSet();
    const operatingHoursForm = this.getOperatingHoursForm();

    this.days.forEach((day) => {
      const dayKey = this.getDayKey(day);
      const control = operatingHoursForm.get(dayKey);

      if (hasAnyHoursSet) {
        if (this.closedDays[day]) {
          control?.setErrors(null);
        } else if (!this.openTimes[day] || !this.closeTimes[day]) {
          this.timeErrors[day] =
            'Πρέπει να ορίσετε ώρες λειτουργίας ή να επιλέξετε "Κλειστό"';
          control?.setErrors({ required: true });
        } else {
          this.validateTimeRange(day);
        }
      } else {
        control?.setErrors(null);
        this.timeErrors[day] = null;
      }
    });

    this.cdr.markForCheck();
  }

  hasAnyNonClosedDay(): boolean {
    return this.days.some((day) => {
      if (!this.closedDays[day]) {
        const dayKey = this.getDayKey(day);
        const value = this.getOperatingHoursForm().get(dayKey)?.value;
        return value && value !== '' && value !== 'closed';
      }
      return false;
    });
  }

  validateOperatingHours(): void {
    let hasInvalidDay = false;

    this.days.forEach((day) => {
      const dayKey = this.getDayKey(day);
      const control = this.getOperatingHoursForm().get(dayKey);
      const value = control?.value;

      if (this.closedDays[day]) {
        control?.setErrors(null);
        this.timeErrors[day] = null;
        return;
      }

      if (!value || value === '') {
        this.timeErrors[day] =
          'Πρέπει να ορίσετε ώρες λειτουργίας ή να επιλέξετε "Κλειστό"';
        control?.setErrors({ required: true });
        hasInvalidDay = true;
      } else if (value !== 'closed') {
        if (control?.errors?.['invalidTimeRange']) {
          hasInvalidDay = true;
        }
      }
    });

    if (hasInvalidDay) {
      this.validationErrors.push({
        field: 'operatingHours',
        message:
          'Πρέπει να ορίσετε ώρες λειτουργίας για όλες τις ημέρες ή να τις επιλέξετε ως "Κλειστό"',
      });
    }
  }

  private markFormGroupTouched(formGroup: FormGroup) {
    Object.keys(formGroup.controls).forEach((key) => {
      const control = formGroup.get(key);
      if (control instanceof FormGroup) {
        this.markFormGroupTouched(control);
      } else if (control) {
        control.markAsTouched();
        control.markAsDirty();
        control.updateValueAndValidity();
      }
    });
    this.cdr.markForCheck();
  }

  private collectValidationErrors(): void {
    const shelterNameControl = this.getShelterForm().get('shelterName');
    if (shelterNameControl?.invalid) {
      const element = this.findElementForControl('shelterName');
      if (shelterNameControl.errors?.['required']) {
        this.validationErrors.push({
          field: 'shelterName',
          message: 'Το όνομα καταφυγίου είναι υποχρεωτικό',
          element,
        });
      } else if (shelterNameControl.errors?.['minlength']) {
        this.validationErrors.push({
          field: 'shelterName',
          message:
            'Το όνομα καταφυγίου πρέπει να έχει τουλάχιστον 3 χαρακτήρες',
          element,
        });
      }
    }

    const descriptionControl = this.getShelterForm().get('description');
    if (descriptionControl?.invalid) {
      const element = this.findElementForControl('description');
      if (descriptionControl.errors?.['required']) {
        this.validationErrors.push({
          field: 'description',
          message: 'Η περιγραφή είναι υποχρεωτική',
          element,
        });
      } else if (descriptionControl.errors?.['minlength']) {
        this.validationErrors.push({
          field: 'description',
          message: 'Η περιγραφή πρέπει να έχει τουλάχιστον 10 χαρακτήρες',
          element,
        });
      }
    }

    const websiteControl = this.getShelterForm().get('website');
    if (websiteControl?.invalid && websiteControl.value) {
      const element = this.findElementForControl('website');
      this.validationErrors.push({
        field: 'website',
        message: 'Η διεύθυνση ιστοσελίδας δεν είναι έγκυρη',
        element,
      });
    }

    const facebookControl = this.getSocialMediaForm().get('facebook');
    if (facebookControl?.invalid && facebookControl.value) {
      const element = this.findElementForControl('facebook', 'socialMedia');
      this.validationErrors.push({
        field: 'facebook',
        message: 'Η διεύθυνση πρέπει να περιέχει "facebook"',
        element,
      });
    }

    const instagramControl = this.getSocialMediaForm().get('instagram');
    if (instagramControl?.invalid && instagramControl.value) {
      const element = this.findElementForControl('instagram', 'socialMedia');
      this.validationErrors.push({
        field: 'instagram',
        message: 'Η διεύθυνση πρέπει να περιέχει "instagram"',
        element,
      });
    }

    if (this.hasAnyOperatingHoursSet()) {
      const operatingHoursForm = this.getOperatingHoursForm();

      this.days.forEach((day) => {
        const dayKey = this.getDayKey(day);
        const control = operatingHoursForm.get(dayKey);

        if (control?.invalid && !this.closedDays[day]) {
          const dayElement = this.findDayElement(day);

          if (control.errors?.['invalidTimeRange']) {
            this.validationErrors.push({
              field: dayKey,
              message:
                this.timeErrors[day] ||
                `Σφάλμα στις ώρες λειτουργίας για ${day}`,
              element: dayElement,
            });
          } else if (control.errors?.['required']) {
            this.validationErrors.push({
              field: dayKey,
              message: `Πρέπει να ορίσετε ώρες λειτουργίας ή να επιλέξετε "Κλειστό" για ${day}`,
              element: dayElement,
            });
          }
        }
      });
    }
  }

  private findElementForControl(
    controlName: string,
    groupName?: string
  ): HTMLElement | undefined {
    let selector = groupName
      ? `[formcontrolname="${controlName}"]`
      : `[formcontrolname="${controlName}"]`;

    let element = this.formContainer?.nativeElement.querySelector(
      selector
    ) as HTMLElement;

    if (!element) {
      element = this.formContainer?.nativeElement.querySelector(
        `#${controlName}`
      ) as HTMLElement;
    }

    if (!element && controlName === 'description') {
      element = this.formContainer?.nativeElement.querySelector(
        'textarea'
      ) as HTMLElement;
    }

    return element;
  }

  private findDayElement(day: string): HTMLElement | undefined {
    if (!this.formContainer) return undefined;

    const dayElements = this.formContainer.nativeElement.querySelectorAll('h4');
    let dayElement: HTMLElement | undefined;

    for (let i = 0; i < dayElements.length; i++) {
      if (dayElements[i].textContent?.trim() === day) {
        dayElement = dayElements[i].closest(
          '.border-gray-700\\/50'
        ) as HTMLElement;
        break;
      }
    }

    return dayElement;
  }

  scrollToErrorField(error: {
    field: string;
    message: string;
    element?: HTMLElement;
  }): void {
    if (error.element) {
      this.highlightElement(error.element);
      error.element.scrollIntoView({ behavior: 'smooth', block: 'center' });
      if (
        error.element instanceof HTMLInputElement ||
        error.element instanceof HTMLTextAreaElement ||
        error.element instanceof HTMLSelectElement
      ) {
        error.element.focus();
      }
    } else {
      const element = this.findElementForControl(error.field);
      if (element) {
        this.highlightElement(element);
        element.scrollIntoView({ behavior: 'smooth', block: 'center' });
        if (
          element instanceof HTMLInputElement ||
          element instanceof HTMLTextAreaElement ||
          element instanceof HTMLSelectElement
        ) {
          element.focus();
        }
      }
    }
  }

  private highlightElement(element: HTMLElement): void {
    element.classList.add('highlight-error');
    setTimeout(() => {
      element.classList.remove('highlight-error');
    }, 1500);
  }

  private scrollToFirstInvalidField(): void {
    setTimeout(() => {
      try {
        if (this.validationErrors.length > 0) {
          const errorSummary =
            this.formContainer?.nativeElement.querySelector('.bg-red-500\\/10');
          if (errorSummary) {
            errorSummary.scrollIntoView({ behavior: 'smooth', block: 'start' });
          } else {
            const firstError = this.validationErrors[0];
            if (firstError.element) {
              this.scrollToErrorField(firstError);
            } else {
              const invalidControls = this.findInvalidControls(
                this.getShelterForm()
              );
              if (invalidControls.length > 0) {
                const controlName = this.getControlName(invalidControls[0]);
                const element = this.findElementForControl(controlName);
                if (element) {
                  this.highlightElement(element);
                  element.scrollIntoView({
                    behavior: 'smooth',
                    block: 'center',
                  });
                }
              }
            }
          }
        }
      } catch (error) {
        console.error('Error scrolling to invalid field:', error);
        if (this.formContainer) {
          this.formContainer.nativeElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start',
          });
        }
      }
    }, 100);
  }

  private findInvalidControls(formGroup: FormGroup): AbstractControl[] {
    const invalidControls: AbstractControl[] = [];
    const controls = formGroup.controls;

    Object.keys(controls).forEach((controlName) => {
      const control = controls[controlName];
      if (control instanceof FormGroup) {
        invalidControls.push(...this.findInvalidControls(control));
      } else if (control && control.invalid) {
        invalidControls.push(control);
      }
    });

    return invalidControls;
  }

  private getControlName(control: AbstractControl): string {
    let controlName = '';

    const shelterForm = this.getShelterForm();
    Object.keys(shelterForm.controls).forEach((name) => {
      if (shelterForm.controls[name] === control) {
        controlName = name;
      }
    });

    if (!controlName) {
      const socialMediaForm = this.getSocialMediaForm();
      Object.keys(socialMediaForm.controls).forEach((name) => {
        if (socialMediaForm.controls[name] === control) {
          controlName = name;
        }
      });

      if (!controlName) {
        const operatingHoursForm = this.getOperatingHoursForm();
        Object.keys(operatingHoursForm.controls).forEach((name) => {
          if (operatingHoursForm.controls[name] === control) {
            controlName = name;
          }
        });
      }
    }

    return controlName;
  }

  submitForm(): void {
    this.validationErrors = [];
    this.showErrorSummary = false;

    this.markFormGroupTouched(this.getShelterForm());

    const operatingHoursForm = this.getOperatingHoursForm();
    this.days.forEach((day) => {
      const dayKey = this.getDayKey(day);
      const control = operatingHoursForm.get(dayKey);

      if (this.closedDays[day]) {
        control?.setErrors(null);
        this.timeErrors[day] = null;
      }
    });

    const needsHoursValidation =
      this.operatingHoursModified && this.hasAnyNonClosedDay();

    if (!this.hasAnyOperatingHoursSet()) {
      this.days.forEach((day) => {
        const dayKey = this.getDayKey(day);
        operatingHoursForm.get(dayKey)?.setErrors(null);
        this.timeErrors[day] = null;
      });
      operatingHoursForm.updateValueAndValidity();
      this.operatingHoursModified = false;
    } else if (needsHoursValidation) {
      this.validateOperatingHours();
    }

    this.getShelterForm().updateValueAndValidity({
      onlySelf: false,
      emitEvent: true,
    });

    const isNameValid =
      !!this.getShelterForm().get('shelterName')?.value &&
      !this.getShelterForm().get('shelterName')?.errors;
    const isDescriptionValid =
      !!this.getShelterForm().get('description')?.value &&
      !this.getShelterForm().get('description')?.errors;

    if (isNameValid && isDescriptionValid) {
      this.submit.emit();
      return;
    }

    this.collectValidationErrors();
    this.showErrorSummary = this.validationErrors.length > 0;
    this.scrollToFirstInvalidField();
    this.cdr.markForCheck();
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\auth\sign-up-steps\verified.component.ts
```
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { AuthService } from 'src/app/services/auth.service';
import { UserRoundCogIcon } from 'lucide-angular';
import { UserRole } from 'src/app/common/enum/user-role.enum';
import { User } from 'src/app/models/user/user.model';

@Component({
  selector: 'app-verified',
  template: `
    <div class="min-h-screen flex items-center justify-center bg-gray-900">
      <!-- Background elements -->
      <div class="fixed inset-0 z-0">
        <div
          class="absolute inset-0 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900"
        ></div>
        <div
          class="absolute inset-0 bg-gradient-to-br from-primary-900/20 via-secondary-900/20 to-accent-900/20 animate-gradient"
        ></div>
        <div
          class="absolute inset-0 bg-gradient-radial from-transparent via-primary-900/10 to-transparent"
        ></div>
      </div>

      <div class="max-w-md w-full mx-4 z-10">
        <div
          class="bg-white/5 backdrop-blur-lg rounded-2xl shadow-xl p-8 space-y-8 border border-white/10 text-center"
        >
          <!-- Loading State -->
          <div *ngIf="isLoading" class="space-y-4">
            <div
              class="w-16 h-16 mx-auto rounded-full border-4 border-primary-500 border-t-transparent animate-spin"
            ></div>
            <p class="text-gray-400">Επαλήθευση email σε εξέλιξη...</p>
          </div>

          <!-- Success State -->
          <div *ngIf="isVerified" class="space-y-4">
            <div
              class="w-16 h-16 mx-auto bg-gradient-to-r from-primary-500 to-accent-500 rounded-full flex items-center justify-center"
            >
              <ng-icon
                name="lucideCheck"
                [size]="'32'"
                class="text-white"
              ></ng-icon>
            </div>
            <h2 class="text-2xl font-bold text-white">Επιτυχής Επαλήθευση!</h2>
            <p class="text-gray-400">
              {{ getVerificationMessage() }}
            </p>
          </div>

          <!-- Error State -->
          <div *ngIf="!isVerified && !isLoading" class="space-y-4">
            <div
              class="w-16 h-16 mx-auto bg-red-500/20 rounded-full flex items-center justify-center"
            >
              <ng-icon
                name="lucideX"
                [size]="'32'"
                class="text-red-500"
              ></ng-icon>
            </div>
            <h2 class="text-2xl font-bold text-white">Σφάλμα Επαλήθευσης</h2>
            <p class="text-red-400">{{ error }}</p>
          </div>

          <!-- Action Button -->
          <div class="pt-4">
            <button
              (click)="navigateToLogin()"
              class="w-full px-4 py-3 bg-gradient-to-r from-primary-600 to-accent-600 text-white rounded-xl hover:shadow-lg hover:shadow-primary-500/20 transition-all duration-300 transform hover:-translate-y-1"
            >
              Επιστροφή στην Σύνδεση
            </button>
          </div>
        </div>
      </div>
    </div>
  `,
})
export class VerifiedComponent implements OnInit {
  isLoading = true;
  isVerified = false;
  error: string | null = null;
  userRoles: UserRole[] | null = null;

  constructor(
    private readonly route: ActivatedRoute,
    private readonly router: Router,
    private readonly authService: AuthService
  ) {}

  ngOnInit(): void {
    const token: string | null = this.route.snapshot.queryParamMap.get(
      'token'
    ) as string;

    const complete: string | null = this.route.snapshot.queryParamMap.get(
      'complete'
    ) as string;

    const userId: string | null = this.route.snapshot.queryParamMap.get(
      'identification'
    ) as string;

    if (complete && userId) {
      this.handleAlreadyVerified(userId);
      return;
    }

    if (!token) {
      this.error = 'Δεν έχετε επαληθέυση τον λογαριασμό σας.';
      this.isLoading = false;
      return;
    }

    this.authService.verifyEmail(token).subscribe(
      (model: User) => {
        this.isVerified = true;
        this.isLoading = false;
        this.error = null;
        this.userRoles = model.roles!;
      },
      (error) => {
        this.isVerified = false;
        this.isLoading = false;
        console.error('Email verification error:', error);
        this.error = 'Το email επιβεβαίωσης δεν ισχύει πια.';
      }
    );
  }

  getVerificationMessage(): string {
    if (this.userRoles?.includes(UserRole.Shelter)) {
      return 'Η επαλήθευση ολοκληρώθηκε. Ένας διαχειριστής θα εξετάσει την εγγραφή σας. Παρακολουθείτε το email σας για ενημερώσεις.';
    }
    return 'Το email σας έχει επαληθευτεί επιτυχώς.';
  }

  navigateToLogin(): void {
    this.router.navigate(['/auth/login']);
  }

  handleAlreadyVerified(userId: string): void {
    this.authService.verifyUser(userId).subscribe(
      () => {
        this.isVerified = true;
        this.isLoading = false;
        this.error = null;
      },
      (error) => {
        this.isVerified = false;
        this.isLoading = false;
        console.error('Email verification error:', error);
        this.error = 'Αποτυχία επιβεβαίωσης χρήστη';
      }
    );
  }

  isRole(complete: string): UserRole | null {
    let role: UserRole | null = null;
    const numericRole = Number(complete);
    if (!isNaN(numericRole)) {
      role = numericRole as UserRole;
    } else {
      // Fallback: Map string values
      switch (complete.toLowerCase()) {
        case 'user':
          role = UserRole.User;
          break;
        case 'shelter':
          role = UserRole.Shelter;
          break;
        case 'admin':
          role = UserRole.Admin;
          break;
        default:
          throw new Error('Invalid role');
      }
    }

    return role;
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\auth\signup.component.css
```
/* Gradient Animation */
@keyframes gradient {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

.animate-gradient {
  background-size: 200% 200%;
  animation: gradient 8s linear infinite;
}

.animate-gradient-slow {
  background-size: 200% 200%;
  animation: gradient 15s linear infinite;
}

/* Floating Animation */
@keyframes float-1 {
  0%, 100% { transform: translate(-50%, -50%) rotate(0deg); }
  25% { transform: translate(-45%, -55%) rotate(5deg); }
  50% { transform: translate(-50%, -45%) rotate(-5deg); }
  75% { transform: translate(-55%, -50%) rotate(5deg); }
}

@keyframes float-2 {
  0%, 100% { transform: translate(50%, 0) rotate(0deg); }
  25% { transform: translate(45%, -5%) rotate(-5deg); }
  50% { transform: translate(50%, 5%) rotate(5deg); }
  75% { transform: translate(55%, 0) rotate(-5deg); }
}

@keyframes float-3 {
  0%, 100% { transform: translate(-50%, 50%) rotate(0deg); }
  25% { transform: translate(-45%, 45%) rotate(5deg); }
  50% { transform: translate(-50%, 55%) rotate(-5deg); }
  75% { transform: translate(-55%, 50%) rotate(5deg); }
}

.animate-float-1 {
  animation: float-1 20s ease-in-out infinite;
}

.animate-float-2 {
  animation: float-2 25s ease-in-out infinite;
}

.animate-float-3 {
  animation: float-3 30s ease-in-out infinite;
}

/* Fade In Animation */
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

.animate-fade-in {
  animation: fadeIn 0.5s ease-out forwards;
}

/* Slide Animations */
@keyframes slideUp {
  from { 
    opacity: 0;
    transform: translateY(50px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideRight {
  from {
    opacity: 0;
    transform: translateX(-50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes slideLeft {
  from {
    opacity: 0;
    transform: translateX(50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.animate-slide-up {
  animation: slideUp 0.5s ease-out forwards;
}

.animate-slide-right {
  animation: slideRight 0.5s ease-out forwards;
}

.animate-slide-left {
  animation: slideLeft 0.5s ease-out forwards;
}

/* Bounce In Animation */
@keyframes bounceIn {
  0% {
    opacity: 0;
    transform: scale(0.3);
  }
  50% {
    opacity: 0.9;
    transform: scale(1.1);
  }
  80% {
    opacity: 1;
    transform: scale(0.89);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
}

.animate-bounce-in {
  animation: bounceIn 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}

/* Enhanced swipe animations */
@keyframes swipeInRight {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes swipeOutLeft {
  from {
    transform: translateX(0);
    opacity: 1;
  }
  to {
    transform: translateX(-100%);
    opacity: 0;
  }
}

@keyframes swipeInLeft {
  from {
    transform: translateX(-100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes swipeOutRight {
  from {
    transform: translateX(0);
    opacity: 1;
  }
  to {
    transform: translateX(100%);
    opacity: 0;
  }
}

.swipe-in-right {
  animation: swipeInRight 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
}

.swipe-out-left {
  animation: swipeOutLeft 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
}

.swipe-in-left {
  animation: swipeInLeft 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
}

.swipe-out-right {
  animation: swipeOutRight 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\auth\signup.component.html
```
<div class="min-h-screen flex items-center justify-center bg-gray-900 pt-32">
  <!-- Background elements -->
  <div class="fixed inset-0 z-0">
    <div
      class="absolute inset-0 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900"
    ></div>
    <div
      class="absolute inset-0 bg-gradient-to-br from-primary-900/20 via-secondary-900/20 to-accent-900/20 animate-gradient"
    ></div>
    <div
      class="absolute inset-0 bg-gradient-radial from-transparent via-primary-900/10 to-transparent"
    ></div>
  </div>

  <div class="w-full max-w-xl md:max-w-2xl mx-4 z-10">
    <!-- Progress Steps -->
    <div
      class="flex justify-between items-center mb-8 relative px-4 overflow-hidden"
    >
      <div class="absolute inset-0 mt-5">
        <div class="h-1 bg-gray-700 rounded-full">
          <div
            class="h-1 bg-gradient-to-r from-primary-500 to-accent-500 rounded-full transition-all duration-500"
            [style.width]="
              ((currentStep - 1) / (showShelterInfo ? 4 : 3)) * 100 + '%'
            "
          ></div>
        </div>
      </div>

      <!-- Update this to display all steps properly -->
      <div
        *ngFor="let step of getStepsToShow()"
        class="relative z-10 flex flex-col items-center"
      >
        <div
          [class]="
            'w-10 h-10 flex items-center justify-center rounded-full transition-all duration-300 ' +
            (currentStep >= step.value
              ? 'bg-gradient-to-r from-primary-500 to-accent-500 text-white'
              : 'bg-gray-700 text-gray-400')
          "
        >
          {{ step.displayNumber }}
        </div>
        <span
          class="mt-2 text-sm text-center"
          [class]="currentStep >= step.value ? 'text-white' : 'text-gray-400'"
        >
          {{ step.label }}
        </span>
      </div>
    </div>

    <!-- Personal Info Step -->
    <div
      *ngIf="currentStep === SignupStep.PersonalInfo"
      [@stepTransition]="stepDirection"
      class="bg-white/5 backdrop-blur-lg rounded-2xl shadow-xl p-8 space-y-8 border border-white/10"
    >
      <app-personal-info
        [form]="getPersonalInfoForm()"
        [isLoading]="isLoading"
        [isExternalProviderLoading]="isExternalProviderLoading"
        (next)="onPersonalInfoNext()"
      ></app-personal-info>

      <!-- Shelter Toggle -->
      <div
        class="flex items-center space-x-3 pt-4 border-t border-gray-700 mt-4"
      >
        <label class="relative inline-flex items-center cursor-pointer">
          <input
            type="checkbox"
            [ngModel]="registrationForm.get('isShelter')?.value"
            (ngModelChange)="
              registrationForm.get('isShelter')?.setValue($event)
            "
            class="sr-only peer"
          />
          <div
            class="w-11 h-6 bg-gray-700 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-600"
          ></div>
        </label>
        <span class="text-gray-300">Εγγραφή ως Καταφύγιο</span>
      </div>

      <!-- Google Sign In Section -->
      <div class="relative text-center my-8">
        <div class="absolute inset-0 flex items-center">
          <div class="w-full border-t border-gray-600"></div>
        </div>
        <div class="relative flex justify-center text-sm">
          <span class="px-2 text-gray-400 bg-gray-900/95">ή συνεχίστε με</span>
        </div>
      </div>

      <app-google-login-button
        [isLoading]="isExternalProviderLoading"
        [isSignup]="true"
      ></app-google-login-button>

      <div class="text-center text-sm">
        <span class="text-gray-400">Έχετε ήδη λογαριασμό;</span>
        <a
          routerLink="/auth/login"
          class="ml-1 text-primary-400 hover:text-primary-300 transition-colors"
        >
          Σύνδεση
        </a>
      </div>
    </div>

    <!-- Account Details Step -->
    <div
      *ngIf="currentStep === SignupStep.AccountDetails"
      [@stepTransition]="stepDirection"
      class="bg-white/5 backdrop-blur-lg rounded-2xl shadow-xl p-8 space-y-8 border border-white/10"
    >
      <app-account-details
        [form]="getAccountDetailsForm()"
        (next)="onAccountDetailsNext()"
        (back)="onAccountDetailsBack()"
      ></app-account-details>
    </div>

    <!-- Shelter Info Step -->
    <div
      *ngIf="currentStep === SignupStep.ShelterInfo"
      [@stepTransition]="stepDirection"
      class="bg-white/5 backdrop-blur-lg rounded-2xl shadow-xl p-8 space-y-8 border border-white/10"
    >
      <app-preferences
        [form]="registrationForm"
        [isLoading]="isLoading"
        (back)="onShelterInfoBack()"
        (submit)="onSubmitRegistration()"
      ></app-preferences>
    </div>

    <!-- OTP Verification Step -->
    <div
      *ngIf="currentStep === SignupStep.OtpVerification"
      [@stepTransition]="stepDirection"
      class="bg-white/5 backdrop-blur-lg rounded-2xl shadow-xl p-8 space-y-6 border border-white/10"
    >
      <!-- Error Banner -->
      <app-error-message-banner [error]="error"></app-error-message-banner>

      <div class="text-center">
        <h2 class="text-2xl font-bold text-white mb-2">Επαλήθευση Τηλεφώνου</h2>
        <p class="text-gray-400 mb-8">
          Εισάγετε τον 6ψήφιο κωδικό που στάλθηκε στο τηλέφωνό σας
        </p>
      </div>

      <form [formGroup]="otpForm" (ngSubmit)="onSubmitOtp()" class="space-y-6">
        <app-otp-input
          [form]="otpForm"
          controlName="otp"
          label=""
          hint="Εισάγετε τον 6ψήφιο κωδικό επαλήθευσης"
          [length]="6"
          (completed)="onOtpCompleted($event)"
        ></app-otp-input>

        <div class="flex justify-center">
          <button
            type="button"
            (click)="resendOtp()"
            [disabled]="resendOtpTimer > 0"
            class="text-primary-400 hover:text-primary-300 transition-colors disabled:text-gray-600"
          >
            {{
              resendOtpTimer > 0
                ? "Επαναποστολή κωδικού σε " + resendOtpTimer + " δευτερόλεπτα"
                : "Επαναποστολή κωδικού"
            }}
          </button>
        </div>

        <app-auth-button
          type="submit"
          [isLoading]="isLoading"
          [disabled]="otpForm.invalid"
          icon="lucideUser"
          (buttonClick)="onSubmitOtp()"
        >
          Επαλήθευση OTP
        </app-auth-button>
      </form>
    </div>

    <!-- Email Confirmation Step -->
    <div
      *ngIf="currentStep === SignupStep.EmailConfirmation"
      [@stepTransition]="stepDirection"
      class="bg-white/5 backdrop-blur-lg rounded-2xl shadow-xl p-8 space-y-6 border border-white/10 text-center"
    >
      <!-- Error Banner -->
      <app-error-message-banner [error]="error"></app-error-message-banner>

      <div
        class="w-16 h-16 mx-auto bg-gradient-to-r from-primary-500 to-accent-500 rounded-full flex items-center justify-center"
      >
        <ng-icon name="lucideCheck" [size]="'32'" class="text-white"></ng-icon>
      </div>

      <div>
        <h2 class="text-2xl font-bold text-white mb-2">
          {{
            fromLogin
              ? "Επαλήθευση Email Απαιτείται"
              : "Η Εγγραφή Ολοκληρώθηκε!"
          }}
        </h2>
        <p class="text-gray-400" *ngIf="fromLogin">
          {{
            "Ο λογαριασμός σας υπάρχει, αλλά το email σας δεν έχει επαληθευτεί. Έχουμε στείλει ένα email επιβεβαίωσης στο " +
              (registrationForm.get("email")?.value || "email σας") +
              ". Παρακαλούμε επαληθεύστε το email σας για να συνδεθείτε."
          }}
        </p>
      </div>

      <div class="pt-4 space-y-4">
        <button
          *ngIf="fromLogin"
          type="button"
          (click)="resendEmailVerification()"
          [disabled]="isLoading"
          class="inline-block w-full px-4 py-3 bg-gradient-to-r from-primary-600 to-accent-600 text-white rounded-xl hover:shadow-lg hover:shadow-primary-500/20 transition-all duration-300 transform hover:-translate-y-1 disabled:opacity-70 disabled:transform-none"
        >
          <span *ngIf="!isLoading">Αποστολή νέου email επαλήθευσης</span>
          <span *ngIf="isLoading" class="flex items-center justify-center">
            <svg
              class="animate-spin -ml-1 mr-3 h-5 w-5 text-white"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
            >
              <circle
                class="opacity-25"
                cx="12"
                cy="12"
                r="10"
                stroke="currentColor"
                stroke-width="4"
              ></circle>
              <path
                class="opacity-75"
                fill="currentColor"
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
              ></path>
            </svg>
            Αποστολή...
          </span>
        </button>

        <a
          routerLink="/auth/login"
          class="inline-block w-full px-4 py-3 border border-white/20 text-white rounded-xl hover:bg-white/10 transition-all duration-300"
        >
          Μετάβαση στη Σύνδεση
        </a>
      </div>
    </div>
  </div>
</div>

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\auth\signup.component.ts
```
import { Component, OnInit, ViewChild, OnDestroy } from '@angular/core';
import {
  FormBuilder,
  FormGroup,
  Validators,
  AbstractControl,
  FormControl,
} from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { BaseComponent } from 'src/app/common/ui/base-component';
import { AuthService } from 'src/app/services/auth.service';
import { RegisterPayload, OtpPayload } from 'src/app/models/auth/auth.model';
import { CustomValidators } from './validators/custom.validators';
import {
  trigger,
  transition,
  style,
  animate,
  state,
} from '@angular/animations';
import { OtpInputComponent } from 'src/app/common/ui/otp-input.component';
import { LogService } from 'src/app/common/services/log.service';
import { HttpErrorResponse } from '@angular/common/http';
import { ErrorHandlerService } from 'src/app/common/services/error-handler.service';
import { ErrorDetails } from 'src/app/common/ui/error-message-banner.component';
import { AuthProvider } from 'src/app/common/enum/auth-provider.enum';
import { UserRole } from 'src/app/common/enum/user-role.enum';
import { User } from 'src/app/models/user/user.model';
interface LocationFormGroup extends FormGroup {
  controls: {
    city: AbstractControl;
    zipCode: AbstractControl;
    address: AbstractControl;
    number: AbstractControl;
  };
}

interface SocialMediaFormGroup extends FormGroup {
  controls: {
    facebook: AbstractControl;
    instagram: AbstractControl;
  };
}

interface OperatingHoursFormGroup extends FormGroup {
  controls: {
    monday: AbstractControl;
    tuesday: AbstractControl;
    wednesday: AbstractControl;
    thursday: AbstractControl;
    friday: AbstractControl;
    saturday: AbstractControl;
    sunday: AbstractControl;
  };
}

interface ShelterFormGroup extends FormGroup {
  controls: {
    shelterName: AbstractControl;
    description: AbstractControl;
    website: AbstractControl;
    socialMedia: SocialMediaFormGroup;
    operatingHours: OperatingHoursFormGroup;
  };
}

interface RegistrationFormGroup extends FormGroup {
  controls: {
    email: AbstractControl;
    password: AbstractControl;
    confirmPassword: AbstractControl;
    fullName: AbstractControl;
    phone: AbstractControl;
    countryCode: AbstractControl;
    phoneNumber: AbstractControl;
    role: AbstractControl;
    isShelter: AbstractControl;
    profilePhoto: AbstractControl;
    hasEmailVerified: AbstractControl;
    location: LocationFormGroup;
    shelter: ShelterFormGroup;
  };
}

interface OtpFormGroup extends FormGroup {
  controls: {
    otp: AbstractControl;
  };
}

export enum SignupStep {
  PersonalInfo = 1,
  AccountDetails = 2,
  ShelterInfo = 3,
  OtpVerification = 4,
  EmailConfirmation = 5,
}

@Component({
  selector: 'app-signup',
  templateUrl: './signup.component.html',
  styleUrls: ['./signup.component.css'],
  animations: [
    trigger('stepTransition', [
      state('next', style({ transform: 'translateX(0)', opacity: 1 })),
      state('prev', style({ transform: 'translateX(0)', opacity: 1 })),

      // Slide from right to left (next)
      transition('void => next', [
        style({ transform: 'translateX(100%)', opacity: 0 }),
        animate(
          '400ms cubic-bezier(0.35, 0, 0.25, 1)',
          style({ transform: 'translateX(0)', opacity: 1 })
        ),
      ]),

      // Slide from left to right (back)
      transition('void => prev', [
        style({ transform: 'translateX(-100%)', opacity: 0 }),
        animate(
          '400ms cubic-bezier(0.35, 0, 0.25, 1)',
          style({ transform: 'translateX(0)', opacity: 1 })
        ),
      ]),
    ]),
  ],
})
export class SignupComponent
  extends BaseComponent
  implements OnInit, OnDestroy
{
  @ViewChild(OtpInputComponent) otpInputComponent?: OtpInputComponent;
  currentStep = SignupStep.PersonalInfo;
  SignupStep = SignupStep;
  stepDirection: 'next' | 'prev' = 'next';
  fromLogin = false;

  isLoading = false;
  isExternalProviderLoading = false;

  userId: string = '';
  resendOtpTimer = 0;
  resendOtpInterval: any;

  error?: ErrorDetails;

  showShelterInfo = false;

  googlePopulatedFields: string[] = [];

  registrationForm!: RegistrationFormGroup;
  otpForm!: OtpFormGroup;

  constructor(
    private readonly fb: FormBuilder,
    private readonly authService: AuthService,
    private readonly logService: LogService,
    private readonly errorHandler: ErrorHandlerService,
    private readonly router: Router,
    private readonly route: ActivatedRoute
  ) {
    super();
    this.initializeForms();
  }

  ngOnInit(): void {
    this.route.queryParams.subscribe((params: any) => {
      if (params['mode'] === 'google') {
        // Get the Google auth code from session storage
        const googleAuthCode: string | null =
          sessionStorage.getItem('googleAuthCode');

        if (googleAuthCode) {
          // Clear the code from session storage to prevent reuse
          sessionStorage.removeItem('googleAuthCode');
          sessionStorage.removeItem('googleAuthOrigin');

          // Call the login with Google method
          this.isExternalProviderLoading = true;
          this.processGoogleSignUp(googleAuthCode);
        }
      }
    });

    const state = history.state;

    const existingPhone: string | null =
      sessionStorage.getItem('unverifiedPhone');
    if (existingPhone) {
      this.registrationForm.get('phone')?.setValue(existingPhone);
      sessionStorage.removeItem('unverifiedPhone');
    }
    const existingEmail: string | null =
      sessionStorage.getItem('unverifiedEmail');
    if (existingEmail) {
      this.registrationForm.get('email')?.setValue(existingEmail);
      sessionStorage.removeItem('unverifiedEmail');
    }

    if (state && state.step === SignupStep.OtpVerification && state.fromLogin) {
      this.currentStep = SignupStep.OtpVerification;
      this.resendOtp();
    }

    if (
      state &&
      state.step === SignupStep.EmailConfirmation &&
      state.fromLogin
    ) {
      this.currentStep = SignupStep.EmailConfirmation;
      this.resendEmailVerification();
    }

    history.pushState(null, '', location.href);
    window.onpopstate = () => {
      history.pushState(null, '', location.href);
    };
  }

  override ngOnDestroy(): void {
    super.ngOnDestroy();
    clearInterval(this.resendOtpInterval);
    window.onpopstate = null;
  }
  private initializeForms(): void {
    // Change this in the initializeForms() method:
    const operatingHoursGroup = this.fb.group({
      monday: [''],
      tuesday: [''],
      wednesday: [''],
      thursday: [''],
      friday: [''],
      saturday: [''],
      sunday: [''],
    });

    this.registrationForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]],
      password: [
        '',
        [Validators.required, CustomValidators.passwordValidator()],
      ],
      confirmPassword: ['', [Validators.required]],
      fullName: ['', [Validators.required, Validators.minLength(5)]],
      phone: [''],
      countryCode: ['+30', Validators.required],
      phoneNumber: [
        '',
        [Validators.required, Validators.pattern(/^\d{1,14}$/)],
      ],
      authProvider: [AuthProvider.Local],
      authProviderId: [null],
      role: [UserRole.User, [Validators.required]],
      isShelter: [false],
      profilePhoto: [null],
      hasPhoneVerified: [false],
      hasEmailVerified: [false],
      location: this.fb.group({
        city: [
          '',
          [
            Validators.required,
            Validators.minLength(2),
            Validators.maxLength(50),
          ],
        ],
        zipCode: [
          '',
          [Validators.required, Validators.pattern(/^\d{5}(-\d{4})?$/)],
        ],
        address: [
          '',
          [
            Validators.required,
            Validators.minLength(3),
            Validators.maxLength(100),
          ],
        ],
        number: [
          '',
          [
            Validators.required,
            Validators.pattern(/^\d+$/),
            Validators.minLength(1),
            Validators.maxLength(5),
          ],
        ],
      }) as LocationFormGroup,
      shelter: this.fb.group({
        shelterName: [''],
        description: [''], // Empty string instead of whitespace
        website: [''],
        socialMedia: this.fb.group({
          facebook: [''],
          instagram: [''],
        }) as SocialMediaFormGroup,
        operatingHours: operatingHoursGroup,
      }) as ShelterFormGroup,
    }) as RegistrationFormGroup;

    // Add password confirmation validator
    this.registrationForm
      .get('confirmPassword')
      ?.setValidators([
        Validators.required,
        CustomValidators.matchValidator('password'),
      ]);

    // Subscribe to isShelter changes to update validations
    this.registrationForm
      .get('isShelter')
      ?.valueChanges.subscribe((isShelter) => {
        this.showShelterInfo = isShelter;
        const role = isShelter ? UserRole.Shelter : UserRole.User;
        this.registrationForm.patchValue({ role });

        const shelterForm = this.getShelterForm();

        // Update shelter form validators
        if (isShelter) {
          shelterForm
            .get('shelterName')
            ?.setValidators([Validators.required, Validators.minLength(3)]);
          shelterForm
            .get('description')
            ?.setValidators([Validators.required, Validators.minLength(10)]);

          // Update operating hours validators
          Object.keys(operatingHoursGroup.controls).forEach((key) => {
            operatingHoursGroup
              .get(key)
              ?.setValidators([CustomValidators.operatingHoursValidator()]);
          });

          // Update social media validators - only validate if values are provided
          shelterForm
            .get('socialMedia.facebook')
            ?.setValidators(CustomValidators.socialMediaValidator('facebook'));
          shelterForm
            .get('socialMedia.instagram')
            ?.setValidators(CustomValidators.socialMediaValidator('instagram'));

          // Optional website field - only validate if value is provided
          shelterForm
            .get('website')
            ?.setValidators(Validators.pattern(/^https?:\/\/.+\..+$/));
        } else {
          // Clear all shelter-related validators when not a shelter
          shelterForm.get('shelterName')?.clearValidators();
          shelterForm.get('description')?.clearValidators();

          Object.keys(operatingHoursGroup.controls).forEach((key) => {
            operatingHoursGroup.get(key)?.clearValidators();
          });

          shelterForm.get('socialMedia.facebook')?.clearValidators();
          shelterForm.get('socialMedia.instagram')?.clearValidators();
          shelterForm.get('website')?.clearValidators();

          // Reset shelter form values
          shelterForm.reset();
        }

        // Update validation state for all shelter form controls
        shelterForm.get('shelterName')?.updateValueAndValidity();
        shelterForm.get('description')?.updateValueAndValidity();
        shelterForm.get('socialMedia.facebook')?.updateValueAndValidity();
        shelterForm.get('socialMedia.instagram')?.updateValueAndValidity();
        shelterForm.get('website')?.updateValueAndValidity();
        operatingHoursGroup.updateValueAndValidity();
      });

    this.otpForm = this.fb.group({
      otp: ['', [Validators.required, Validators.pattern(/^\d{6}$/)]],
    }) as OtpFormGroup;
  }

  getStepsToShow() {
    // Base steps that are always shown
    const steps = [
      {
        value: SignupStep.PersonalInfo,
        displayNumber: 1,
        label: 'Προσωπικά Στοιχεία',
      },
      {
        value: SignupStep.AccountDetails,
        displayNumber: 2,
        label: 'Λογαριασμός',
      },
    ];

    // Conditionally add shelter info step
    if (this.showShelterInfo) {
      steps.push({
        value: SignupStep.ShelterInfo,
        displayNumber: 3,
        label: 'Καταφύγιο',
      });
    }

    steps.push({
      value: SignupStep.OtpVerification,
      displayNumber: this.showShelterInfo ? 4 : 3,
      label: 'Επαλήθευση',
    });

    return steps;
  }

  getShelterForm(): ShelterFormGroup {
    return this.registrationForm.get('shelter') as ShelterFormGroup;
  }

  getLocationForm(): LocationFormGroup {
    return this.registrationForm.get('location') as LocationFormGroup;
  }

  getSocialMediaForm(): SocialMediaFormGroup {
    return this.getShelterForm().get('socialMedia') as SocialMediaFormGroup;
  }

  getOperatingHoursForm(): OperatingHoursFormGroup {
    return this.getShelterForm().get(
      'operatingHours'
    ) as OperatingHoursFormGroup;
  }

  getShelterDescriptionControl(): FormControl {
    const control = this.getShelterForm().get('description');
    if (!(control instanceof FormControl)) {
      throw new Error('Description control not found or invalid');
    }
    return control;
  }

  getPersonalInfoForm(): FormGroup {
    const personalInfoForm = this.fb.group({
      fullName: this.registrationForm.get('fullName'),
      email: this.registrationForm.get('email'),
      countryCode: this.registrationForm.get('countryCode'),
      phoneNumber: this.registrationForm.get('phoneNumber'),
      phone: this.registrationForm.get('phone'),
      location: this.registrationForm.get('location'),
      profilePhoto: this.registrationForm.get('profilePhoto'),
    });
    return personalInfoForm;
  }

  getAccountDetailsForm(): FormGroup {
    const accountDetailsForm = this.fb.group({
      password: this.registrationForm.get('password'),
      confirmPassword: this.registrationForm.get('confirmPassword'),
    });
    return accountDetailsForm;
  }

  getFileUploadForm(): FormGroup {
    const fileUploadForm = this.fb.group({
      profilePhoto: this.registrationForm.get('profilePhoto'),
    });
    return fileUploadForm;
  }

  private processGoogleSignUp(authCode: string): void {
    this.authService.registerWithGoogle(authCode).subscribe({
      next: (response: User) => {
        const googlePopulatedFields: string[] = [];

        if (response.email) {
          this.registrationForm.get('email')?.setValue(response.email);
          this.registrationForm.get('email')?.disable();
          this.registrationForm.get('hasEmailVerified')?.setValue(true);
          googlePopulatedFields.push('email');
        }

        if (response.fullName) {
          this.registrationForm.get('fullName')?.setValue(response.fullName);
          this.registrationForm.get('fullName')?.disable();
          googlePopulatedFields.push('fullName');
        }

        if (response.location) {
          const locationForm = this.getLocationForm();

          // Handle each location field individually
          if (response.location.city) {
            locationForm.get('city')?.setValue(response.location.city);
            locationForm.get('city')?.disable();
            googlePopulatedFields.push('location.city');
          }

          if (response.location.zipCode) {
            locationForm.get('zipCode')?.setValue(response.location.zipCode);
            locationForm.get('zipCode')?.disable();
            googlePopulatedFields.push('location.zipCode');
          }

          if (response.location.address) {
            locationForm.get('address')?.setValue(response.location.address);
            locationForm.get('address')?.disable();
            googlePopulatedFields.push('location.address');
          }

          if (response.location.number) {
            locationForm.get('number')?.setValue(response.location.number);
            locationForm.get('number')?.disable();
            googlePopulatedFields.push('location.number');
          }
        }

        if (response.phone) {
          const phoneNumbers = response.phone.split(' ');
          if (phoneNumbers.length > 1) {
            this.registrationForm.get('countryCode')?.setValue(phoneNumbers[0]);
            this.registrationForm.get('phoneNumber')?.setValue(phoneNumbers[1]);
            this.registrationForm.get('countryCode')?.disable();
            this.registrationForm.get('phoneNumber')?.disable();
          } else {
            this.registrationForm.get('phoneNumber')?.setValue(response.phone);
            this.registrationForm.get('phoneNumber')?.disable();
          }

          this.registrationForm.get('phone')?.setValue(response.phone);
          this.registrationForm.get('phone')?.disable();
          this.registrationForm.get('hasPhoneVerified')?.setValue(true);
          googlePopulatedFields.push('phone');
        }

        if (response.authProvider) {
          this.registrationForm
            .get('authProvider')
            ?.setValue(response.authProvider);
        }

        if (response.authProviderId) {
          this.registrationForm
            .get('authProviderId')
            ?.setValue(response.authProviderId);
        }

        this.googlePopulatedFields = googlePopulatedFields;

        this.isExternalProviderLoading = false;
        this.error = undefined;
      },
      error: (error: HttpErrorResponse) => {
        this.isExternalProviderLoading = false;
        this.error = this.errorHandler.handleAuthError(error);
        console.error(error);
      },
    });
  }

  isGooglePopulated(fieldName: string): boolean {
    return this.googlePopulatedFields.includes(fieldName);
  }

  onPersonalInfoNext(): void {
    this.stepDirection = 'next';
    if (
      (this.registrationForm.get('authProvider')?.value as AuthProvider) !=
      AuthProvider.Local
    ) {
      this.onAccountDetailsNext(true);
      return;
    }

    this.currentStep = SignupStep.AccountDetails;
  }

  onAccountDetailsNext(isExternalProvided: boolean = false): void {
    this.stepDirection = 'next';
    if (isExternalProvided) {
      this.registrationForm
        .get('password')
        ?.setValue('AuthenticatedExternally2025!');
      this.registrationForm
        .get('confirmPassword')
        ?.setValue('AuthenticatedExternally2025!');
    }

    const password = this.registrationForm.get('password')?.value;
    const confirmPassword = this.registrationForm.get('confirmPassword')?.value;

    if (password !== confirmPassword) {
      this.registrationForm
        .get('confirmPassword')
        ?.setErrors({ mismatch: true });
      this.registrationForm.get('confirmPassword')?.markAsTouched();
      return;
    }

    if (this.getAccountDetailsForm().valid) {
      if (this.showShelterInfo) {
        this.currentStep = SignupStep.ShelterInfo;
      } else {
        this.onSubmitRegistration();
      }
    } else {
      this.markFormGroupTouched(this.getAccountDetailsForm());
    }
  }

  onAccountDetailsBack(): void {
    // Set direction for animation
    this.stepDirection = 'prev';
    this.currentStep = SignupStep.PersonalInfo;
  }

  onShelterInfoBack(): void {
    this.stepDirection = 'prev';
    if (
      (this.registrationForm.value.authProvider as AuthProvider) !==
      AuthProvider.Local
    ) {
      this.onAccountDetailsBack();
      return;
    }

    this.currentStep = SignupStep.AccountDetails;
  }

  onSubmitRegistration(): void {
    this.markFormGroupTouched(this.registrationForm);
    this.logService.logFormatted(this.registrationForm.getRawValue());
    if (this.registrationForm.valid) {
      this.isLoading = true;
      const formValue = this.registrationForm.getRawValue();

      const payload: RegisterPayload = {
        user: {
          id: '',
          email: formValue.email,
          password:
            formValue.authProvider == AuthProvider.Local
              ? formValue.password
              : '',
          fullName: formValue.fullName,
          role: formValue.role,
          phone: formValue.phone,
          location: formValue.location,
          authProvider: formValue.authProvider,
          authProviderId: formValue.authProviderId,
          profilePhotoId: formValue.profilePhoto,
          hasPhoneVerified: formValue.hasPhoneVerified,
          hasEmailVerified: formValue.hasEmailVerified,
        },
      };

      if (formValue.isShelter) {
        payload.shelter = {
          id: '',
          userId: '',
          shelterName: formValue.shelter.shelterName,
          description: formValue.shelter.description,
          website: formValue.shelter.website ? formValue.shelter.website : null,
          socialMedia: this.getSocialMediaPayload(
            formValue.shelter.socialMedia
          ),
          operatingHours: this.getOperatingHoursPayload(
            formValue.shelter.operatingHours
          ),
          verificationStatus: 1,
          verifiedBy: undefined,
        };
      }

      console.log('Registration payload:\n', payload);

      this.authService.register(payload).subscribe({
        next: (user: User) => {
          this.userId = user.id!;
          if (!user.hasPhoneVerified) {
            this.resendOtp();
            this.currentStep = SignupStep.OtpVerification;
          } else if (!user.hasEmailVerified) {
            this.resendEmailVerification();
            this.currentStep = SignupStep.EmailConfirmation;
          } else {
            this.router.navigate(['/auth/verified'], {
              queryParams: {
                complete: formValue.role,
                identification: this.userId,
              },
            });
          }

          this.isLoading = false;
          this.error = undefined;
        },
        error: (error) => {
          console.error('Registration error:', error);
          this.isLoading = false;
          this.error = this.errorHandler.handleAuthError(error);
        },
      });
    }
  }

  private getSocialMediaPayload(socialMedia: any) {
    if (!socialMedia) {
      return null;
    }

    const facebook = socialMedia.facebook;
    const instagram = socialMedia.instagram;

    return facebook || instagram ? socialMedia : null;
  }

  private getOperatingHoursPayload(operatingHours: any): any {
    if (!operatingHours) {
      return null;
    }

    const days = Object.keys(operatingHours);

    return days.every((day) => {
      const value = operatingHours[day];
      return !value;
    })
      ? null
      : operatingHours;
  }

  private markFormGroupTouched(formGroup: FormGroup) {
    Object.keys(formGroup.controls).forEach((key) => {
      const control = formGroup.get(key);
      if (control instanceof FormGroup) {
        this.markFormGroupTouched(control);
      } else if (control) {
        control.markAsTouched();
        control.markAsDirty();
        control.updateValueAndValidity();
      }
    });
  }

  onSubmitOtp(): void {
    this.markFormGroupTouched(this.otpForm);
    this.error = undefined;

    if (this.otpForm.valid) {
      this.isLoading = true;
      const { otp } = this.otpForm.value;
      const { phone, email, role } = this.registrationForm.getRawValue();

      this.authService
        .verifyOtp({
          phone: phone,
          otp: +otp,
          id: this.userId,
          email: email,
        } as OtpPayload)
        .subscribe({
          next: () => {
            if (!this.registrationForm.get('hasEmailVerified')?.value) {
              this.currentStep = SignupStep.EmailConfirmation;
              this.resendEmailVerification();
            } else {
              this.router.navigate(['/auth/verified'], {
                queryParams: { complete: role, identification: this.userId },
              });
            }

            this.error = undefined;
            this.isLoading = false;
          },
          error: (error: HttpErrorResponse) => {
            this.isLoading = false;
            this.error = {
              title: 'Λάθος κωδικός',
              message:
                'Ο κωδικός OTP δεν είναι έγκυρος. Παρακαλώ δοκιμάστε ξανά.',
              type: 'error',
            };
            console.error('OTP verification error:', error);
          },
        });
    }
  }

  onOtpCompleted(otp: string): void {
    if (otp.length === 6 && !this.isLoading) {
      this.onSubmitOtp();
    }
  }

  resendOtp(): void {
    const { phone, email } = this.registrationForm.getRawValue();

    this.authService
      .sendOtp({
        phone: phone,
        id: this.userId,
        email: email,
      } as OtpPayload)
      .subscribe({
        next: () => {
          this.startOtpTimer();
          this.error = undefined;
        },
        error: (error: HttpErrorResponse) => {
          this.error = {
            title: 'Αποτυχία αποστολής OTP',
            message:
              'Παρουσιάστηκε σφάλμα κατά την αποστολή του κωδικού. Παρακαλώ δοκιμάστε ξανά.',
            type: 'error',
          };
          console.error('Resend OTP error:', error);
        },
      });
  }

  resendEmailVerification(): void {
    const { email } = this.registrationForm.getRawValue();
    this.isLoading = true;
    this.error = undefined;

    this.authService.sendVerificationEmail(email).subscribe({
      next: () => {
        this.isLoading = false;
        this.error = {
          title: 'Επιτυχής αποστολή',
          message: 'Το email επαλήθευσης στάλθηκε επιτυχώς.',
          type: 'info',
        };
      },
      error: (error: HttpErrorResponse) => {
        this.isLoading = false;
        this.error = {
          title: 'Αποτυχία αποστολής email',
          message:
            'Παρουσιάστηκε σφάλμα κατά την αποστολή του email. Παρακαλώ δοκιμάστε ξανά.',
          type: 'error',
        };
        console.error('Resend email verification error:', error);
      },
    });
  }

  private startOtpTimer(): void {
    this.resendOtpTimer = 30;
    clearInterval(this.resendOtpInterval);
    this.resendOtpInterval = setInterval(() => {
      if (this.resendOtpTimer > 0) {
        this.resendOtpTimer--;
      } else {
        clearInterval(this.resendOtpInterval);
      }
    }, 1000);
  }

  private formatFileSize(bytes: number): string {
    if (bytes === 0) return '0 Bytes';

    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));

    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\auth\validators\custom.validators.ts
```
import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';

export class CustomValidators {
  static passwordValidator(): ValidatorFn {
    return (control: AbstractControl): ValidationErrors | null => {
      if (!control.value) {
        return null;
      }

      const hasUpperCase = /[A-Z]/.test(control.value);
      const hasLowerCase = /[a-z]/.test(control.value);
      const hasNumber = /\d/.test(control.value);
      const hasSpecialChar = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(
        control.value
      );
      const isLongEnough = control.value.length >= 8;

      const errors: ValidationErrors = {};

      if (!isLongEnough) errors['minlength'] = { requiredLength: 8 };
      if (!hasUpperCase) errors['uppercase'] = true;
      if (!hasLowerCase) errors['lowercase'] = true;
      if (!hasNumber) errors['number'] = true;
      if (!hasSpecialChar) errors['specialChar'] = true;

      return Object.keys(errors).length ? errors : null;
    };
  }

  static matchValidator(matchTo: string): ValidatorFn {
    return (control: AbstractControl): ValidationErrors | null => {
      if (!control.parent) {
        return null;
      }

      const matchControl = control.parent.get(matchTo);
      if (!matchControl) {
        return null;
      }

      if (control.value !== matchControl.value) {
        return { mismatch: true };
      }

      return null;
    };
  }

  static phoneNumberValidator(): ValidatorFn {
    return (control: AbstractControl): ValidationErrors | null => {
      if (!control.value) {
        return null;
      }

      const valid = /^\+?[1-9]\d{1,14}$/.test(control.value);
      return valid ? null : { pattern: true };
    };
  }

  static zipCodeValidator(): ValidatorFn {
    return (control: AbstractControl): ValidationErrors | null => {
      if (!control.value) {
        return null;
      }

      const valid = /^\d{5}(-\d{4})?$/.test(control.value);
      return valid ? null : { pattern: true };
    };
  }

  static socialMediaValidator(platform: 'facebook' | 'instagram'): ValidatorFn {
    return (control: AbstractControl): ValidationErrors | null => {
      if (!control.value) {
        return null;
      }

      // Simplified validation - just check if the URL contains the platform name
      const containsPlatform = control.value.toLowerCase().includes(platform);
      return containsPlatform ? null : { invalidSocialMedia: true };
    };
  }

  static operatingHoursValidator(): ValidatorFn {
    return (control: AbstractControl): ValidationErrors | null => {
      if (!control.value) {
        return null;
      }

      if (control.value === 'closed') {
        return null;
      }

      // If the value is empty, it's valid (we'll alidate at the form level if any day has a value)
      if (control.value === '') {
        return null;
      }

      const timePattern =
        /^([01]?[0-9]|2[0-3]):[0-5][0-9],([01]?[0-9]|2[0-3]):[0-5][0-9]$/;
      if (!timePattern.test(control.value)) {
        return { pattern: true };
      }

      const [openTime, closeTime] = control.value.split(',');

      // Check if close time is after open time
      if (openTime >= closeTime) {
        return { invalidTimeRange: true };
      }

      return null;
    };
  }

  static operatingHoursGroupValidator(): ValidatorFn {
    return (formGroup: AbstractControl): ValidationErrors | null => {
      if (!(formGroup instanceof AbstractControl)) {
        return null;
      }

      const controls = (formGroup as any).controls;
      if (!controls) {
        return null;
      }

      // Check if any day has a value set
      const days = [
        'monday',
        'tuesday',
        'wednesday',
        'thursday',
        'friday',
        'saturday',
        'sunday',
      ];
      let hasAnyValue = false;

      for (const day of days) {
        const control = controls[day];
        if (control && control.value && control.value !== '') {
          hasAnyValue = true;
          break;
        }
      }

      // If no day has a value, all are valid (optional)
      if (!hasAnyValue) {
        return null;
      }

      // If any day has a value, all days must have valid values
      let hasInvalidDay = false;
      for (const day of days) {
        const control = controls[day];
        if (control && control.value === '') {
          hasInvalidDay = true;
          control.setErrors({ required: true });
        }
      }

      return hasInvalidDay ? { invalidOperatingHours: true } : null;
    };
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\home\ai-matching-section\ai-matching-section.component.ts
```
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NgIconsModule } from '@ng-icons/core';
import { AnimationDirective } from '../shared/directives/animation.directive';
import { lucideHeart, lucideMessageCircle } from '@ng-icons/lucide';

@Component({
  selector: 'app-ai-matching-section',
  standalone: true,
  imports: [CommonModule, NgIconsModule, AnimationDirective],
  template: `
    <div
      appAnimation
      [animationDelay]="0"
      class="bg-gray-800/50 backdrop-blur-lg border border-gray-700/50 rounded-3xl shadow-xl p-6 sm:p-8 md:p-12 mb-20 transform hover:scale-[1.02] transition-all duration-300"
      style="transform: scale(0.95);"
    >
      <div class="grid md:grid-cols-2 gap-8 md:gap-12 items-center">
        <div class="space-y-6 md:space-y-8">
          <h2
            appAnimation
            [animationDelay]="300"
            class="text-3xl md:text-4xl font-bold gradient-text"
            style="transform: translateX(-50px);"
          >
            Αντιστοίχιση με Τεχνητή Νοημοσύνη
          </h2>
          <div class="space-y-4 md:space-y-6">
            <div
              appAnimation
              [animationDelay]="400"
              class="flex items-start transform hover:-translate-y-1 transition-transform duration-300"
              style="transform: translateY(20px);"
            >
              <div class="flex-shrink-0">
                <div
                  class="flex items-center justify-center h-12 w-12 rounded-xl bg-gradient-to-br from-primary-500 to-accent-500 text-white shadow-lg"
                >
                  <ng-icon name="lucideHeart" [size]="'24'"></ng-icon>
                </div>
              </div>
              <div class="ml-4">
                <h3 class="text-lg md:text-xl font-semibold text-white">
                  Αντιστοίχιση Προτιμήσεων
                </h3>
                <p class="mt-2 text-sm md:text-base text-gray-400">
                  Το σύστημά μας χρησιμοποιεί έξυπνες τεχνικές και τεχνητή νοημοσύνη για να αναλύσει τις προτιμήσεις σας 
                  και να βρει το κατάλληλο κατοικίδιο για εσάς
                </p>
              </div>
            </div>
            <div
              appAnimation
              [animationDelay]="500"
              class="flex items-start transform hover:-translate-y-1 transition-transform duration-300"
              style="transform: translateY(20px);"
            >
              <div class="flex-shrink-0">
                <div
                  class="flex items-center justify-center h-12 w-12 rounded-xl bg-gradient-to-br from-secondary-500 to-primary-500 text-white shadow-lg"
                >
                  <ng-icon name="lucideMessageCircle" [size]="'24'"></ng-icon>
                </div>
              </div>
              <div class="ml-4">
                <h3 class="text-lg md:text-xl font-semibold text-white">
                  Άμεση Επικοινωνία
                </h3>
                <p class="mt-2 text-sm md:text-base text-gray-400">
                  Συνδεθείτε απευθείας με καταφύγια και ιδιοκτήτες κατοικιδίων μέσω του ασφαλούς συστήματος μηνυμάτων μας
                </p>
              </div>
            </div>
          </div>
        </div>
        <div
          appAnimation
          [animationDelay]="600"
          class="relative block"
          style="transform: translateX(50px);"
        >
          <div
            class="absolute inset-0 bg-gradient-to-br from-primary-500/20 to-accent-500/20 rounded-2xl transform rotate-6"
          ></div>
          <img
            src="https://images.unsplash.com/photo-1450778869180-41d0601e046e?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80"
            alt="Χαρούμενος σκύλος"
            class="rounded-2xl shadow-xl relative z-10 w-full h-auto object-cover"
          />
        </div>
      </div>
    </div>
  `,
})
export class AiMatchingSectionComponent {}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\home\feature-card\feature-card.component.ts
```
import { Component, Input } from '@angular/core';
import { NgIconsModule } from '@ng-icons/core';
import { CommonModule } from '@angular/common';
import { AnimationDirective } from '../shared/directives/animation.directive';

@Component({
  selector: 'app-feature-card',
  standalone: true,
  imports: [CommonModule, NgIconsModule, AnimationDirective],
  template: `
    <div
      appAnimation
      [animationDelay]="0"
      class="relative p-8 rounded-2xl shadow-xl transform hover:-translate-y-1 transition-all duration-300 overflow-hidden"
      style="transform: scale(0.95);"
    >
      <!-- Gradient background with animation -->
      <div
        class="absolute inset-0 bg-gradient-to-r from-gray-900/95 via-gray-800/95 to-gray-900/95 animate-gradient"
      ></div>
      <div
        class="absolute inset-0 bg-gradient-to-r from-primary-500/30 via-secondary-500/30 to-accent-500/30 animate-gradient-slow opacity-70"
      ></div>

      <!-- Content -->
      <div class="relative z-10">
        <div
          [class]="
            'rounded-full w-16 h-16 flex items-center justify-center mb-6 mx-auto ' +
            bgColor
          "
        >
          <ng-icon [name]="icon" [class]="iconColor" [size]="'32'"></ng-icon>
        </div>
        <h3 class="text-2xl font-semibold mb-4 text-white">{{ title }}</h3>
        <p class="text-gray-200 leading-relaxed">{{ description }}</p>
      </div>
    </div>
  `,
})
export class FeatureCardComponent {
  @Input() icon!: string;
  @Input() title!: string;
  @Input() description!: string;
  @Input() bgColor!: string;
  @Input() iconColor!: string;
  @Input() gradientClass!: string;
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\home\footer\footer.component.ts
```
import { Component } from '@angular/core';
import { RouterModule } from '@angular/router';
import { NgIconsModule } from '@ng-icons/core';
import { CommonModule } from '@angular/common';
import {
  lucideHeart,
  lucidePhone,
  lucideMail,
  lucideMessageCircle,
} from '@ng-icons/lucide';

@Component({
  selector: 'app-footer',
  standalone: true,
  imports: [CommonModule, RouterModule, NgIconsModule],
  template: `
    <div class="relative bg-gray-900 text-white py-12 border-t border-gray-800">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-8">
          <div>
            <h3 class="text-xl font-semibold mb-4">Pawfect</h3>
            <p class="text-gray-400">Βρίσκουμε παντοτινά σπίτια για τους τετράποδους φίλους μας</p>
          </div>
          <div>
            <h4 class="text-lg font-medium mb-4">Γρήγοροι Σύνδεσμοι</h4>
            <ul class="space-y-2">
              <li>
                <a
                  routerLink="/about"
                  class="text-gray-400 hover:text-white transition-colors"
                  >Σχετικά με εμάς</a
                >
              </li>
              <li>
                <a
                  routerLink="/contact"
                  class="text-gray-400 hover:text-white transition-colors"
                  >Επικοινωνία</a
                >
              </li>
            </ul>
          </div>
          <div>
            <h4 class="text-lg font-medium mb-4">Επικοινωνήστε μαζί μας</h4>
            <ul class="space-y-2 text-gray-400">
              <li class="flex items-center">
                <ng-icon
                  name="lucidePhone"
                  [size]="'24'"
                  class="mr-2"
                ></ng-icon>
                (555) 123-4567
              </li>
              <li class="flex items-center">
                <ng-icon name="lucideMail" [size]="'24'" class="mr-2"></ng-icon>
                {{ 'info@pawfectmatch.com' }}
              </li>
            </ul>
          </div>
          <div>
            <h4 class="text-lg font-medium mb-4">Ακολουθήστε μας</h4>
            <div class="flex space-x-4">
              <a
                href="#"
                class="text-gray-400 hover:text-white transition-colors"
              >
                <ng-icon name="lucideHeart" [size]="'24'"></ng-icon>
              </a>
              <a
                href="#"
                class="text-gray-400 hover:text-white transition-colors"
              >
                <ng-icon name="lucideMessageCircle" [size]="'24'"></ng-icon>
              </a>
            </div>
          </div>
        </div>
        <div
          class="mt-8 pt-8 border-t border-gray-800 text-center text-gray-400"
        >
          <p>&copy; {{ currentYear }} Pawfect Match. Με επιφύλαξη παντός δικαιώματος.</p>
        </div>
      </div>
    </div>
  `,
})
export class FooterComponent {
  currentYear = new Date().getFullYear();
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\home\hero-section\hero-section.component.ts
```
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { AnimationDirective } from '../shared/directives/animation.directive';

@Component({
  selector: 'app-hero-section',
  standalone: true,
  imports: [CommonModule, AnimationDirective],
  template: `
    <div class="text-center mb-20">
      <h1
        appAnimation
        [animationDelay]="200"
        class="text-4xl sm:text-5xl md:text-6xl lg:text-7xl font-bold text-white mb-8"
        style="transform: scale(0.95);"
      >
        Βρείτε το <span class="gradient-text">Pawfect</span> ζωάκι σας
      </h1>
      <p
        appAnimation
        [animationDelay]="400"
        class="text-lg sm:text-xl md:text-2xl text-gray-300 max-w-3xl mx-auto leading-relaxed px-4"
        style="transform: translateY(20px);"
      >
        Ανακαλύψτε τον νέο σας καλύτερο φίλο μέσω του καινοτόμου συστήματος αντιστοίχισης κατοικιδίων. 
        Κάθε αναζήτηση σας φέρνει πιο κοντά στην άνευ όρων αγάπη.
      </p>
    </div>
  `,
})
export class HeroSectionComponent {}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\home\home.component.css
```
/* Gradient Animation */
@keyframes gradient {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

.animate-gradient {
  background-size: 200% 200%;
  animation: gradient 8s linear infinite;
}

.animate-gradient-slow {
  background-size: 200% 200%;
  animation: gradient 15s linear infinite;
}

/* Floating Animation */
@keyframes float-1 {
  0%, 100% { transform: translate(-50%, -50%) rotate(0deg); }
  25% { transform: translate(-45%, -55%) rotate(5deg); }
  50% { transform: translate(-50%, -45%) rotate(-5deg); }
  75% { transform: translate(-55%, -50%) rotate(5deg); }
}

@keyframes float-2 {
  0%, 100% { transform: translate(50%, 0) rotate(0deg); }
  25% { transform: translate(45%, -5%) rotate(-5deg); }
  50% { transform: translate(50%, 5%) rotate(5deg); }
  75% { transform: translate(55%, 0) rotate(-5deg); }
}

@keyframes float-3 {
  0%, 100% { transform: translate(-50%, 50%) rotate(0deg); }
  25% { transform: translate(-45%, 45%) rotate(5deg); }
  50% { transform: translate(-50%, 55%) rotate(-5deg); }
  75% { transform: translate(-55%, 50%) rotate(5deg); }
}

.animate-float-1 {
  animation: float-1 20s ease-in-out infinite;
}

.animate-float-2 {
  animation: float-2 25s ease-in-out infinite;
}

.animate-float-3 {
  animation: float-3 30s ease-in-out infinite;
}

/* Fade In Animation */
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

.animate-fade-in {
  animation: fadeIn 0.5s ease-out forwards;
}

/* Slide Animations */
@keyframes slideUp {
  from { 
    opacity: 0;
    transform: translateY(50px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideRight {
  from {
    opacity: 0;
    transform: translateX(-50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes slideLeft {
  from {
    opacity: 0;
    transform: translateX(50px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.animate-slide-up {
  animation: slideUp 0.5s ease-out forwards;
}

.animate-slide-right {
  animation: slideRight 0.5s ease-out forwards;
}

.animate-slide-left {
  animation: slideLeft 0.5s ease-out forwards;
}

/* Bounce In Animation */
@keyframes bounceIn {
  0% {
    opacity: 0;
    transform: scale(0.3);
  }
  50% {
    opacity: 0.9;
    transform: scale(1.1);
  }
  80% {
    opacity: 1;
    transform: scale(0.89);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
}

.animate-bounce-in {
  animation: bounceIn 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\home\home.component.html
```
<div class="min-h-screen relative overflow-hidden bg-gray-900">
  <!-- Background elements -->
  <div class="fixed inset-0 z-0">
    <div
      class="absolute inset-0 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900"
    ></div>
    <div
      class="absolute inset-0 bg-gradient-to-br from-primary-900/20 via-secondary-900/20 to-accent-900/20 animate-gradient"
    ></div>
    <div
      class="absolute inset-0 bg-gradient-radial from-transparent via-primary-900/10 to-transparent"
    ></div>

    <!-- Animated gradient orbs -->
    <div
      class="absolute top-0 left-0 w-[800px] h-[800px] bg-gradient-to-br from-primary-600/5 to-accent-600/5 rounded-full blur-3xl animate-float-1 -translate-x-1/2 -translate-y-1/2"
    ></div>
    <div
      class="absolute top-1/2 right-0 w-[600px] h-[600px] bg-gradient-to-bl from-secondary-600/5 to-primary-600/5 rounded-full blur-3xl animate-float-2 translate-x-1/2"
    ></div>
    <div
      class="absolute bottom-0 left-1/2 w-[700px] h-[700px] bg-gradient-to-tr from-accent-600/5 to-secondary-600/5 rounded-full blur-3xl animate-float-3 -translate-x-1/2 translate-y-1/2"
    ></div>
  </div>

  <!-- Main Content -->
  <main class="relative z-10">
    <div class="max-w-7xl mx-auto px-4 pt-32 pb-20">
      <app-hero-section></app-hero-section>
      <app-ai-matching-section></app-ai-matching-section>

      <!-- Feature Cards -->
      <div
        class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 md:gap-8 mb-20"
      >
        <app-feature-card
          *ngFor="let feature of features; let i = index"
          [icon]="feature.icon"
          [title]="feature.title"
          [description]="feature.description"
          [bgColor]="feature.bgColor"
          [iconColor]="feature.iconColor"
          [gradientClass]="feature.gradientClass"
        >
        </app-feature-card>
      </div>

      <!-- CTA Section -->
      <div
        appAnimation
        [animationDelay]="200"
        class="text-center"
        style="transform: scale(0.95)"
      >
        <a
          routerLink="/search"
          class="inline-flex items-center px-8 sm:px-12 py-4 sm:py-5 bg-gradient-to-r from-primary-600 via-secondary-600 to-accent-600 text-white rounded-full text-lg sm:text-xl font-semibold hover:shadow-[0_0_30px_rgba(168,85,247,0.5)] transition-all duration-300 transform hover:-translate-y-1 animate-gradient"
        >
          Ξεκινήστε την Αναζήτηση
          <ng-icon
            name="lucideHeart"
            class="ml-2 animate-pulse"
            [size]="'24'"
          ></ng-icon>
        </a>
      </div>
    </div>
  </main>

  <!-- Footer with proper z-index and positioning -->
  <footer class="relative z-10">
    <app-footer></app-footer>
  </footer>
</div>

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\home\home.component.ts
```
import { Component } from '@angular/core';
interface Feature {
  icon: string;
  title: string;
  description: string;
  bgColor: string;
  iconColor: string;
  gradientClass: string;
}

@Component({
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css'],
  standalone: false,
})
export class HomeComponent {
  currentYear = new Date().getFullYear();

  features: Feature[] = [
    {
      icon: 'lucideSearch',
      title: 'Αναζήτηση Κατοικιδίων',
      description:
        'Βρείτε τον τέλειο σύντροφο ανάμεσα στην προσεκτικά επιλεγμένη συλλογή αγαπημένων κατοικιδίων μας',
      bgColor: 'bg-gradient-to-br from-primary-500/20 to-primary-400/20',
      iconColor: 'text-primary-400',
      gradientClass: 'feature-card-primary',
    },
    {
      icon: 'lucideHeart',
      title: 'Αντιστοίχιση & Σύνδεση',
      description:
        'Το έξυπνο σύστημα αντιστοίχισής μας σας βοηθά να βρείτε και να επικοινωνήσετε με το αρμόδιο καταφύγιο για να υιοθετήσετε το κατοικίδιο για τον τρόπο ζωής σας',
      bgColor: 'bg-gradient-to-br from-secondary-500/20 to-secondary-400/20',
      iconColor: 'text-secondary-400',
      gradientClass: 'feature-card-secondary',
    },
    {
      icon: 'lucideMessageCircle',
      title: 'Υιοθεσία & Αγάπη',
      description:
        'Ξεκινήστε το ταξίδι της αγάπης και της συντροφικότητας με το νέο σας τετράποδο φίλο',
      bgColor: 'bg-gradient-to-br from-accent-500/20 to-accent-400/20',
      iconColor: 'text-accent-400',
      gradientClass: 'feature-card-accent',
    },
  ];
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\home\home.module.ts
```
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { NgIconsModule } from '@ng-icons/core';
import { HomeComponent } from './home.component';
import { FooterComponent } from './footer/footer.component';
import { HeroSectionComponent } from './hero-section/hero-section.component';
import { AiMatchingSectionComponent } from './ai-matching-section/ai-matching-section.component';
import { FeatureCardComponent } from './feature-card/feature-card.component';
import { HeaderComponent } from './shared/header/header.component';
import { AnimationDirective } from './shared/directives/animation.directive';
import { NotFoundComponent } from '../not-found/not-found.component';

@NgModule({
  declarations: [HomeComponent],
  imports: [
    CommonModule,
    RouterModule.forChild([
      { path: '', component: HomeComponent },
      { path: '**', component: NotFoundComponent },
    ]),
    NgIconsModule,
    HeaderComponent,
    FooterComponent,
    FeatureCardComponent,
    HeroSectionComponent,
    AiMatchingSectionComponent,
    AnimationDirective,
  ],
  exports: [HomeComponent],
})
export class HomeModule {}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\home\shared\auth-button\auth-button.component.ts
```
import { Component, Input } from '@angular/core';
import { RouterLink } from '@angular/router';
import { NgIconsModule } from '@ng-icons/core';

@Component({
  selector: 'app-auth-button',
  standalone: true,
  imports: [RouterLink, NgIconsModule],
  template: `
    <a [routerLink]="routerLink"
       class="flex items-center px-4 py-2 bg-white/10 hover:bg-white/20 text-white rounded-lg backdrop-blur-sm border border-white/20 transition-all duration-300 hover:scale-105 group">
      <ng-icon name="lucideUser" class="mr-2 group-hover:rotate-12 transition-transform duration-300" [size]="'20'"></ng-icon>
      <ng-content></ng-content>
    </a>
  `
})
export class AuthButtonComponent {
  @Input() routerLink!: string;
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\home\shared\directives\animation.directive.ts
```
import { Directive, ElementRef, Input, AfterViewInit } from '@angular/core';

@Directive({
  selector: '[appAnimation]',
  standalone: true,
})
export class AnimationDirective implements AfterViewInit {
  @Input() animationDelay: number = 0;
  @Input() threshold: number = 0.1;

  constructor(private el: ElementRef) {}

  ngAfterViewInit() {
    // Add initial classes
    this.el.nativeElement.style.opacity = '0';
    this.el.nativeElement.style.transition = `all 0.5s cubic-bezier(0.4, 0, 0.2, 1) ${this.animationDelay}ms`;

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            // Add visible class after a small delay to ensure transition works
            setTimeout(() => {
              this.el.nativeElement.style.opacity = '1';
              this.el.nativeElement.style.transform = 'none';
            }, 50);
            observer.unobserve(entry.target);
          }
        });
      },
      {
        threshold: this.threshold,
        rootMargin: '50px',
      }
    );

    observer.observe(this.el.nativeElement);
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\home\shared\dropdown\dropdown-item.component.ts
```
// src/app/ui/components/home/shared/dropdown/dropdown-item.component.ts
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { RouterLink } from '@angular/router';
import { NgIconsModule } from '@ng-icons/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-dropdown-item',
  standalone: true,
  imports: [CommonModule, RouterLink, NgIconsModule],
  template: `
    <a
      [routerLink]="routerLink"
      (click)="handleClick()"
      class="relative flex items-center px-4 py-2.5 text-sm text-gray-300 hover:text-white transition-all duration-200 group cursor-pointer"
      role="menuitem"
      tabindex="-1">
      <!-- Hover background effect -->
      <div class="absolute inset-0 bg-white/0 group-hover:bg-white/10 transition-colors duration-200"></div>
      
      <!-- Icon with animation -->
      <ng-icon 
        *ngIf="icon"
        [name]="icon"
        size="18"
        class="relative mr-3 transition-transform duration-200 group-hover:scale-110 group-hover:text-primary-400">
      </ng-icon>
      
      <!-- Content with slide animation -->
      <span class="relative transition-transform duration-200 group-hover:translate-x-0.5">
        <ng-content></ng-content>
      </span>
    </a>
  `
})
export class DropdownItemComponent {
  @Input() routerLink?: string;
  @Input() icon?: string;
  @Output() click = new EventEmitter<void>();

  handleClick(): void {
    this.click.emit();
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\home\shared\dropdown\dropdown.component.ts
```
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { CommonModule } from '@angular/common';
import { trigger, transition, style, animate } from '@angular/animations';

@Component({
  selector: 'app-dropdown',
  standalone: true,
  imports: [CommonModule],
  template: `
    <div class="relative inline-block">
      <!-- Trigger -->
      <div
        (click)="toggle()"
        class="transform transition-transform duration-200"
        [class.scale-105]="isOpen"
      >
        <ng-content select="[trigger]"></ng-content>
      </div>

      <!-- Dropdown Menu -->
      <div
        *ngIf="isOpen"
        [@dropdownAnimation]
        class="absolute z-50 w-48 py-2 bg-gradient-to-b from-gray-900 to-gray-800 rounded-2xl shadow-lg ring-1 ring-white/10 transform -translate-x-1/2 left-1/2 mt-4"
        role="menu"
        aria-orientation="vertical"
        aria-labelledby="user-menu-button"
        tabindex="-1"
      >
        <ng-content></ng-content>
      </div>

      <!-- Backdrop -->
      <div
        *ngIf="isOpen"
        class="fixed inset-0 z-40"
        [@backdropAnimation]
        (click)="close()"
      ></div>
    </div>
  `,
  animations: [
    trigger('dropdownAnimation', [
      transition(':enter', [
        style({
          opacity: 0,
          transform: 'translate(-50%, -20px) scale(0.95)',
        }),
        animate(
          '200ms cubic-bezier(0.4, 0, 0.2, 1)',
          style({
            opacity: 1,
            transform: 'translate(-50%, 0) scale(1)',
          })
        ),
      ]),
      transition(':leave', [
        animate(
          '150ms cubic-bezier(0.4, 0, 0.2, 1)',
          style({
            opacity: 0,
            transform: 'translate(-50%, -20px) scale(0.95)',
          })
        ),
      ]),
    ]),
    trigger('backdropAnimation', [
      transition(':enter', [
        style({ opacity: 0 }),
        animate('200ms cubic-bezier(0.4, 0, 0.2, 1)', style({ opacity: 1 })),
      ]),
      transition(':leave', [
        animate('150ms cubic-bezier(0.4, 0, 0.2, 1)', style({ opacity: 0 })),
      ]),
    ]),
  ],
})
export class DropdownComponent {
  @Input() isOpen = false;
  @Output() isOpenChange = new EventEmitter<boolean>();

  toggle(): void {
    this.isOpen = !this.isOpen;
    this.isOpenChange.emit(this.isOpen);
  }

  close(): void {
    this.isOpen = false;
    this.isOpenChange.emit(this.isOpen);
  }
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\home\shared\header\header.component.css
```
/* Header specific animations */
@keyframes float {
  0%,
  100% {
    transform: translateY(0) rotate(0deg);
  }
  50% {
    transform: translateY(-10px) rotate(5deg);
  }
}

.animate-float-very-slow {
  animation: float 8s ease-in-out infinite;
}

.animate-gradient {
  background-size: 200% 200%;
  animation: gradient 8s linear infinite;
}

.animate-gradient-slow {
  background-size: 200% 200%;
  animation: gradient 15s linear infinite;
}

@keyframes gradient {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\home\shared\header\header.component.html
```
<div class="fixed w-full top-0 z-50">
  <!-- Gradient background with animation -->
  <div
    class="absolute inset-0 bg-gradient-to-r from-gray-900/95 via-gray-800/95 to-gray-900/95 animate-gradient backdrop-blur-lg"
  ></div>
  <div
    class="absolute inset-0 bg-gradient-to-r from-primary-500/30 via-secondary-500/30 to-accent-500/30 animate-gradient-slow opacity-70"
  ></div>

  <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between h-20">
      <!-- Logo and Brand -->
      <div class="flex items-center">
        <a routerLink="/" class="flex items-center group">
          <div class="relative">
            <div
              class="w-10 h-10 flex items-center justify-center transform group-hover:scale-110 transition-transform duration-300"
            >
              <ng-icon
                name="lucideHeart"
                class="text-white animate-float-very-slow"
                [size]="'32'"
              >
              </ng-icon>
            </div>
          </div>
          <!-- Brand name with gradient - visible on all screens -->
          <h1 class="ml-3 text-3xl font-bold">
            <span
              class="bg-gradient-to-r from-primary-400 via-secondary-400 to-accent-400 bg-clip-text text-transparent animate-gradient"
            >
              Pawfect
            </span>
          </h1>
        </a>
      </div>

      <!-- Navigation Links - Desktop -->
      <div class="hidden md:flex items-center space-x-8">
        <app-nav-link routerLink="/about">Σχετικά</app-nav-link>
        <app-nav-link routerLink="/contact">Επικοινωνία</app-nav-link>

        <!-- Show login button or user menu -->
        <ng-container *ngIf="!isLoggedIn; else userMenu">
          <button 
            (click)="navigateToLogin()" 
            [disabled]="isLoginRoute()"
            class="flex items-center px-4 py-2 bg-white/10 hover:bg-white/20 text-white rounded-lg backdrop-blur-sm border border-white/20 transition-all duration-300 hover:scale-105 group disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 disabled:hover:bg-white/10"
          >
            <ng-icon 
              name="lucideUser" 
              class="mr-2 group-hover:rotate-12 transition-transform duration-300" 
              [size]="'20'"
            ></ng-icon>
            Σύνδεση
          </button>
        </ng-container>

        <ng-template #userMenu>
          <app-dropdown [(isOpen)]="isUserMenuOpen">
            <div trigger class="flex items-center space-x-2 cursor-pointer">
              <app-user-avatar
                [imageUrl]="currentUser?.profilePhoto?.sourceUrl"
                [name]="currentUser?.fullName"
              ></app-user-avatar>
            </div>

            <app-dropdown-item
              routerLink="/profile"
              icon="lucideUser"
              (click)="isUserMenuOpen = false"
              >Προφίλ</app-dropdown-item
            >
            <app-dropdown-item (click)="logout()" icon="lucideLogOut"
              >Αποσύνδεση</app-dropdown-item
            >
          </app-dropdown>
        </ng-template>
      </div>

      <!-- Mobile Menu Button -->
      <div class="md:hidden flex items-center">
        <button
          type="button"
          class="text-white/90 hover:text-white transition-colors p-2 rounded-lg hover:bg-white/10"
          (click)="toggleMobileMenu()"
        >
          <ng-icon
            [name]="isMobileMenuOpen ? 'lucideX' : 'lucideMenu'"
            [size]="'24'"
          ></ng-icon>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile Menu -->
  <app-mobile-menu
    [isOpen]="isMobileMenuOpen"
    [isLoggedIn]="isLoggedIn"
    [currentUser]="currentUser"
    (close)="closeMobileMenu()"
    (logout)="logout()"
  >
  </app-mobile-menu>
</div>

<!-- Spacer to prevent content from hiding under fixed header -->
<div class="h-20"></div>
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\home\shared\header\header.component.ts
```
import { Component } from '@angular/core';
import { RouterLink, Router } from '@angular/router';
import { NgIconsModule } from '@ng-icons/core';
import { CommonModule } from '@angular/common';
import { NavLinkComponent } from '../nav-link/nav-link.component';
import { MobileMenuComponent } from '../mobile-menu/mobile-menu.component';
import { UserAvatarComponent } from '../user-avatar/user-avatar.component';
import { DropdownComponent } from '../dropdown/dropdown.component';
import { DropdownItemComponent } from '../dropdown/dropdown-item.component';
import { AuthService } from 'src/app/services/auth.service';
import { BaseComponent } from 'src/app/common/ui/base-component';
import { User } from 'src/app/models/user/user.model';
import { takeUntil } from 'rxjs';
import { UserService } from 'src/app/services/user.service';
import { nameof } from 'ts-simple-nameof';

@Component({
  selector: 'app-header',
  standalone: true,
  imports: [
    CommonModule,
    RouterLink,
    NgIconsModule,
    NavLinkComponent,
    MobileMenuComponent,
    UserAvatarComponent,
    DropdownComponent,
    DropdownItemComponent,
  ],
  templateUrl: './header.component.html',
  styleUrls: ['./header.component.css'],
})
export class HeaderComponent extends BaseComponent {
  isMobileMenuOpen = false;
  isUserMenuOpen = false;
  isLoggedIn = false;

  currentUser?: User = undefined;

  constructor(
    private authService: AuthService,
    private userService: UserService,
    private router: Router
  ) {
    super();

    authService.isLoggedIn().subscribe((isLoggedInFlag: boolean) => {
      if (isLoggedInFlag) {
        this.userService
          .getSingle(authService.getUserId()!, [
            nameof<User>((x) => x.id),
            nameof<User>((x) => x.profilePhoto),
            nameof<User>((x) => x.fullName),
          ])
          .pipe(takeUntil(this._destroyed))
          .subscribe(
            (user: User) => {
              this.currentUser = user;
            },
            (error) => {
              console.error('Error fetching user:', error);
            }
          );
      }

      this.isLoggedIn = isLoggedInFlag;
      this.currentUser = undefined;
    });
  }

  toggleMobileMenu(): void {
    this.isMobileMenuOpen = !this.isMobileMenuOpen;
    document.body.style.overflow = this.isMobileMenuOpen ? 'hidden' : '';
  }

  closeMobileMenu(): void {
    this.isMobileMenuOpen = false;
    document.body.style.overflow = '';
  }

  logout(): void {
    this.authService
      .logout()
      .pipe(takeUntil(this._destroyed))
      .subscribe({
        next: () => {
          this.isUserMenuOpen = false;
          this.router.navigate(['/']);
        },
        error: (error) => {
          console.error('Logout error:', error);
          this.router.navigate(['/']);
        },
        complete: () => {
          this.closeMobileMenu();
        },
      });
  }

  navigateToLogin(): void {
    if (this.router.url !== '/auth/login') {
      this.router.navigate(['/auth/login']);
    }
  }

  isLoginRoute(): boolean {
    return this.router.url === '/auth/login';
  }
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\home\shared\mobile-menu\mobile-menu.component.ts
```
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { RouterLink, Router } from '@angular/router';
import { CommonModule } from '@angular/common';
import { NgIconsModule } from '@ng-icons/core';
import { UserAvatarComponent } from '../user-avatar/user-avatar.component';
import { User } from 'src/app/models/user/user.model';

@Component({
  selector: 'app-mobile-menu',
  standalone: true,
  imports: [CommonModule, RouterLink, NgIconsModule, UserAvatarComponent],
  template: `
    <div
      class="fixed inset-0 bg-black/20 backdrop-blur-sm transition-opacity duration-300"
      [class.opacity-100]="isOpen"
      [class.opacity-0]="!isOpen"
      [class.pointer-events-auto]="isOpen"
      [class.pointer-events-none]="!isOpen"
      (click)="close.emit()"
    ></div>

    <div
      class="fixed right-0 top-0 h-full w-[80%] max-w-sm bg-gradient-to-b from-gray-900 to-gray-800 transform transition-transform duration-300 ease-out shadow-2xl"
      [class.translate-x-0]="isOpen"
      [class.translate-x-full]="!isOpen"
    >
      <!-- Header -->
      <div class="flex items-center justify-end p-4 border-b border-gray-700">
        <button
          (click)="close.emit()"
          class="p-2 text-gray-400 hover:text-white transition-colors rounded-lg hover:bg-white/10"
        >
          <ng-icon name="lucideX" [size]="'24'"></ng-icon>
        </button>
      </div>

      <!-- User Profile Section (if logged in) -->
      <div *ngIf="isLoggedIn" class="p-4 border-b border-gray-700">
        <a
          routerLink="/profile"
          (click)="close.emit()"
          class="flex items-center space-x-3 p-3 rounded-xl text-gray-300 hover:text-white hover:bg-white/10 transition-all duration-300 group"
        >
          <app-user-avatar
            [imageUrl]="currentUser?.profilePhoto?.sourceUrl"
            [name]="currentUser?.fullName"
          >
          </app-user-avatar>
          <div>
            <p class="text-white font-medium">
              {{ currentUser?.fullName || 'Χρήστης' }}
            </p>
            <p class="text-gray-400 text-sm">Προβολή Προφίλ</p>
          </div>
        </a>
      </div>

      <!-- Navigation Links -->
      <nav class="p-4 space-y-2">
        <ng-container *ngFor="let item of menuItems">
          <a
            [routerLink]="item.route"
            (click)="close.emit()"
            class="flex items-center space-x-3 p-3 rounded-xl text-gray-300 hover:text-white hover:bg-white/10 transition-all duration-300 group"
          >
            <div
              class="flex items-center justify-center w-10 h-10 rounded-lg bg-gradient-to-br"
              [class]="item.gradient"
            >
              <ng-icon
                [name]="item.icon"
                [size]="'20'"
                class="transform group-hover:scale-110 transition-transform"
              ></ng-icon>
            </div>
            <span class="font-medium">{{ item.label }}</span>
          </a>
        </ng-container>
      </nav>

      <!-- Auth Section -->
      <div
        class="absolute bottom-0 left-0 right-0 p-4 border-t border-gray-700"
      >
        <ng-container *ngIf="!isLoggedIn; else logoutButton">
          <button
            (click)="navigateToLogin()"
            [disabled]="isLoginRoute()"
            class="flex items-center justify-center space-x-2 w-full p-3 bg-gradient-to-r from-primary-600 to-accent-600 text-white rounded-xl hover:shadow-lg hover:shadow-primary-500/20 transition-all duration-300 transform hover:-translate-y-1 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:translate-y-0 disabled:hover:shadow-none"
          >
            <ng-icon name="lucideUser" [size]="'20'"></ng-icon>
            <span class="font-medium">Σύνδεση</span>
          </button>
        </ng-container>

        <ng-template #logoutButton>
          <button
            (click)="onLogout()"
            class="flex items-center justify-center space-x-2 w-full p-3 border border-red-500/30 text-red-500 rounded-xl hover:bg-red-500/10 transition-all duration-300"
          >
            <ng-icon name="lucideLogOut" [size]="'20'"></ng-icon>
            <span class="font-medium">Αποσύνδεση</span>
          </button>
        </ng-template>
      </div>
    </div>
  `,
})
export class MobileMenuComponent {
  @Input() isOpen = false;
  @Input() isLoggedIn = false;
  @Input() currentUser?: User;
  @Output() close = new EventEmitter<void>();
  @Output() logout = new EventEmitter<void>();

  menuItems = [
    {
      label: 'Σχετικά',
      route: '/about',
      icon: 'lucideInfo',
      gradient: 'from-accent-600/20 to-accent-500/20',
    },
    {
      label: 'Επικοινωνία',
      route: '/contact',
      icon: 'lucideMessageCircle',
      gradient: 'from-primary-600/20 to-accent-500/20',
    },
  ];

  constructor(private router: Router) {}

  onLogout(): void {
    this.logout.emit();
    this.close.emit();
  }

  navigateToLogin(): void {
    if (!this.isLoginRoute()) {
      this.router.navigate(['/auth/login']);
      this.close.emit();
    }
  }

  isLoginRoute(): boolean {
    return this.router.url === '/auth/login';
  }
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\home\shared\nav-link\nav-link.component.ts
```
import { Component, Input } from '@angular/core';
import { RouterLink } from '@angular/router';

@Component({
  selector: 'app-nav-link',
  standalone: true,
  imports: [RouterLink],
  template: `
    <a [routerLink]="routerLink"
       class="relative text-white/80 hover:text-white transition-colors duration-300 py-2 group">
      <span>
        <ng-content></ng-content>
      </span>
      <span class="absolute bottom-0 left-0 w-0 h-0.5 bg-gradient-to-r from-primary-400 via-secondary-400 to-accent-400 group-hover:w-full transition-all duration-300"></span>
    </a>
  `
})
export class NavLinkComponent {
  @Input() routerLink!: string;
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\home\shared\user-avatar\user-avatar.component.ts
```
import { Component, Input } from '@angular/core';
import { NgIconsModule } from '@ng-icons/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-user-avatar',
  standalone: true,
  imports: [CommonModule, NgIconsModule],
  template: `
    <div 
      [class]="size === 'sm' ? 'w-8 h-8' : 'w-10 h-10'"
      class="relative rounded-full overflow-hidden transition-transform duration-200 hover:scale-105 group">
      <!-- Gradient background -->
      <div class="absolute inset-0 bg-gradient-to-br from-primary-500 to-accent-500 transition-opacity duration-200 group-hover:opacity-80"></div>
      
      <!-- Glow effect -->
      <div class="absolute inset-0 bg-primary-500/30 blur-md opacity-0 group-hover:opacity-100 transition-opacity duration-200"></div>
      
      <!-- Image or fallback icon -->
      <div class="relative flex items-center justify-center w-full h-full">
        <img 
          *ngIf="imageUrl" 
          [src]="imageUrl" 
          [alt]="name || 'User avatar'"
          class="w-full h-full object-cover transition-transform duration-200 group-hover:scale-110" />
        <ng-icon 
          *ngIf="!imageUrl"
          name="lucideUser"
          [size]="size === 'sm' ? '16' : '20'"
          class="text-white transition-transform duration-200 group-hover:scale-110">
        </ng-icon>
      </div>
    </div>
  `
})
export class UserAvatarComponent {
  @Input() imageUrl?: string;
  @Input() name?: string;
  @Input() size: 'sm' | 'md' = 'md';
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\not-found\not-found.component.ts
```
import { Component } from '@angular/core';
import { RouterLink } from '@angular/router';
import { NgIconsModule } from '@ng-icons/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-not-found',
  standalone: true,
  imports: [CommonModule, RouterLink, NgIconsModule],
  template: `
    <div class="min-h-screen flex items-center justify-center bg-gray-900 relative overflow-hidden">
      <!-- Background elements -->
      <div class="fixed inset-0 z-0">
        <div class="absolute inset-0 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900"></div>
        <div class="absolute inset-0 bg-gradient-to-br from-primary-900/20 via-secondary-900/20 to-accent-900/20 animate-gradient"></div>
        <div class="absolute inset-0 bg-gradient-radial from-transparent via-primary-900/10 to-transparent"></div>
      </div>

      <!-- Content -->
      <div class="relative z-10 text-center px-4">
        <!-- 404 Text -->
        <h1 class="text-[150px] sm:text-[200px] font-bold leading-none bg-gradient-to-r from-primary-400 via-secondary-400 to-accent-400 bg-clip-text text-transparent animate-gradient">
          404
        </h1>

        <!-- Cute Animal Emoji -->
        <div class="text-[50px] sm:text-[70px] mb-8 animate-bounce">
          🐾
        </div>

        <!-- Message -->
        <h2 class="text-2xl sm:text-3xl font-semibold text-white mb-4">
          Ωχ! Χάθηκε το κατοικίδιο...
        </h2>
        <p class="text-gray-400 text-lg mb-8 max-w-md mx-auto">
          Η σελίδα που ψάχνετε έχει χαθεί στο διαδίκτυο. Ας επιστρέψουμε στην αρχική!
        </p>

        <!-- Home Button -->
        <a
          routerLink="/"
          class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-primary-600 to-accent-600 text-white rounded-xl hover:shadow-lg hover:shadow-primary-500/20 transition-all duration-300 transform hover:-translate-y-1"
        >
          <span class="mr-2">🏠</span>
          Επιστροφή στην Αρχική
        </a>
      </div>

      <!-- Decorative Elements -->
      <div class="absolute -top-20 -left-20 w-60 h-60 bg-gradient-to-br from-primary-500/10 to-transparent rounded-full blur-3xl animate-float-1"></div>
      <div class="absolute -bottom-20 -right-20 w-60 h-60 bg-gradient-to-br from-accent-500/10 to-transparent rounded-full blur-3xl animate-float-2"></div>
    </div>
  `
})
export class NotFoundComponent {}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\search\components\animal-card\animal-card.component.ts
```
import { Component, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { Animal } from 'src/app/models/animal/animal.model';
import { Router } from '@angular/router';
import { trigger, transition, style, animate } from '@angular/animations';
import { UtilsService } from 'src/app/common/services/utils.service';

@Component({
  selector: 'app-animal-card',
  standalone: false,
  template: `
    <div 
      [@fadeIn]
      class="relative group overflow-hidden rounded-xl bg-gradient-to-br from-gray-800/95 to-gray-900/95 transition-all duration-300 hover:-translate-y-1 hover:shadow-xl hover:shadow-primary-500/10 overflow-x-hidden"
    >
      <!-- Image -->
      <div class="aspect-video overflow-hidden relative">
        <img
          [src]="currentImageUrl"
          [alt]="animal.name"
          class="w-full h-full object-cover transform transition-transform duration-300 group-hover:scale-110"
          (error)="onImageError($event)"
        />
        <!-- Gradient Overlay -->
        <div class="absolute inset-0 bg-gradient-to-t from-gray-900 via-gray-900/50 to-transparent"></div>
        
        <!-- Type Badge -->
        <div class="absolute top-2 left-2 px-2 py-1 bg-primary-500/90 backdrop-blur-sm rounded-full text-white text-xs font-medium">
          {{ animal.animalType?.name }}
        </div>

        <!-- Info Button -->
        <button 
          (click)="onInfoClick()"
          class="action-button absolute top-2 right-2 p-2 bg-white/15 hover:bg-white/25 backdrop-blur-sm rounded-full transition-all duration-300 shadow-lg">
          <ng-icon name="lucideInfo" [size]="'18'" class="text-white stroke-[2.5px]"></ng-icon>
        </button>
      </div>

      <!-- Content -->
      <div class="p-4">
        <!-- Name and Age -->
        <div class="flex items-center justify-between mb-2">
          <h3 *ngIf="animal.name" class="text-lg font-semibold text-white">{{ animal.name }}</h3>
          <span *ngIf="animal.age" class="text-sm font-medium text-primary-400">{{ animal.age }} ετών</span>
        </div>
        
        <!-- Details -->
        <div class="flex flex-wrap gap-2">
          <span class="px-2 py-0.5 bg-white/10 rounded-full text-xs text-gray-300" *ngIf="animal.breed">
            {{ animal.breed.name }}
          </span>
          <span class="px-2 py-0.5 bg-white/10 rounded-full text-xs text-gray-300" *ngIf="animal.weight">
            {{ animal.weight + ' kg' }} 
          </span>
        </div>

        <!-- Description Preview -->
        <p class="mt-2 text-xs text-gray-400 line-clamp-2">{{ animal.description || 'Περιγραφή μη διαθέσιμη' }}</p>

        <!-- Adopt Button (visible on hover) -->
        <div class="absolute inset-x-0 bottom-0 p-4 transform translate-y-full group-hover:translate-y-0 transition-transform duration-300 bg-gradient-to-t from-gray-900 via-gray-900/95 to-transparent">
          <button 
            (click)="navigateToAdoption($event)"
            class="w-full py-2 bg-gradient-to-r from-primary-600 to-accent-600 text-white rounded-lg hover:shadow-lg hover:shadow-primary-500/20 transition-all duration-300 transform hover:-translate-y-1"
          >
            Υιοθέτησε με τώρα!
          </button>
        </div>
      </div>
    </div>
  `,
  styles: [`
    .line-clamp-2 {
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    .action-button {
      @apply flex items-center justify-center;
      svg {
        @apply stroke-[2.5px] stroke-current;
      }
    }
  `],
  animations: [
    trigger('fadeIn', [
      transition(':enter', [
        style({ opacity: 0, transform: 'translateY(20px)' }),
        animate('400ms cubic-bezier(0.4, 0, 0.2, 1)', 
          style({ opacity: 1, transform: 'translateY(0)' }))
      ])
    ])
  ]
})
export class AnimalCardComponent {
  @Input() animal!: Animal;
  @Output() showDetails = new EventEmitter<Animal>();
  
  currentImageUrl: string = '';
  
  constructor(
    private router: Router,
    private utilsService: UtilsService,
    private cdr: ChangeDetectorRef
  ) {}
  
  ngOnInit() {
    this.loadImage();
  }

  async loadImage() {
    if (this.animal) {
      this.currentImageUrl = await this.utilsService.tryLoadImages(this.animal);
      this.cdr.markForCheck();
    }
  }
  
  onImageError(event: Event) {
    const img = event.target as HTMLImageElement;
    img.src = '/assets/placeholder.jpg';
  }

  navigateToAdoption(event: Event) {
    event.stopPropagation();
    this.router.navigate(['/adopt', this.animal.id]);
  }
  
  onInfoClick() {
    this.showDetails.emit(this.animal);
  }
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\search\components\saved-animals-grid\saved-animals-grid.component.ts
```
import { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Animal } from 'src/app/models/animal/animal.model';
import { AnimalCardComponent } from '../animal-card/animal-card.component';
import { PetDetailsDialogComponent } from 'src/app/common/ui/pet-details-dialog/pet-details-dialog.component';

@Component({
  selector: 'app-saved-animals-grid',
  template: `
    <div class="space-y-6">
      <h2 *ngIf="animals?.length" class="text-2xl font-bold text-white">Αποθηκευμένα Κατοικίδια</h2>
      
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        <app-animal-card
          *ngFor="let animal of animals"
          [animal]="animal!"
          (showDetails)="openDialog($event)"
        ></app-animal-card>
      </div>

      <app-pet-details-dialog
        [animal]="selectedAnimal!"
        [isOpen]="isDialogOpen"
        (closeDialog)="closeDialog()"
      ></app-pet-details-dialog>
    </div>
  `,
  standalone: false,
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class SavedAnimalsGridComponent {
  @Input() animals: Animal[] = [];
  
  isDialogOpen = false;
  selectedAnimal?: Animal;

  constructor(private cdr: ChangeDetectorRef) {}

  openDialog(animal: Animal) {
    this.selectedAnimal = animal;
    this.isDialogOpen = true;
    this.cdr.markForCheck();
  }

  closeDialog() {
    this.isDialogOpen = false;
    this.cdr.markForCheck();
  }
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\search\components\swipe-card\swipe-card.component.html
```
<div class="relative w-full h-[700px] overflow-hidden" #container>
  <!-- Loading State -->
  <div *ngIf="isLoading" class="absolute inset-0 flex items-center justify-center z-10">
    <div class="relative">
      <div class="w-16 h-16 rounded-full border-4 border-primary-500/30 border-t-primary-500 animate-spin"></div>
      <div class="absolute inset-0 flex items-center justify-center">
        <ng-icon name="lucidePawPrint" [size]="'24'" class="text-primary-500 animate-bounce"></ng-icon>
      </div>
    </div>
  </div>

  <!-- Card -->
  <div
    *ngIf="animal"
    #card
    [@cardState]="getCardState()"
    [@fadeInOut]="'in'"
    [class.opacity-50]="isLoading"
    class="absolute inset-0 bg-gradient-to-br from-gray-800/95 to-gray-900/95 backdrop-blur-lg rounded-3xl shadow-2xl overflow-hidden cursor-grab active:cursor-grabbing"
    [style.transform]="getTransform()"
    [style.opacity]="getOpacity()">
    <!-- Card Content -->
    <div class="relative h-full flex flex-col">
      <!-- Image Container -->
      <div class="h-[55%] relative overflow-hidden">
        <img
          [src]="currentImageUrl"
          [alt]="animal.name"
          class="w-full h-full object-cover transition-opacity duration-300"
          (error)="onImageError($event)" />
        <!-- Gradient Overlay -->
        <div class="absolute inset-0 bg-gradient-to-t from-gray-900 via-gray-900/50 to-transparent"></div>
        
        <!-- Type Badge -->
        <div class="absolute top-4 left-4 px-3 py-1.5 bg-primary-500/90 backdrop-blur-sm rounded-full text-white text-sm font-medium shadow-lg">
          <ng-icon name="lucidePawPrint" [size]="'16'" class="mr-1.5 stroke-[2.5px]"></ng-icon>
          {{ animal.animalType?.name || 'Άγνωστο' }}
        </div>

        <!-- Info Button -->
        <button 
          (click)="openDialog()"
          class="action-button absolute top-4 right-4 p-2.5 bg-white/15 hover:bg-white/25 backdrop-blur-sm rounded-full transition-all duration-300 shadow-lg">
          <ng-icon name="lucideInfo" [size]="'20'" class="text-white"></ng-icon>
        </button>
      </div>  

      <!-- Info Section -->
      <div class="flex-1 p-6 flex flex-col overflow-hidden">
        <!-- Name and Basic Info -->
        <div class="flex items-center justify-between mb-4">
          <div class="flex items-center space-x-3">
            <h3 class="text-2xl font-bold text-white">{{ animal.name }}</h3>
            <div 
              class="w-8 h-8 rounded-full flex items-center justify-center shadow-lg" 
              [ngClass]="{'bg-blue-500/25': animal.gender === 1, 'bg-pink-500/25': animal.gender === 2}">
              <ng-icon 
                [name]="animal.gender === 1 ? 'lucideMars' : 'lucideVenus'" 
                [size]="'18'" 
                [class]="animal.gender === 1 ? 'text-blue-400 stroke-[2.5px]' : 'text-pink-400 stroke-[2.5px]'">
              </ng-icon>
            </div>
          </div>
          <div class="flex items-center space-x-2">
            <ng-icon name="lucideCake" [size]="'18'" class="text-primary-400 stroke-[2.5px]"></ng-icon>
            <span class="text-lg font-medium text-primary-400">{{ animal.age }} ετών</span>
          </div>
        </div>

        <!-- Details with Icons -->
        <div class="grid grid-cols-2 gap-3 mb-4">
          <div class="flex items-center space-x-2" *ngIf="animal.breed?.name">
            <ng-icon name="lucideDog" [size]="'18'" class="text-gray-400 stroke-[2.5px]"></ng-icon>
            <span class="text-gray-300 truncate">{{ animal.breed?.name }}</span>
          </div>
          
          <div class="flex items-center space-x-2" *ngIf="animal.weight">
            <ng-icon name="lucideScale" [size]="'18'" class="text-gray-400 stroke-[2.5px]"></ng-icon>
            <span class="text-gray-300">{{ animal.weight }} kg</span>
          </div>

          <div class="flex items-center space-x-2" *ngIf="animal.healthStatus">
            <ng-icon name="lucideHeartPulse" [size]="'18'" class="text-gray-400 stroke-[2.5px]"></ng-icon>
            <span class="text-gray-300 truncate">{{ animal.healthStatus }}</span>
          </div>

          <div class="flex items-center space-x-2" *ngIf="animal.shelter?.shelterName">
            <ng-icon name="lucideHouse" [size]="'18'" class="text-gray-400 stroke-[2.5px]"></ng-icon>
            <span class="text-gray-300 truncate">{{ animal.shelter?.shelterName }}</span>
          </div>
        </div>

        <!-- Description -->
        <div class="flex-1 overflow-hidden">
          <p class="text-sm text-gray-300 line-clamp-3 leading-relaxed">
            {{ animal.description || 'Δεν υπάρχει διαθέσιμη περιγραφή.' }}
          </p>
        </div>

        <!-- Action Buttons -->
        <div class="flex justify-center space-x-6 mt-4">
          <button
            (click)="onDislike()"
            class="action-button p-4 bg-red-500/10 hover:bg-red-500/20 rounded-full transition-all duration-300 group shadow-lg"
          >
            <ng-icon 
              name="lucideX" 
              [size]="'24'" 
              class="text-red-500 transform transition-transform group-hover:scale-110"
            ></ng-icon>
          </button>

          <button
            (click)="onLike()"
            class="action-button p-4 bg-green-500/10 hover:bg-green-500/20 rounded-full transition-all duration-300 group shadow-lg"
          >
            <ng-icon 
              name="lucideHeart" 
              [size]="'24'" 
              class="text-green-500 transform transition-transform group-hover:scale-110"
            ></ng-icon>
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- No More Cards -->
  <div *ngIf="!animal && !hasMore" class="absolute inset-0 flex items-center justify-center">
    <div class="text-center space-y-4">
      <div class="w-20 h-20 mx-auto bg-gradient-to-br from-primary-500/20 to-accent-500/20 rounded-full flex items-center justify-center">
        <ng-icon name="lucideHeart" [size]="'40'" class="text-primary-400 stroke-[2.5px]"></ng-icon>
      </div>
      <p class="text-lg text-gray-400">Δεν υπάρχουν άλλα ζώα</p>
      <p class="text-sm text-gray-500">Δοκιμάστε να αλλάξετε τα κριτήρια αναζήτησης</p>
    </div>
  </div>

  <app-pet-details-dialog 
    [animal]="animal!" 
    [isOpen]="isDialogOpen" 
    (closeDialog)="closeDialog()">
  </app-pet-details-dialog>
</div>
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\search\components\swipe-card\swipe-card.component.ts
```
import { Component, Input, Output, EventEmitter, ElementRef, ViewChild, AfterViewInit, OnChanges, SimpleChanges, ChangeDetectorRef } from '@angular/core';
import { Animal } from 'src/app/models/animal/animal.model';
import { trigger, state, style, transition, animate } from '@angular/animations';
import { UtilsService } from 'src/app/common/services/utils.service';

@Component({
  selector: 'app-swipe-card',
  templateUrl: './swipe-card.component.html',
  styles: [`
    :host {
      display: block;
      width: 100%;
      height: 100%;
    }
    
    .action-button {
      @apply flex items-center justify-center;
      svg {
        @apply stroke-[2.5px] stroke-current;
      }
    }
  `],
  animations: [
    trigger('cardState', [
      state('default', style({
        transform: 'none'
      })),
      state('like', style({
        transform: 'translate(150%, -30px) rotate(30deg)',
        opacity: 0
      })),
      state('nope', style({
        transform: 'translate(-150%, -30px) rotate(-30deg)',
        opacity: 0
      })),
      transition('default => like', [
        animate('400ms cubic-bezier(0.4, 0, 0.2, 1)', style({
          transform: 'translate(150%, -30px) rotate(30deg)',
          opacity: 0
        }))
      ]),
      transition('default => nope', [
        animate('400ms cubic-bezier(0.4, 0, 0.2, 1)', style({
          transform: 'translate(-150%, -30px) rotate(-30deg)',
          opacity: 0
        }))
      ]),
      transition('* => default', [
        animate('400ms cubic-bezier(0.4, 0, 0.2, 1)', style({
          transform: 'none',
          opacity: 1
        }))
      ])
    ]),
    trigger('fadeInOut', [
      state('in', style({ opacity: 1 })),
      transition(':enter', [
        style({ opacity: 0 }),
        animate('300ms ease-out')
      ]),
      transition(':leave', [
        animate('300ms ease-in', style({ opacity: 0 }))
      ])
    ])
  ]
})
export class SwipeCardComponent implements AfterViewInit, OnChanges {
  @Input() key: string | null = null;
  @Input() animal: Animal | undefined;
  @Input() hasMore = true;
  @Output() swipeLeft = new EventEmitter<void>();
  @Output() swipeRight = new EventEmitter<Animal>();

  @ViewChild('card') cardElement!: ElementRef;
  @ViewChild('container') containerElement!: ElementRef;

  private startX = 0;
  private startY = 0;
  deltaX = 0;
  deltaY = 0;
  private isDragging = false;
  cardState = 'default';
  isDialogOpen = false;
  isLoading = false;

  currentImageIndex = 0;
  currentImageUrl = '';
  
  private readonly SWIPE_THRESHOLD = 30;
  private readonly MAX_ROTATION = 15;
  private readonly SWIPE_VELOCITY_THRESHOLD = 0.5;
  private lastMoveTime = 0;
  private lastMoveX = 0;
  private velocity = 0;

  constructor(
    private utilsService: UtilsService,
    private cdr: ChangeDetectorRef
  ) {}

  ngAfterViewInit() {
    if (this.cardElement) {
      this.setupTouchEvents();
      this.updateCurrentImageUrl();
    }
  }

  ngOnChanges(changes: SimpleChanges) {
    if (changes['animal'] && changes['animal'].currentValue !== changes['animal'].previousValue) {
      this.currentImageIndex = 0;
      this.currentImageUrl = '';
      this.isLoading = true;
      this.updateCurrentImageUrl();
    }
  }

  private setupTouchEvents() {
    const element = this.cardElement.nativeElement;

    element.addEventListener('mousedown', this.onStart.bind(this));
    element.addEventListener('touchstart', this.onStart.bind(this));
    document.addEventListener('mousemove', this.onMove.bind(this));
    document.addEventListener('touchmove', this.onMove.bind(this));
    document.addEventListener('mouseup', this.onEnd.bind(this));
    document.addEventListener('touchend', this.onEnd.bind(this));
  }

  private onStart(event: MouseEvent | TouchEvent) {
    if (!this.animal) return;

    this.isDragging = true;
    const point = this.getPoint(event);
    this.startX = point.x - this.deltaX;
    this.startY = point.y - this.deltaY;
    this.lastMoveTime = Date.now();
    this.lastMoveX = point.x;
    this.velocity = 0;
  }

  private onMove(event: MouseEvent | TouchEvent) {
    if (!this.isDragging) return;

    const point = this.getPoint(event);
    const currentTime = Date.now();
    const timeDiff = currentTime - this.lastMoveTime;
    
    if (timeDiff > 0) {
      this.velocity = (point.x - this.lastMoveX) / timeDiff;
    }
    
    this.lastMoveX = point.x;
    this.lastMoveTime = currentTime;

    const rawDeltaX = point.x - this.startX;
    this.deltaX = Math.sign(rawDeltaX) * Math.min(Math.abs(rawDeltaX), 150);
    this.deltaY = 0;
  }

  private onEnd() {
    if (!this.isDragging) return;
    this.isDragging = false;

    const absVelocity = Math.abs(this.velocity);
    const direction = Math.sign(this.velocity);

    if (Math.abs(this.deltaX) > this.SWIPE_THRESHOLD || absVelocity > this.SWIPE_VELOCITY_THRESHOLD) {
      if (this.deltaX > 0 || (direction > 0 && absVelocity > this.SWIPE_VELOCITY_THRESHOLD)) {
        this.onLike();
      } else {
        this.onDislike();
      }
    } else {
      this.resetPosition();
    }
  }

  onLike() {
    if (!this.animal) return;
    this.cardState = 'like';
    setTimeout(() => {
      this.swipeRight.emit(this.animal);
      this.resetPosition();
    }, 300);
  }

  onDislike() {
    if (!this.animal) return;
    this.cardState = 'nope';
    setTimeout(() => {
      this.swipeLeft.emit();
      this.resetPosition();
    }, 300);
  }

  private resetPosition() {
    this.deltaX = 0;
    this.deltaY = 0;
    this.velocity = 0;
    this.cardState = 'default';
  }

  private getPoint(event: MouseEvent | TouchEvent) {
    if (event instanceof MouseEvent) {
      return { x: event.clientX, y: event.clientY };
    } else {
      return {
        x: event.touches[0].clientX,
        y: event.touches[0].clientY
      };
    }
  }

  getTransform(): string {
    if (!this.isDragging && this.cardState === 'default') return '';
    
    const rotate = (this.deltaX / 100) * this.MAX_ROTATION;
    const clampedRotation = Math.max(Math.min(rotate, this.MAX_ROTATION), -this.MAX_ROTATION);
    
    return `translate(${this.deltaX}px, ${this.deltaY}px) rotate(${clampedRotation}deg)`;
  }

  getOpacity(): number {
    return Math.max(1 - Math.abs(this.deltaX) / 400, 0);
  }

  getCardState(): string {
    return this.cardState;
  }

  openDialog(): void {
    this.isDialogOpen = true;
  }

  closeDialog(): void {
    this.isDialogOpen = false;
  }

  onImageError(event: Event) {
    const img = event.target as HTMLImageElement;
    img.src = '/assets/placeholder.jpg';
  }
  
  private updateCurrentImageUrl() {
    this.isLoading = true;
    if (this.animal?.attachedPhotos?.length) {
      this.loadImage().finally(() => {
        this.isLoading = false; 
        this.cdr.markForCheck();
      });
    } else {
      this.currentImageUrl = 'assets/placeholder.jpg';
      this.isLoading = false;
      this.cdr.markForCheck();
    }
  }

  async loadImage() {
    if (this.animal) {
      this.currentImageUrl = await this.utilsService.tryLoadImages(this.animal);
      this.cdr.markForCheck();
    }
  }

  changeImage(index: number, event: Event) {
    event.stopPropagation();
    this.currentImageIndex = index;
    this.updateCurrentImageUrl();
  }

  getAdoptionStatusLabel(status: number): string {
    switch(status) {
      case 1: return 'Διαθέσιμο';
      case 2: return 'Σε αναμονή';
      case 3: return 'Υιοθετημένο';
      default: return 'Άγνωστο';
    }
  }
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\search\search.component.css
```
/* Gradient Animation */
@keyframes gradient {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

.animate-gradient {
  background-size: 200% 200%;
  animation: gradient 8s linear infinite;
}

/* Floating Animation */
@keyframes float-1 {
  0%, 100% { transform: translate(-50%, -50%) rotate(45deg); }
  25% { transform: translate(-45%, -55%) rotate(50deg); }
  50% { transform: translate(-50%, -45%) rotate(40deg); }
  75% { transform: translate(-55%, -50%) rotate(45deg); }
}

@keyframes float-2 {
  0%, 100% { transform: translate(50%, 0) rotate(-12deg); }
  25% { transform: translate(45%, -5%) rotate(-17deg); }
  50% { transform: translate(50%, 5%) rotate(-7deg); }
  75% { transform: translate(55%, 0) rotate(-12deg); }
}

@keyframes float-3 {
  0%, 100% { transform: translate(-50%, 50%) rotate(90deg); }
  25% { transform: translate(-45%, 45%) rotate(95deg); }
  50% { transform: translate(-50%, 55%) rotate(85deg); }
  75% { transform: translate(-55%, 50%) rotate(90deg); }
}

@keyframes float-4 {
  0%, 100% { transform: translate(0, 0) rotate(0deg); }
  25% { transform: translate(10px, -10px) rotate(5deg); }
  50% { transform: translate(-10px, 10px) rotate(-5deg); }
  75% { transform: translate(10px, 10px) rotate(5deg); }
}
.animate-float-4 {
  animation: float-4 15s ease-in-out infinite;
}

.animate-float-1 {
  animation: float-1 20s ease-in-out infinite;
}

.animate-float-2 {
  animation: float-2 25s ease-in-out infinite;
}

.animate-float-3 {
  animation: float-3 30s ease-in-out infinite;
}

/* Shimmer Effect */
@keyframes shimmer {
  0% {
    background-position: -200% center;
  }
  100% {
    background-position: 200% center;
  }
}

.animate-shimmer {
  animation: shimmer 3s ease-in-out infinite;
  background-size: 200% 100%;
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\search\search.component.html
```
<div class="min-h-screen bg-gray-900 overflow-hidden">
  <!-- Background elements -->
  <div class="fixed inset-0 z-0">
    <!-- Base gradient -->
    <div class="absolute inset-0 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900"></div>
    
    <!-- Animated color overlay -->
    <div class="absolute inset-0 bg-gradient-to-br from-primary-900/20 via-secondary-900/20 to-accent-900/20 animate-gradient"></div>
    
    <!-- Radial gradient -->
    <div class="absolute inset-0 bg-gradient-radial from-transparent via-primary-900/10 to-transparent"></div>
    
    <!-- Floating Paw Prints and Pet Silhouettes -->
    <div class="absolute inset-0 overflow-hidden">
      <!-- Paw Prints (20 Total) -->
      <div class="absolute -top-20 -left-20 w-40 h-40 text-primary-500/5 transform rotate-45 animate-float-1">
        <ng-icon name="lucidePawPrint" [size]="'160'"></ng-icon>
      </div>
      <div class="absolute top-1/4 -right-20 w-32 h-32 text-secondary-500/5 transform -rotate-12 animate-float-2">
        <ng-icon name="lucidePawPrint" [size]="'128'"></ng-icon>
      </div>
      <div class="absolute bottom-1/3 -left-16 w-36 h-36 text-accent-500/5 transform rotate-90 animate-float-3">
        <ng-icon name="lucidePawPrint" [size]="'144'"></ng-icon>
      </div>
      <div class="absolute top-1/2 right-1/4 w-20 h-20 text-primary-500/5 transform rotate-180 animate-float-2">
        <ng-icon name="lucidePawPrint" [size]="'80'"></ng-icon>
      </div>
      <div class="absolute bottom-1/4 left-1/3 w-24 h-24 text-secondary-500/5 transform -rotate-45 animate-float-3">
        <ng-icon name="lucidePawPrint" [size]="'96'"></ng-icon>
      </div>
      <div class="absolute top-1/8 left-1/4 w-28 h-28 text-primary-500/5 transform rotate-30 animate-float-1 [animation-delay:1s]">
        <ng-icon name="lucidePawPrint" [size]="'112'"></ng-icon>
      </div>
      <div class="absolute bottom-1/2 right-1/3 w-32 h-32 text-secondary-500/5 transform -rotate-60 animate-float-2 [animation-delay:2s]">
        <ng-icon name="lucidePawPrint" [size]="'128'"></ng-icon>
      </div>
      <div class="absolute top-3/4 left-1/2 w-24 h-24 text-accent-500/5 transform rotate-120 animate-float-3 [animation-delay:3s]">
        <ng-icon name="lucidePawPrint" [size]="'96'"></ng-icon>
      </div>
      <div class="absolute bottom-1/8 right-1/4 w-20 h-20 text-primary-500/5 transform rotate-270 animate-float-1 [animation-delay:4s]">
        <ng-icon name="lucidePawPrint" [size]="'80'"></ng-icon>
      </div>
      <div class="absolute top-1/3 left-1/5 w-36 h-36 text-secondary-500/5 transform -rotate-30 animate-float-2 [animation-delay:5s]">
        <ng-icon name="lucidePawPrint" [size]="'144'"></ng-icon>
      </div>
      <div class="absolute bottom-1/5 right-1/5 w-28 h-28 text-accent-500/5 transform rotate-60 animate-float-3 [animation-delay:6s]">
        <ng-icon name="lucidePawPrint" [size]="'112'"></ng-icon>
      </div>
      <div class="absolute top-1/2 left-1/4 w-32 h-32 text-primary-500/5 transform rotate-90 animate-float-1 [animation-delay:7s]">
        <ng-icon name="lucidePawPrint" [size]="'128'"></ng-icon>
      </div>
      <div class="absolute bottom-1/3 right-1/2 w-24 h-24 text-secondary-500/5 transform -rotate-90 animate-float-2 [animation-delay:8s]">
        <ng-icon name="lucidePawPrint" [size]="'96'"></ng-icon>
      </div>
      <div class="absolute top-1/4 left-1/3 w-20 h-20 text-accent-500/5 transform rotate-180 animate-float-3 [animation-delay:9s]">
        <ng-icon name="lucidePawPrint" [size]="'80'"></ng-icon>
      </div>
      <div class="absolute top-1/6 right-1/5 w-28 h-28 text-primary-500/5 transform rotate-15 animate-float-1 [animation-delay:10s]">
        <ng-icon name="lucidePawPrint" [size]="'112'"></ng-icon>
      </div>
      <div class="absolute bottom-1/6 left-1/5 w-32 h-32 text-secondary-500/5 transform -rotate-15 animate-float-2 [animation-delay:11s]">
        <ng-icon name="lucidePawPrint" [size]="'128'"></ng-icon>
      </div>
      <div class="absolute top-2/3 right-1/6 w-24 h-24 text-accent-500/5 transform rotate-45 animate-float-3 [animation-delay:12s]">
        <ng-icon name="lucidePawPrint" [size]="'96'"></ng-icon>
      </div>
      <div class="absolute bottom-2/3 left-1/6 w-20 h-20 text-primary-500/5 transform -rotate-45 animate-float-1 [animation-delay:13s]">
        <ng-icon name="lucidePawPrint" [size]="'80'"></ng-icon>
      </div>
      <div class="absolute top-1/5 right-1/2 w-36 h-36 text-secondary-500/5 transform rotate-90 animate-float-2 [animation-delay:14s]">
        <ng-icon name="lucidePawPrint" [size]="'144'"></ng-icon>
      </div>
      <div class="absolute bottom-1/4 left-1/2 w-28 h-28 text-accent-500/5 transform -rotate-90 animate-float-3 [animation-delay:15s]">
        <ng-icon name="lucidePawPrint" [size]="'112'"></ng-icon>
      </div>

      <div class="absolute top-1/6 right-1/6 w-16 h-16 text-primary-500/5 transform rotate-15 animate-float-4">
        <ng-icon name="lucideDog" [size]="'64'"></ng-icon>
      </div>
      <div class="absolute bottom-1/6 left-1/6 w-20 h-20 text-secondary-500/5 transform -rotate-15 animate-float-4 [animation-delay:1s]">
        <ng-icon name="lucideCat" [size]="'80'"></ng-icon>
      </div>
      <div class="absolute top-2/3 right-1/3 w-18 h-18 text-accent-500/5 transform rotate-45 animate-float-4 [animation-delay:2s]">
        <ng-icon name="lucideDog" [size]="'72'"></ng-icon>
      </div>
      <div class="absolute bottom-2/3 left-1/4 w-14 h-14 text-primary-500/5 transform -rotate-45 animate-float-4 [animation-delay:3s]">
        <ng-icon name="lucideCat" [size]="'56'"></ng-icon>
      </div>
      <div class="absolute top-1/2 right-1/2 w-16 h-16 text-secondary-500/5 transform rotate-90 animate-float-4 [animation-delay:4s]">
        <ng-icon name="lucideDog" [size]="'64'"></ng-icon>
      </div>
      <div class="absolute bottom-1/2 left-1/3 w-18 h-18 text-accent-500/5 transform -rotate-90 animate-float-4 [animation-delay:5s]">
        <ng-icon name="lucideCat" [size]="'72'"></ng-icon>
      </div>
      <div class="absolute top-1/3 right-1/4 w-20 h-20 text-primary-500/5 transform rotate-30 animate-float-4 [animation-delay:6s]">
        <ng-icon name="lucideDog" [size]="'80'"></ng-icon>
      </div>
      <div class="absolute bottom-1/3 left-1/5 w-16 h-16 text-secondary-500/5 transform -rotate-30 animate-float-4 [animation-delay:7s]">
        <ng-icon name="lucideCat" [size]="'64'"></ng-icon>
      </div>
      <div class="absolute top-3/4 right-1/5 w-18 h-18 text-accent-500/5 transform rotate-60 animate-float-4 [animation-delay:8s]">
        <ng-icon name="lucideDog" [size]="'72'"></ng-icon>
      </div>
      <div class="absolute bottom-3/4 left-1/2 w-14 h-14 text-primary-500/5 transform -rotate-60 animate-float-4 [animation-delay:9s]">
        <ng-icon name="lucideCat" [size]="'56'"></ng-icon>
      </div>
      <div class="absolute top-1/4 right-1/3 w-16 h-16 text-secondary-500/5 transform rotate-120 animate-float-4 [animation-delay:10s]">
        <ng-icon name="lucideDog" [size]="'64'"></ng-icon>
      </div>
      <div class="absolute bottom-1/5 left-1/4 w-18 h-18 text-accent-500/5 transform -rotate-120 animate-float-4 [animation-delay:11s]">
        <ng-icon name="lucideCat" [size]="'72'"></ng-icon>
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <div class="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-28">
    <!-- Enhanced Search Section -->
    <div class="max-w-2xl mx-auto mb-12 space-y-2">
      <div class="text-center mb-8">
        <h1 class="text-5xl sm:text-5xl font-bold text-white mb-5">
          Βρείτε τον τέλειο 
          <span class="bg-gradient-to-r from-primary-400 via-secondary-400 to-accent-400 bg-clip-text text-transparent">
            χνουδωτό
          </span>
          φίλο σας
        </h1>
        <p class="text-gray-400 text-lg">Περιγράψτε το ιδανικό σας κατοικίδιο και αφήστε μας να το βρούμε για εσάς</p>
      </div>
    
      <!-- Stylized Search Form -->
      <form [formGroup]="searchForm" (ngSubmit)="onSearch()" class="relative space-y-2">
        <!-- Search Input Container -->
        <div class="relative flex flex-col sm:flex-row items-center sm:items-stretch space-y-2 sm:space-y-0">
          <input
            type="text"
            formControlName="searchQuery"
            class="w-full px-6 py-4 bg-white/5 border border-white/10 rounded-2xl text-white placeholder-gray-400
                   focus:border-primary-500/50 focus:ring-2 focus:ring-primary-500/20 focus:outline-none
                   transition-all duration-300 sm:pr-32"
            placeholder="π.χ. Ένα φιλικό σκυλάκι μικρού μεγέθους που αγαπάει τα παιδιά..."
          />
          
          <!-- Search Button -->
          <button
            type="submit"
            class="w-full sm:w-auto px-6 py-2.5 bg-gradient-to-r from-primary-600 to-accent-600 text-white rounded-xl hover:shadow-lg 
                  hover:shadow-primary-500/20 transition-all duration-300 transform hover:scale-105 flex items-center justify-center space-x-2 group
                  sm:absolute sm:right-2 sm:top-1/2 sm:-translate-y-1/2"
          >
            <span>Αναζήτηση</span>
            <ng-icon 
              name="lucidePawPrint" 
              [size]="'20'" 
              class="transform transition-transform group-hover:rotate-12">
            </ng-icon>
          </button>
        </div>
        <!-- Spacer -->
      <div class="h-5"></div>
        <!-- Search Suggestions -->
        <div class="flex flex-wrap gap-2 justify-center">
          <button
            *ngFor="let suggestion of searchSuggestions"
            type="button"
            (click)="applySearchSuggestion(suggestion)"
            class="px-4 py-2 bg-white/5 hover:bg-white/10 border border-white/10 rounded-full text-sm text-gray-300
                   transition-all duration-300 hover:border-primary-500/30 hover:text-white flex items-center space-x-2"
          >
            <ng-icon [name]="suggestion.icon" [size]="'16'"></ng-icon>
            <span>{{ suggestion.text }}</span>
          </button>
        </div>
      </form>
    </div>

    <!-- Initial State -->
    <div *ngIf="isInitialLoad" class="flex justify-center items-center mb-12">
      <div class="w-full max-w-sm text-center py-12">
        <ng-icon name="lucidePawPrint" [size]="'64'" class="text-primary-500 mb-6 animate-bounce"></ng-icon>
        <h2 class="text-2xl font-bold text-white mb-4">Καλώς ήρθατε!</h2>
        <p class="text-gray-300 mb-4">Περιγράψτε το ιδανικό σας κατοικίδιο στο παραπάνω πεδίο αναζήτησης.</p>
        <p class="text-gray-300 mb-4">Στη συνέχεια, σαρώστε δεξιά για να αποθηκεύσετε τα αγαπημένα σας ή αριστερά για να δείτε το επόμενο.</p>
        <div class="flex justify-center space-x-4 mt-6">
          <div class="flex flex-col items-center">
            <ng-icon name="lucideX" [size]="'32'" class="text-red-500 mb-2"></ng-icon>
            <span class="text-sm text-gray-400">Παράλειψη</span>
          </div>
          <div class="flex flex-col items-center">
            <ng-icon name="lucideHeart" [size]="'32'" class="text-green-500 mb-2"></ng-icon>
            <span class="text-sm text-gray-400">Αποθήκευση</span>
          </div>
        </div>
      </div>
    </div>

    <!-- Other States (Loading, Error, Swipe Cards, Empty) -->
    <div *ngIf="!isInitialLoad">
      <!-- Initial Loading State -->
      <div *ngIf="isLoading" class="flex flex-col items-center justify-center py-12 space-y-4">
        <div class="relative">
          <div class="w-20 h-20 rounded-full border-4 border-primary-500/30 border-t-primary-500 animate-spin"></div>
          <div class="absolute inset-0 flex items-center justify-center">
            <ng-icon name="lucidePawPrint" [size]="'32'" class="text-primary-500 animate-bounce"></ng-icon>
          </div>
        </div>
        <p class="text-gray-400">Αναζήτηση κατοικιδίων...</p>
      </div>

      <!-- Error State -->
      <div *ngIf="error" class="flex flex-col items-center justify-center py-12 space-y-6">
        <div class="w-20 h-20 bg-red-500/10 rounded-full flex items-center justify-center">
          <ng-icon name="lucideX" [size]="'40'" class="text-red-500"></ng-icon>
        </div>
        <div class="text-center">
          <h3 class="text-xl font-semibold text-red-400 mb-2">{{ error.title }}</h3>
          <p class="text-gray-400">{{ error.message }}</p>
        </div>
        <button 
          (click)="resetSearch()"
          class="px-6 py-2 bg-gradient-to-r from-primary-600 to-accent-600 text-white rounded-lg hover:shadow-lg hover:shadow-primary-500/20 transition-all duration-300"
        >
          Δοκιμάστε ξανά
        </button>
      </div>

      <!-- Spacer -->
      <div class="h-16"></div>

      <!-- Swipe Cards and Empty States -->
      <div *ngIf="!isLoading && !error" class="flex justify-center items-center mb-12">
        <div class="w-full max-w-sm">
          <ng-container *ngIf="getCurrentAnimal() as animal">
            <app-swipe-card
              [key]="currentAnimalKey"
              [animal]="animal"
              [hasMore]="hasMoreAnimals()"
              (swipeLeft)="onSwipeLeft()"
              (swipeRight)="onSwipeRight($event)">
            </app-swipe-card>
          </ng-container>

          <!-- Empty State: No Animals Found -->
          <div *ngIf="!getCurrentAnimal() && animals.length === 0 && !isLoadingMore" class="text-center py-12">
            <ng-icon name="lucidePawPrint" [size]="'48'" class="text-gray-500 mb-4"></ng-icon>
            <h3 class="text-xl font-semibold text-white mb-2">Δεν βρέθηκαν κατοικίδια</h3>
            <p class="text-gray-400">Προσπαθήστε να αλλάξετε την αναζήτησή σας</p>
          </div>

          <!-- Empty State: All Animals Viewed -->
          <div *ngIf="!getCurrentAnimal() && animals.length > 0 && !hasMoreToLoad && !isLoadingMore" class="text-center py-12">
            <ng-icon name="lucideCheck" [size]="'48'" class="text-primary-500 mb-4"></ng-icon>
            <h3 class="text-xl font-semibold text-white mb-2">Τα είδατε όλα!</h3>
            <p class="text-gray-400">Έχετε δει όλα τα διαθέσιμα κατοικίδια</p>
          </div>
        </div>
      </div>

      <!-- Loading More State -->
      <div *ngIf="isLoadingMore" class="flex justify-center items-center py-8">
        <div class="flex items-center space-x-3">
          <div class="w-3 h-3 bg-primary-500 rounded-full animate-bounce"></div>
          <div class="w-3 h-3 bg-primary-500 rounded-full animate-bounce [animation-delay:0.2s]"></div>
          <div class="w-3 h-3 bg-primary-500 rounded-full animate-bounce [animation-delay:0.4s]"></div>
        </div>
      </div>
    </div>

    <!-- Spacer -->
    <div class="h-16"></div>

    <!-- Saved Animals Grid -->
    <app-saved-animals-grid
      [animals]="savedAnimals"
    ></app-saved-animals-grid>
  </div>
</div>
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\search\search.component.ts
```
import { Component, OnInit } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { BaseComponent } from 'src/app/common/ui/base-component';
import { AnimalService } from 'src/app/services/animal.service';
import { Animal } from 'src/app/models/animal/animal.model';
import { Breed } from 'src/app/models/breed/breed.model';
import { AnimalType } from 'src/app/models/animal-type/animal-type.model';
import { AnimalLookup } from 'src/app/lookup/animal-lookup';
import { takeUntil, debounceTime, distinctUntilChanged, tap, finalize, catchError } from 'rxjs/operators';
import { nameof } from 'ts-simple-nameof';
import { Shelter } from 'src/app/models/shelter/shelter.model';
import { UtilsService } from 'src/app/common/services/utils.service';
import { LogService } from 'src/app/common/services/log.service';
import { ErrorHandlerService } from 'src/app/common/services/error-handler.service';
import { ErrorDetails } from 'src/app/common/ui/error-message-banner.component';
import { of } from 'rxjs';

interface SearchSuggestion {
  text: string;
  query: string;
  icon: string;
}

@Component({
  selector: 'app-search',
  templateUrl: './search.component.html',
  styleUrls: ['./search.component.css']
})
export class SearchComponent extends BaseComponent implements OnInit {
  searchControl = new FormControl('');
  searchForm = new FormGroup({
    searchQuery: this.searchControl
  });

  animals: Animal[] = [];
  savedAnimals: Animal[] = [];
  currentIndex = 0;
  isLoading = false;
  isLoadingMore = false;
  error: ErrorDetails | null = null;

  // Search suggestions
  searchSuggestions: SearchSuggestion[] = [
    { 
      text: 'Φιλικό προς παιδιά',
      query: 'Ένα ήρεμο και φιλικό κατοικίδιο που αγαπάει τα παιδιά',
      icon: 'lucideHeart'
    },
    { 
      text: 'Μικρό μέγεθος',
      query: 'Ένα μικρόσωμο κατοικίδιο κατάλληλο για διαμέρισμα',
      icon: 'lucideDog'
    },
    { 
      text: 'Ενεργητικό',
      query: 'Ένα ενεργητικό κατοικίδιο για τρέξιμο και παιχνίδι',
      icon: 'lucideActivity'
    },
    { 
      text: 'Ήσυχο',
      query: 'Ένα ήσυχο και ήρεμο κατοικίδιο',
      icon: 'lucideMoon'
    }
  ];

  // Pagination related properties
  pageSize = 2;
  currentOffset = 1;
  loadThreshold = 0.55;
  hasMoreToLoad = true;

  // Initial state
  isInitialLoad = true; 

  // Key to force recreation of SwipeCardComponent
  currentAnimalKey: string | null = null;

  constructor(
    private animalService: AnimalService,
    private utilsService: UtilsService,
    private logService: LogService,
    private errorHandler: ErrorHandlerService
  ) {
    super();
  }

  ngOnInit() { }

  onSearch() {
    this.isInitialLoad = false;
    this.resetSearch();
    this.loadAnimals();
  }

  applySearchSuggestion(suggestion: SearchSuggestion) {
    this.searchControl.setValue(suggestion.query);
    this.onSearch();
  }

  loadAnimals(append: boolean = false) {
    if (!this.hasMoreToLoad && append) {
      return;
    }
  
    if (!append) {
      this.isLoading = true;
      this.currentOffset = 1;
      this.hasMoreToLoad = true;
      this.error = null;
    } else {
      this.isLoadingMore = true;
    }
    
    const lookup: AnimalLookup = {
      offset: this.currentOffset, 
      pageSize: this.pageSize,
      query: this.searchControl.value || '',
      fields: [
        nameof<Animal>(x => x.id),
        nameof<Animal>(x => x.name),
        nameof<Animal>(x => x.gender),
        nameof<Animal>(x => x.description),
        nameof<Animal>(x => x.attachedPhotos),
        nameof<Animal>(x => x.adoptionStatus),
        nameof<Animal>(x => x.weight),
        nameof<Animal>(x => x.age),
        nameof<Animal>(x => x.healthStatus),
        [nameof<Animal>(x => x.animalType), nameof<AnimalType>(x => x.name)].join('.'),
        [nameof<Animal>(x => x.breed), nameof<Breed>(x => x.name)].join('.'),
        [nameof<Animal>(x => x.shelter), nameof<Shelter>(x => x.shelterName)].join('.'),
      ],
      sortBy: [],
      sortDescending: true
    };
  
    this.animalService.queryFreeView(lookup)
      .pipe(
        takeUntil(this._destroyed),
        catchError(error => {
          this.error = this.errorHandler.handleError(error);
          return of([]);
        }),
        finalize(() => {
          this.isLoading = false;
          this.isLoadingMore = false;
        })
      )
      .subscribe(animals => {
        if (animals.length < this.pageSize) {
          this.hasMoreToLoad = false;
        }

        this.animals = this.utilsService.combineDistinct(this.utilsService.combineDistinct(this.animals, animals), this.savedAnimals);
        
        this.currentOffset++;
        this.updateCurrentAnimalKey();
      });
  }

  checkLoadMore() {
    const viewedPercentage = this.currentIndex / this.animals.length;
    if (viewedPercentage >= this.loadThreshold && !this.isLoadingMore && this.hasMoreToLoad) {
      this.loadAnimals(true);
    }
  }

  onSwipeRight(animal: Animal) {
    this.savedAnimals = this.utilsService.combineDistinct(this.savedAnimals, [animal]);
    this.currentIndex++;
    this.updateCurrentAnimalKey();
    this.checkLoadMore();
  }

  onSwipeLeft() {
    this.currentIndex++;
    this.updateCurrentAnimalKey();
    this.checkLoadMore();
  }

  getCurrentAnimal(): Animal | undefined {
    return this.animals[this.currentIndex];
  }

  hasMoreAnimals(): boolean {
    return this.currentIndex < this.animals.length || this.isLoadingMore;
  }

  resetSearch() {
    this.currentOffset = 1;
    this.error = null;
  }

  private updateCurrentAnimalKey() {
    const animal = this.getCurrentAnimal();
    if (animal) {
      this.currentAnimalKey = `animal-${animal.id}-${Date.now()}`;
    } else {
      this.currentAnimalKey = null;
    }
  }
}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\app\ui\components\search\search.module.ts
```
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { SearchComponent } from './search.component';
import { RouterModule } from '@angular/router';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { NotFoundComponent } from '../not-found/not-found.component';
import { NgIconsModule } from '@ng-icons/core';
import { FormInputComponent } from 'src/app/common/ui/form-input.component';
import { SwipeCardComponent } from './components/swipe-card/swipe-card.component';
import { AnimalCardComponent } from './components/animal-card/animal-card.component';
import { SavedAnimalsGridComponent } from './components/saved-animals-grid/saved-animals-grid.component';
import { LucideAngularModule } from 'lucide-angular';
import { PetDetailsDialogComponent } from 'src/app/common/ui/pet-details-dialog/pet-details-dialog.component';

@NgModule({
  declarations: [
    SearchComponent,
    SwipeCardComponent,
    SavedAnimalsGridComponent,
    AnimalCardComponent,
  ],
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    FormInputComponent,
    LucideAngularModule,
    PetDetailsDialogComponent,
    NgIconsModule,
    RouterModule,
    RouterModule.forChild([
      { path: '', component: SearchComponent },
      { path: '**', component: NotFoundComponent },
    ]),
  ],
  exports: [
    SearchComponent,
    SwipeCardComponent,
    SavedAnimalsGridComponent,
    AnimalCardComponent,
  ]
})
export class SearchModule {}
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\configs\config.json
```
{
  "appServiceAddress": "https://localhost:7200/",
  "disableAuth": true
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\configs\environment.json
```
{
  "googleClientId": "75112860869-vnffbcond80i42ugsjm0ue91n4188oq4.apps.googleusercontent.com",
  "googleClientSecret": "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",
  "redirectPath": "/auth/google/callback",
  "baseGoogleEndpoint": "https://accounts.google.com/o/oauth2/v2/auth"
}

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\index.html
```
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Pawfect</title>
    <base href="/" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/x-icon" href="favicon.ico" />
  </head>
  <body>
    <app-root></app-root>
  </body>
</html>

```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\main.ts
```
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { AppModule } from './app/app.module';
import { enableProdMode } from '@angular/core';

// Enable production mode if needed
// enableProdMode();

platformBrowserDynamic()
  .bootstrapModule(AppModule, {
    ngZoneEventCoalescing: true,
    ngZoneRunCoalescing: true
  })
  .catch((err) => console.error(err));
```


// File: C:\Users\ppanagiotopoulos\source\repos\Projects\Pawfect-Pet-Adoption-App\frontend\src\styles.css
```
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --color-primary: 124, 58, 237;   /* primary-600 */
  --color-secondary: 219, 39, 119; /* secondary-600 */
  --color-accent: 79, 70, 229;    /* accent-600 */
}

/* Hide scrollbar but allow scrolling */
* {
  scrollbar-width: none; /* Firefox */
  -ms-overflow-style: none; /* IE and Edge */
}

/* Hide scrollbar for Chrome, Safari and Opera */
*::-webkit-scrollbar {
  display: none;
}

/* Prevent horizontal scroll */
html, body {
  max-width: 100%;
  overflow-x: hidden;
}

@layer base {
  body {
    @apply antialiased text-gray-900 bg-gradient-to-br from-primary-50 via-secondary-50 to-accent-50;
  }

  h1 {
    @apply text-4xl font-bold text-gray-900;
  }

  h2 {
    @apply text-3xl font-semibold text-gray-800;
  }

  h3 {
    @apply text-2xl font-semibold text-gray-800;
  }

  h4 {
    @apply text-xl font-medium text-gray-800;
  }
}

@layer components {
  .btn {
    @apply px-4 py-2 rounded-lg font-medium transition-all duration-300;
  }

  .btn-primary {
    @apply bg-gradient-to-r from-primary-600 to-accent-600 text-white 
           hover:shadow-lg hover:shadow-primary-500/30 hover:-translate-y-0.5;
  }

  .btn-secondary {
    @apply bg-gradient-to-r from-secondary-600 to-primary-600 text-white 
           hover:shadow-lg hover:shadow-secondary-500/30 hover:-translate-y-0.5;
  }

  .card {
    @apply bg-white rounded-xl shadow-lg hover:shadow-xl transition-all duration-300
           p-6 backdrop-blur-sm backdrop-filter;
  }

  .gradient-text {
    @apply bg-gradient-to-r from-primary-600 via-secondary-600 to-accent-600 
           bg-clip-text text-transparent;
  }

  .glass-effect {
    @apply bg-white/80 backdrop-blur-md;
  }
}

/* Custom Animations */
.animate-gradient {
  background-size: 200% 200%;
  animation: gradient 8s linear infinite;
}

.animate-gradient-slow {
  background-size: 200% 200%;
  animation: gradient 15s linear infinite;
}

.animate-float {
  animation: float 6s ease-in-out infinite;
}

.animate-pulse-slow {
  animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}

@keyframes gradient {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

@keyframes float {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-10px); }
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.5; }
}

/* Form validation highlight effect */
@keyframes highlightError {
  0% { box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.7); }
  70% { box-shadow: 0 0 0 10px rgba(239, 68, 68, 0); }
  100% { box-shadow: 0 0 0 0 rgba(239, 68, 68, 0); }
}

.highlight-error {
  animation: highlightError 1.5s ease-out;
  border-color: rgba(239, 68, 68, 0.7) !important;
}

html {
  scroll-behavior: smooth;
}

/* Angular Material Theme Overrides */
.mat-form-field {
  width: 100%;
}

.mat-form-field-appearance-outline .mat-form-field-outline {
  color: rgba(255, 255, 255, 0.1);
}

.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick {
  color: var(--color-primary);
}

.mat-form-field-label {
  color: rgba(255, 255, 255, 0.7) !important;
}

.mat-input-element {
  color: white !important;
}
```
